/* The following code was generated by JFlex 1.4.2 on 31/03/14 4:30 PM */

/*
 *   This program is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */


/*
 * Scanner.java
 * Copyright (C) 2008-2013 University of Waikato, Hamilton, New Zealand
 */

package adams.parser.spreadsheetformula;

import java_cup.runtime.SymbolFactory;
import java.io.*;

/**
 * A scanner for spreadsheet formulas.
 *
 * @author FracPete (fracpete at waikato dot ac dot nz)
 * @version $Revision: 8891 $
 */

public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\56\1\55\1\0\1\56\1\65\22\0\1\56\1\13\1\63"+
    "\1\54\1\0\1\6\1\17\1\0\1\61\1\62\1\3\1\2\1\57"+
    "\1\1\1\52\1\4\1\51\11\53\1\7\1\60\1\10\1\11\1\12"+
    "\2\0\1\20\1\31\1\37\1\21\1\25\1\26\1\33\1\41\1\36"+
    "\1\46\1\44\1\27\1\42\1\14\1\15\1\35\1\32\1\23\1\30"+
    "\1\16\1\24\1\43\1\40\1\34\1\45\1\50\1\0\1\64\1\0"+
    "\1\5\1\47\1\0\1\20\1\31\1\37\1\21\1\25\1\26\1\33"+
    "\1\41\1\36\1\46\1\44\1\27\1\42\1\14\1\15\1\35\1\32"+
    "\1\23\1\30\1\16\1\24\1\43\1\40\1\34\1\45\1\50\1\0"+
    "\1\22\uff83\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\3\1\1\15\2\1"+
    "\1\16\2\1\1\17\13\1\1\20\1\1\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\0\1\33\1\34\1\35\3\0\1\36\1\16\27\0"+
    "\1\37\2\0\1\40\12\0\1\20\1\41\1\42\1\43"+
    "\1\44\1\0\1\14\1\45\1\46\1\0\1\47\2\0"+
    "\1\15\1\50\1\0\1\51\4\0\1\52\3\0\1\53"+
    "\1\54\1\0\1\55\3\0\1\56\2\0\1\57\1\60"+
    "\1\61\4\0\1\62\6\0\1\63\1\64\1\65\2\0"+
    "\1\20\2\0\1\66\1\67\1\0\1\70\1\0\1\71"+
    "\4\0\1\72\2\0\1\73\4\0\1\74\6\0\1\75"+
    "\1\0\1\76\3\0\1\77\1\0\1\100\2\0\1\101"+
    "\1\102\1\103\1\104\1\105\1\0\1\106\1\0\1\107"+
    "\1\0\1\60\10\0\1\110\7\0\1\55\1\111\1\112"+
    "\1\0\1\113\1\0\1\40\10\0\1\114\1\0\1\115"+
    "\1\116\6\0\1\117\1\120\1\121\1\122\1\123\1\124"+
    "\4\0\1\125\2\0\1\126\1\102\1\105\3\0\1\127"+
    "\1\0\1\130\1\131";

  private static int [] zzUnpackAction() {
    int [] result = new int[261];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\154\0\154\0\154\0\154"+
    "\0\154\0\154\0\330\0\154\0\u010e\0\u0144\0\u017a\0\u01b0"+
    "\0\u01e6\0\154\0\u021c\0\u0252\0\154\0\u0288\0\u02be\0\u02f4"+
    "\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e\0\u04a4"+
    "\0\u04da\0\u0510\0\u0546\0\u057c\0\u05b2\0\u05e8\0\154\0\154"+
    "\0\154\0\154\0\154\0\154\0\u061e\0\154\0\u0654\0\u068a"+
    "\0\154\0\154\0\154\0\u03cc\0\u06c0\0\u06f6\0\u072c\0\u03cc"+
    "\0\u0762\0\u0798\0\u07ce\0\u0804\0\u083a\0\u0870\0\u08a6\0\u08dc"+
    "\0\u0912\0\u0948\0\u097e\0\u09b4\0\u09ea\0\u0a20\0\u0a56\0\u0a8c"+
    "\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a\0\u0bd0\0\u0c06\0\u03cc"+
    "\0\u0c3c\0\u0c72\0\u0ca8\0\u0cde\0\u0d14\0\u0d4a\0\u0d80\0\u0db6"+
    "\0\u0dec\0\u0e22\0\u0e58\0\u0e8e\0\u05b2\0\u0ec4\0\154\0\154"+
    "\0\154\0\154\0\u0efa\0\u03cc\0\u03cc\0\u03cc\0\u0f30\0\u03cc"+
    "\0\u0f66\0\u0f9c\0\u03cc\0\u03cc\0\u0fd2\0\u03cc\0\u1008\0\u103e"+
    "\0\u1074\0\u10aa\0\u03cc\0\u10e0\0\u1116\0\u114c\0\u0a56\0\u03cc"+
    "\0\u1182\0\u11b8\0\u11ee\0\u1224\0\u125a\0\u1290\0\u12c6\0\u12fc"+
    "\0\u03cc\0\u1332\0\u0c3c\0\u1368\0\u139e\0\u13d4\0\u140a\0\u03cc"+
    "\0\u1440\0\u1476\0\u14ac\0\u14e2\0\u1518\0\u154e\0\u03cc\0\u1584"+
    "\0\u03cc\0\u15ba\0\u15f0\0\u1626\0\u165c\0\u1692\0\u03cc\0\u03cc"+
    "\0\u16c8\0\u03cc\0\u16fe\0\u03cc\0\u1734\0\u176a\0\u17a0\0\u17d6"+
    "\0\u03cc\0\u180c\0\u1842\0\u03cc\0\u1878\0\u18ae\0\u18e4\0\u191a"+
    "\0\u03cc\0\u1950\0\u1986\0\u19bc\0\u19f2\0\u1a28\0\u1a5e\0\u03cc"+
    "\0\u1a94\0\u03cc\0\u1aca\0\u1b00\0\u1b36\0\u03cc\0\u1b6c\0\u03cc"+
    "\0\u1ba2\0\u1bd8\0\u03cc\0\u1c0e\0\u03cc\0\u03cc\0\u1c44\0\u1c7a"+
    "\0\u1cb0\0\u1ce6\0\u03cc\0\u1d1c\0\u03cc\0\u1d52\0\u1d88\0\u1dbe"+
    "\0\u1df4\0\u1e2a\0\u1e60\0\u1e96\0\u1ecc\0\u03cc\0\u1f02\0\u1f38"+
    "\0\u1f6e\0\u1fa4\0\u1fda\0\u2010\0\u2046\0\u03cc\0\u03cc\0\u03cc"+
    "\0\u207c\0\u03cc\0\u20b2\0\u03cc\0\u20e8\0\u211e\0\u2154\0\u218a"+
    "\0\u21c0\0\u21f6\0\u222c\0\u2262\0\u03cc\0\u2298\0\u03cc\0\u03cc"+
    "\0\u22ce\0\u2304\0\u233a\0\u2370\0\u23a6\0\u23dc\0\u03cc\0\u03cc"+
    "\0\u03cc\0\u03cc\0\u03cc\0\u03cc\0\u2412\0\u2448\0\u247e\0\u24b4"+
    "\0\u03cc\0\u24ea\0\u2520\0\154\0\u03cc\0\u03cc\0\u2556\0\u258c"+
    "\0\u25c2\0\u03cc\0\u25f8\0\u03cc\0\u03cc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[261];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\4\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\2\34\1\43\1\34\1\3\1\34\1\44\1\45\1\44"+
    "\1\46\2\47\1\50\1\51\1\52\1\53\1\54\1\3"+
    "\1\47\55\55\1\0\5\55\1\56\1\57\1\3\124\0"+
    "\1\60\40\0\1\61\1\62\64\0\1\63\65\0\1\62"+
    "\70\0\1\64\1\65\1\64\1\0\1\66\1\64\1\0"+
    "\24\64\1\0\1\64\1\67\1\0\1\67\26\0\3\64"+
    "\1\0\2\64\1\0\1\70\23\64\1\0\1\64\1\67"+
    "\1\0\1\67\26\0\1\64\1\71\1\64\1\0\1\72"+
    "\1\64\1\0\1\73\23\64\1\0\1\64\1\67\1\0"+
    "\1\67\26\0\1\74\2\64\1\0\2\64\1\0\6\64"+
    "\1\75\11\64\1\76\3\64\1\0\1\64\1\67\1\0"+
    "\1\67\26\0\3\64\1\0\1\77\1\64\1\0\24\64"+
    "\1\0\1\64\1\67\1\0\1\67\26\0\3\64\1\0"+
    "\2\64\1\0\2\64\1\100\10\64\1\101\10\64\1\0"+
    "\1\64\1\67\1\0\1\67\26\0\3\64\1\0\2\64"+
    "\1\0\12\64\1\102\11\64\1\0\1\64\1\67\1\0"+
    "\1\67\26\0\3\64\1\0\2\64\1\0\11\64\1\103"+
    "\12\64\1\0\1\64\1\67\1\0\1\67\26\0\3\64"+
    "\1\0\1\104\1\64\1\0\4\64\1\105\6\64\1\106"+
    "\10\64\1\107\1\64\1\67\1\0\1\67\26\0\1\64"+
    "\1\110\1\64\1\0\2\64\1\0\2\64\1\111\21\64"+
    "\1\0\1\64\1\67\1\0\1\67\26\0\2\64\1\112"+
    "\1\0\2\64\1\0\1\64\1\113\1\114\4\64\1\115"+
    "\3\64\1\116\10\64\1\0\1\64\1\67\1\0\1\67"+
    "\26\0\3\64\1\0\2\64\1\0\24\64\1\0\1\64"+
    "\1\67\1\0\1\67\26\0\1\64\1\117\1\64\1\0"+
    "\2\64\1\0\13\64\1\120\10\64\1\121\1\64\1\67"+
    "\1\0\1\67\26\0\1\122\2\64\1\0\2\64\1\0"+
    "\3\64\1\123\20\64\1\0\1\64\1\67\1\0\1\67"+
    "\26\0\1\64\1\124\1\64\1\0\2\64\1\0\2\64"+
    "\1\125\21\64\1\0\1\64\1\67\1\0\1\67\26\0"+
    "\3\64\1\0\2\64\1\0\2\64\1\126\21\64\1\0"+
    "\1\64\1\67\1\0\1\67\26\0\1\64\1\127\1\64"+
    "\1\0\2\64\1\0\24\64\1\0\1\64\1\67\1\0"+
    "\1\67\26\0\1\64\1\130\1\64\1\0\1\131\1\64"+
    "\1\0\13\64\1\132\10\64\1\0\1\64\1\67\1\0"+
    "\1\67\26\0\3\64\1\0\2\64\1\0\2\64\1\133"+
    "\21\64\1\0\1\64\1\67\1\0\1\67\37\0\1\134"+
    "\23\0\1\44\1\135\1\44\63\0\1\136\1\0\1\136"+
    "\12\0\55\46\1\0\10\46\55\55\1\0\5\55\17\0"+
    "\1\137\1\0\1\140\4\0\1\141\37\0\1\142\16\0"+
    "\1\143\65\0\2\64\1\144\1\0\2\64\1\0\15\64"+
    "\1\145\6\64\1\0\1\64\1\67\1\0\1\67\26\0"+
    "\1\146\2\64\1\0\2\64\1\0\24\64\1\0\1\64"+
    "\1\67\1\0\1\67\63\0\1\67\1\0\1\67\26\0"+
    "\3\64\1\0\1\64\1\147\1\0\24\64\1\0\1\64"+
    "\1\67\1\0\1\67\26\0\1\150\2\64\1\0\2\64"+
    "\1\0\24\64\1\0\1\64\1\67\1\0\1\67\26\0"+
    "\3\64\1\0\2\64\1\0\1\64\1\151\11\64\1\152"+
    "\10\64\1\0\1\64\1\67\1\0\1\67\26\0\3\64"+
    "\1\0\1\64\1\153\1\0\24\64\1\0\1\64\1\67"+
    "\1\0\1\67\26\0\3\64\1\0\2\64\1\0\5\64"+
    "\1\154\16\64\1\0\1\64\1\67\1\0\1\67\26\0"+
    "\3\64\1\0\2\64\1\0\2\64\1\155\21\64\1\0"+
    "\1\64\1\67\1\0\1\67\26\0\3\64\1\0\2\64"+
    "\1\0\22\64\1\156\1\64\1\0\1\64\1\67\1\0"+
    "\1\67\26\0\3\64\1\0\2\64\1\0\12\64\1\157"+
    "\11\64\1\0\1\64\1\67\1\0\1\67\26\0\1\160"+
    "\2\64\1\0\2\64\1\0\10\64\1\161\13\64\1\0"+
    "\1\64\1\67\1\0\1\67\26\0\3\64\1\0\2\64"+
    "\1\0\12\64\1\162\11\64\1\0\1\64\1\67\1\0"+
    "\1\67\26\0\3\64\1\0\2\64\1\0\12\64\1\163"+
    "\11\64\1\0\1\64\1\67\1\0\1\67\26\0\3\64"+
    "\1\0\2\64\1\0\4\64\1\164\17\64\1\0\1\64"+
    "\1\67\1\0\1\67\26\0\1\64\1\165\1\64\1\0"+
    "\2\64\1\0\24\64\1\0\1\64\1\67\1\0\1\67"+
    "\26\0\1\166\2\64\1\0\2\64\1\0\24\64\1\0"+
    "\1\64\1\67\1\0\1\67\26\0\3\167\1\0\2\167"+
    "\1\0\27\167\1\0\1\167\26\0\3\64\1\0\2\64"+
    "\1\0\10\64\1\170\4\64\1\171\6\64\1\0\1\64"+
    "\1\67\1\0\1\67\26\0\1\172\2\64\1\0\2\64"+
    "\1\0\3\64\1\173\20\64\1\0\1\64\1\67\1\0"+
    "\1\67\26\0\3\64\1\0\1\64\1\174\1\0\24\64"+
    "\1\0\1\64\1\67\1\0\1\67\26\0\3\64\1\0"+
    "\2\64\1\0\6\64\1\175\10\64\1\176\4\64\1\0"+
    "\1\64\1\67\1\0\1\67\26\0\3\64\1\0\2\64"+
    "\1\0\14\64\1\177\7\64\1\0\1\64\1\67\1\0"+
    "\1\67\26\0\3\64\1\0\2\64\1\0\1\200\23\64"+
    "\1\0\1\64\1\67\1\0\1\67\26\0\1\201\2\64"+
    "\1\0\2\64\1\0\24\64\1\0\1\64\1\67\1\0"+
    "\1\67\26\0\3\64\1\0\2\64\1\0\15\64\1\202"+
    "\6\64\1\0\1\64\1\67\1\0\1\67\26\0\3\203"+
    "\1\0\2\203\1\0\27\203\1\0\1\203\26\0\3\64"+
    "\1\0\2\64\1\0\3\64\1\204\20\64\1\0\1\64"+
    "\1\67\1\0\1\67\26\0\3\64\1\0\2\64\1\0"+
    "\2\64\1\205\21\64\1\0\1\64\1\67\1\0\1\67"+
    "\26\0\1\206\2\64\1\0\2\64\1\0\1\64\1\207"+
    "\3\64\1\210\16\64\1\0\1\64\1\67\1\0\1\67"+
    "\26\0\3\64\1\0\2\64\1\0\4\64\1\211\6\64"+
    "\1\212\10\64\1\0\1\64\1\67\1\0\1\67\26\0"+
    "\3\64\1\0\2\64\1\0\2\64\1\213\21\64\1\0"+
    "\1\64\1\67\1\0\1\67\26\0\3\64\1\0\2\64"+
    "\1\0\1\64\1\214\22\64\1\0\1\64\1\67\1\0"+
    "\1\67\26\0\1\215\2\64\1\0\2\64\1\0\24\64"+
    "\1\0\1\64\1\67\1\0\1\67\26\0\2\64\1\216"+
    "\1\0\2\64\1\0\11\64\1\217\12\64\1\0\1\64"+
    "\1\67\1\0\1\67\26\0\1\220\2\64\1\0\1\64"+
    "\1\221\1\0\24\64\1\0\1\64\1\67\1\0\1\67"+
    "\26\0\3\64\1\0\1\222\1\64\1\0\24\64\1\0"+
    "\1\64\1\67\1\0\1\67\13\0\1\223\51\0\1\224"+
    "\37\0\1\134\23\0\1\136\1\0\1\136\40\0\1\225"+
    "\53\0\3\64\1\0\1\226\1\64\1\0\24\64\1\0"+
    "\1\64\1\67\1\0\1\67\26\0\3\64\1\0\2\64"+
    "\1\0\2\64\1\227\21\64\1\0\1\64\1\67\1\0"+
    "\1\67\26\0\3\64\1\0\2\64\1\0\17\64\1\230"+
    "\4\64\1\0\1\64\1\67\1\0\1\67\26\0\3\64"+
    "\1\0\2\64\1\0\1\231\23\64\1\0\1\64\1\67"+
    "\1\0\1\67\26\0\2\64\1\232\1\0\2\64\1\0"+
    "\4\64\1\233\17\64\1\0\1\64\1\67\1\0\1\67"+
    "\26\0\2\64\1\234\1\0\2\64\1\0\24\64\1\0"+
    "\1\64\1\67\1\0\1\67\26\0\3\64\1\0\2\64"+
    "\1\0\16\64\1\235\5\64\1\0\1\64\1\67\1\0"+
    "\1\67\26\0\3\64\1\0\2\64\1\0\2\64\1\236"+
    "\21\64\1\0\1\64\1\67\1\0\1\67\26\0\3\64"+
    "\1\0\2\64\1\0\5\64\1\237\16\64\1\0\1\64"+
    "\1\67\1\0\1\67\26\0\1\64\1\240\1\64\1\0"+
    "\2\64\1\0\24\64\1\0\1\64\1\67\1\0\1\67"+
    "\26\0\3\64\1\0\1\64\1\241\1\0\24\64\1\0"+
    "\1\64\1\67\1\0\1\67\26\0\3\64\1\0\2\64"+
    "\1\0\2\64\1\242\21\64\1\0\1\64\1\67\1\0"+
    "\1\67\26\0\3\64\1\0\2\64\1\0\10\64\1\243"+
    "\13\64\1\0\1\64\1\67\1\0\1\67\26\0\2\64"+
    "\1\244\1\0\2\64\1\0\24\64\1\0\1\64\1\67"+
    "\1\0\1\67\26\0\3\64\1\0\2\64\1\0\2\64"+
    "\1\245\21\64\1\0\1\64\1\67\1\0\1\67\26\0"+
    "\3\64\1\0\2\64\1\0\5\64\1\246\16\64\1\0"+
    "\1\64\1\67\1\0\1\67\26\0\3\64\1\0\2\64"+
    "\1\0\13\64\1\247\10\64\1\0\1\64\1\67\1\0"+
    "\1\67\26\0\1\64\1\250\1\64\1\0\2\64\1\0"+
    "\24\64\1\0\1\64\1\67\1\0\1\67\26\0\2\64"+
    "\1\251\1\0\2\64\1\0\24\64\1\0\1\64\1\67"+
    "\1\0\1\67\26\0\3\64\1\0\2\64\1\0\2\64"+
    "\1\252\21\64\1\0\1\64\1\67\1\0\1\67\26\0"+
    "\3\64\1\0\2\64\1\0\13\64\1\253\10\64\1\0"+
    "\1\64\1\67\1\0\1\67\26\0\3\64\1\0\2\64"+
    "\1\0\4\64\1\254\17\64\1\0\1\64\1\67\1\0"+
    "\1\67\26\0\3\64\1\0\2\64\1\0\14\64\1\255"+
    "\7\64\1\0\1\64\1\67\1\0\1\67\26\0\1\256"+
    "\2\64\1\0\2\64\1\0\24\64\1\0\1\64\1\67"+
    "\1\0\1\67\26\0\3\64\1\0\2\64\1\0\4\64"+
    "\1\257\17\64\1\0\1\64\1\67\1\0\1\67\26\0"+
    "\3\64\1\0\2\64\1\0\4\64\1\260\17\64\1\0"+
    "\1\64\1\67\1\0\1\67\26\0\3\64\1\0\2\64"+
    "\1\0\21\64\1\261\2\64\1\0\1\64\1\67\1\0"+
    "\1\67\26\0\3\64\1\0\2\64\1\0\1\262\23\64"+
    "\1\0\1\64\1\67\1\0\1\67\26\0\2\64\1\263"+
    "\1\0\2\64\1\0\24\64\1\0\1\64\1\67\1\0"+
    "\1\67\26\0\3\64\1\0\2\64\1\0\14\64\1\264"+
    "\7\64\1\0\1\64\1\67\1\0\1\67\26\0\3\64"+
    "\1\0\2\64\1\0\1\64\1\265\22\64\1\0\1\64"+
    "\1\67\1\0\1\67\26\0\3\64\1\0\2\64\1\0"+
    "\1\266\23\64\1\0\1\64\1\67\1\0\1\67\65\0"+
    "\1\224\63\0\1\224\1\0\1\224\50\0\1\267\43\0"+
    "\3\64\1\0\2\64\1\0\22\64\1\270\1\64\1\0"+
    "\1\64\1\67\1\0\1\67\26\0\3\64\1\0\1\271"+
    "\1\64\1\0\24\64\1\0\1\64\1\67\1\0\1\67"+
    "\26\0\3\64\1\0\1\272\1\64\1\0\24\64\1\0"+
    "\1\64\1\67\1\0\1\67\26\0\2\64\1\273\1\0"+
    "\2\64\1\0\24\64\1\0\1\64\1\67\1\0\1\67"+
    "\26\0\3\64\1\0\2\64\1\0\1\274\23\64\1\0"+
    "\1\64\1\67\1\0\1\67\26\0\3\64\1\0\2\64"+
    "\1\0\2\64\1\275\21\64\1\0\1\64\1\67\1\0"+
    "\1\67\26\0\3\64\1\0\2\64\1\0\1\276\23\64"+
    "\1\0\1\64\1\67\1\0\1\67\26\0\3\64\1\0"+
    "\2\64\1\0\1\277\23\64\1\0\1\64\1\67\1\0"+
    "\1\67\26\0\2\64\1\300\1\0\2\64\1\0\24\64"+
    "\1\0\1\64\1\67\1\0\1\67\26\0\3\64\1\0"+
    "\2\64\1\0\20\64\1\301\3\64\1\0\1\64\1\67"+
    "\1\0\1\67\26\0\2\64\1\302\1\0\2\64\1\0"+
    "\24\64\1\0\1\64\1\67\1\0\1\67\26\0\3\64"+
    "\1\0\2\64\1\0\3\64\1\303\20\64\1\0\1\64"+
    "\1\67\1\0\1\67\26\0\1\304\2\64\1\0\2\64"+
    "\1\0\24\64\1\0\1\64\1\67\1\0\1\67\26\0"+
    "\3\64\1\0\2\64\1\0\1\305\23\64\1\0\1\64"+
    "\1\67\1\0\1\67\26\0\1\306\2\64\1\0\2\64"+
    "\1\0\24\64\1\0\1\64\1\67\1\0\1\67\26\0"+
    "\3\64\1\0\2\64\1\0\5\64\1\307\16\64\1\0"+
    "\1\64\1\67\1\0\1\67\26\0\3\64\1\0\1\310"+
    "\1\64\1\0\24\64\1\0\1\64\1\67\1\0\1\67"+
    "\26\0\2\64\1\311\1\0\2\64\1\0\24\64\1\0"+
    "\1\64\1\67\1\0\1\67\26\0\1\64\1\312\1\64"+
    "\1\0\2\64\1\0\5\64\1\313\16\64\1\0\1\64"+
    "\1\67\1\0\1\67\26\0\1\314\2\64\1\0\1\64"+
    "\1\315\1\0\24\64\1\0\1\64\1\67\1\0\1\67"+
    "\26\0\3\64\1\0\2\64\1\0\16\64\1\316\5\64"+
    "\1\0\1\64\1\67\1\0\1\67\26\0\3\64\1\0"+
    "\2\64\1\0\16\64\1\317\5\64\1\0\1\64\1\67"+
    "\1\0\1\67\26\0\2\64\1\320\1\0\2\64\1\0"+
    "\24\64\1\0\1\64\1\67\1\0\1\67\26\0\1\321"+
    "\65\0\3\64\1\0\2\64\1\0\10\64\1\322\13\64"+
    "\1\0\1\64\1\67\1\0\1\67\26\0\3\64\1\0"+
    "\2\64\1\0\14\64\1\323\7\64\1\0\1\64\1\67"+
    "\1\0\1\67\26\0\3\64\1\0\2\64\1\0\14\64"+
    "\1\324\7\64\1\0\1\64\1\67\1\0\1\67\26\0"+
    "\3\64\1\0\2\64\1\0\14\64\1\325\7\64\1\0"+
    "\1\64\1\67\1\0\1\67\26\0\3\64\1\0\2\64"+
    "\1\0\16\64\1\326\5\64\1\0\1\64\1\67\1\0"+
    "\1\67\26\0\3\64\1\0\2\64\1\0\12\64\1\327"+
    "\11\64\1\0\1\64\1\67\1\0\1\67\26\0\3\64"+
    "\1\0\2\64\1\0\1\330\12\64\1\331\10\64\1\0"+
    "\1\64\1\67\1\0\1\67\26\0\3\64\1\0\1\64"+
    "\1\332\1\0\24\64\1\0\1\64\1\67\1\0\1\67"+
    "\26\0\3\64\1\0\2\64\1\0\13\64\1\333\10\64"+
    "\1\0\1\64\1\67\1\0\1\67\26\0\3\64\1\0"+
    "\2\64\1\0\2\64\1\334\21\64\1\0\1\64\1\67"+
    "\1\0\1\67\26\0\2\64\1\335\1\0\2\64\1\0"+
    "\24\64\1\0\1\64\1\67\1\0\1\67\26\0\3\64"+
    "\1\0\2\64\1\0\6\64\1\336\4\64\1\337\10\64"+
    "\1\0\1\64\1\67\1\0\1\67\26\0\3\64\1\0"+
    "\2\64\1\0\6\64\1\340\15\64\1\0\1\64\1\67"+
    "\1\0\1\67\26\0\2\64\1\341\1\0\2\64\1\0"+
    "\24\64\1\0\1\64\1\67\1\0\1\67\26\0\3\64"+
    "\1\0\2\64\1\0\1\64\1\342\22\64\1\0\1\64"+
    "\1\67\1\0\1\67\26\0\3\64\1\0\1\343\1\64"+
    "\1\0\24\64\1\0\1\64\1\67\1\0\1\67\26\0"+
    "\3\64\1\0\2\64\1\0\2\64\1\344\21\64\1\0"+
    "\1\64\1\67\1\0\1\67\26\0\3\64\1\0\2\64"+
    "\1\0\2\64\1\345\21\64\1\0\1\64\1\67\1\0"+
    "\1\67\50\0\1\346\43\0\3\64\1\0\2\64\1\0"+
    "\2\64\1\347\21\64\1\0\1\64\1\67\1\0\1\67"+
    "\26\0\3\64\1\0\2\64\1\0\2\64\1\350\21\64"+
    "\1\0\1\64\1\67\1\0\1\67\26\0\3\64\1\0"+
    "\1\351\1\64\1\0\24\64\1\0\1\64\1\67\1\0"+
    "\1\67\26\0\3\64\1\0\1\352\1\64\1\0\24\64"+
    "\1\0\1\64\1\67\1\0\1\67\26\0\2\64\1\353"+
    "\1\0\2\64\1\0\24\64\1\0\1\64\1\67\1\0"+
    "\1\67\26\0\2\64\1\354\1\0\2\64\1\0\24\64"+
    "\1\0\1\64\1\67\1\0\1\67\26\0\3\64\1\0"+
    "\2\64\1\0\2\64\1\355\21\64\1\0\1\64\1\67"+
    "\1\0\1\67\26\0\3\64\1\0\2\64\1\0\4\64"+
    "\1\356\17\64\1\0\1\64\1\67\1\0\1\67\26\0"+
    "\3\64\1\0\2\64\1\0\3\64\1\357\20\64\1\0"+
    "\1\64\1\67\1\0\1\67\26\0\3\64\1\0\2\64"+
    "\1\0\23\64\1\360\1\0\1\64\1\67\1\0\1\67"+
    "\26\0\3\64\1\0\2\64\1\0\1\361\23\64\1\0"+
    "\1\64\1\67\1\0\1\67\26\0\3\64\1\0\2\64"+
    "\1\0\17\64\1\362\4\64\1\0\1\64\1\67\1\0"+
    "\1\67\26\0\3\64\1\0\2\64\1\0\22\64\1\363"+
    "\1\64\1\0\1\64\1\67\1\0\1\67\26\0\3\64"+
    "\1\0\2\64\1\0\5\64\1\364\16\64\1\0\1\64"+
    "\1\67\1\0\1\67\30\0\1\365\63\0\3\64\1\0"+
    "\2\64\1\0\5\64\1\366\16\64\1\0\1\64\1\67"+
    "\1\0\1\67\26\0\3\64\1\0\2\64\1\0\5\64"+
    "\1\367\16\64\1\0\1\64\1\67\1\0\1\67\26\0"+
    "\3\64\1\0\2\64\1\0\1\64\1\370\22\64\1\0"+
    "\1\64\1\67\1\0\1\67\26\0\3\64\1\0\2\64"+
    "\1\0\22\64\1\371\1\64\1\0\1\64\1\67\1\0"+
    "\1\67\26\0\1\372\2\64\1\0\2\64\1\0\24\64"+
    "\1\0\1\64\1\67\1\0\1\67\26\0\3\64\1\0"+
    "\1\373\1\64\1\0\24\64\1\0\1\64\1\67\1\0"+
    "\1\67\57\0\1\374\34\0\3\64\1\0\2\64\1\0"+
    "\2\64\1\375\21\64\1\0\1\64\1\67\1\0\1\67"+
    "\26\0\3\64\1\0\2\64\1\0\2\64\1\376\21\64"+
    "\1\0\1\64\1\67\1\0\1\67\26\0\2\64\1\377"+
    "\1\0\2\64\1\0\24\64\1\0\1\64\1\67\1\0"+
    "\1\67\26\0\3\64\1\0\1\u0100\1\64\1\0\24\64"+
    "\1\0\1\64\1\67\1\0\1\67\26\0\1\u0101\2\64"+
    "\1\0\2\64\1\0\24\64\1\0\1\64\1\67\1\0"+
    "\1\67\26\0\3\64\1\0\2\64\1\0\2\64\1\u0102"+
    "\21\64\1\0\1\64\1\67\1\0\1\67\26\0\2\64"+
    "\1\u0103\1\0\2\64\1\0\24\64\1\0\1\64\1\67"+
    "\1\0\1\67\26\0\3\64\1\0\2\64\1\0\21\64"+
    "\1\u0104\2\64\1\0\1\64\1\67\1\0\1\67\26\0"+
    "\3\64\1\0\2\64\1\0\2\64\1\u0105\21\64\1\0"+
    "\1\64\1\67\1\0\1\67\12\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9774];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\6\11\1\1\1\11\5\1\1\11"+
    "\2\1\1\11\21\1\6\11\1\1\1\11\1\1\1\0"+
    "\3\11\3\0\2\1\27\0\1\1\2\0\1\1\12\0"+
    "\1\1\4\11\1\0\3\1\1\0\1\1\2\0\2\1"+
    "\1\0\1\1\4\0\1\1\3\0\2\1\1\0\1\1"+
    "\3\0\1\1\2\0\3\1\4\0\1\1\6\0\3\1"+
    "\2\0\1\1\2\0\2\1\1\0\1\1\1\0\1\1"+
    "\4\0\1\1\2\0\1\1\4\0\1\1\6\0\1\1"+
    "\1\0\1\1\3\0\1\1\1\0\1\1\2\0\5\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\10\0\1\1"+
    "\7\0\3\1\1\0\1\1\1\0\1\1\10\0\1\1"+
    "\1\0\2\1\6\0\6\1\4\0\1\1\2\0\1\11"+
    "\2\1\3\0\1\1\1\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[261];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  // Author: FracPete (fracpete at waikato dot ac dot nz)
  // Version: $Revision: 8891 $
  protected SymbolFactory sf;

  public Scanner(InputStream r, SymbolFactory sf){
    this(r);
    this.sf = sf;
  }
  StringBuilder string = new StringBuilder();


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 184) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 60: 
          { return sf.newSymbol("Sqrt", sym.SQRT);
          }
        case 90: break;
        case 17: 
          { /* ignore line comments. */
          }
        case 91: break;
        case 38: 
          { return sf.newSymbol("Number", sym.NUMBER, Double.NaN);
          }
        case 92: break;
        case 83: 
          { return sf.newSymbol("WeekDay", sym.WEEKDAY);
          }
        case 93: break;
        case 72: 
          { return sf.newSymbol("Month", sym.MONTH);
          }
        case 94: break;
        case 76: 
          { return sf.newSymbol("Minute", sym.MINUTE);
          }
        case 95: break;
        case 27: 
          { return sf.newSymbol("Less or equal than", sym.LE);
          }
        case 96: break;
        case 8: 
          { return sf.newSymbol("Modulo", sym.COLON);
          }
        case 97: break;
        case 29: 
          { return sf.newSymbol("Greater or equal than", sym.GE);
          }
        case 98: break;
        case 11: 
          { return sf.newSymbol("Greater than", sym.GT);
          }
        case 99: break;
        case 37: 
          { return sf.newSymbol("Now", sym.NOW);
          }
        case 100: break;
        case 42: 
          { return sf.newSymbol("Exp", sym.EXP);
          }
        case 101: break;
        case 7: 
          { return sf.newSymbol("Modulo", sym.MODULO);
          }
        case 102: break;
        case 56: 
          { return sf.newSymbol("repeat", sym.REPEAT);
          }
        case 103: break;
        case 61: 
          { return sf.newSymbol("Ceil", sym.CEIL);
          }
        case 104: break;
        case 75: 
          { return sf.newSymbol("Second", sym.SECOND);
          }
        case 105: break;
        case 67: 
          { return sf.newSymbol("False", sym.FALSE);
          }
        case 106: break;
        case 47: 
          { return sf.newSymbol("Sin", sym.SIN);
          }
        case 107: break;
        case 33: 
          { string.append('\n');
          }
        case 108: break;
        case 51: 
          { return sf.newSymbol("Max", sym.MAX);
          }
        case 109: break;
        case 36: 
          { string.append('\"');
          }
        case 110: break;
        case 18: 
          { /* ignore white space. */
          }
        case 111: break;
        case 6: 
          { return sf.newSymbol("Power", sym.EXPONENT);
          }
        case 112: break;
        case 52: 
          { return sf.newSymbol("Min", sym.MIN);
          }
        case 113: break;
        case 70: 
          { return sf.newSymbol("Stdev", sym.STDEV);
          }
        case 114: break;
        case 55: 
          { return sf.newSymbol("Trim", sym.TRIM);
          }
        case 115: break;
        case 30: 
          { return sf.newSymbol("Cell", sym.CELL, new String(yytext()));
          }
        case 116: break;
        case 81: 
          { return sf.newSymbol("Cell string", sym.CELL_STRING);
          }
        case 117: break;
        case 40: 
          { return sf.newSymbol("Abs", sym.ABS);
          }
        case 118: break;
        case 64: 
          { return sf.newSymbol("Today", sym.TODAY);
          }
        case 119: break;
        case 25: 
          { yybegin(YYINITIAL);
                  return sf.newSymbol("String", sym.STRING, string.toString());
          }
        case 120: break;
        case 35: 
          { string.append('\r');
          }
        case 121: break;
        case 44: 
          { return sf.newSymbol("Log", sym.LOG);
          }
        case 122: break;
        case 23: 
          { string.setLength(0); yybegin(STRING);
          }
        case 123: break;
        case 84: 
          { return sf.newSymbol("Matches", sym.MATCHES);
          }
        case 124: break;
        case 53: 
          { return sf.newSymbol("Mid", sym.MID);
          }
        case 125: break;
        case 68: 
          { return sf.newSymbol("Floor", sym.FLOOR);
          }
        case 126: break;
        case 2: 
          { return sf.newSymbol("Minus", sym.MINUS);
          }
        case 127: break;
        case 34: 
          { string.append('\t');
          }
        case 128: break;
        case 19: 
          { return sf.newSymbol("Comma", sym.COMMA);
          }
        case 129: break;
        case 5: 
          { return sf.newSymbol("Division", sym.DIVISION);
          }
        case 130: break;
        case 54: 
          { return sf.newSymbol("True", sym.TRUE);
          }
        case 131: break;
        case 82: 
          { return sf.newSymbol("WeekNum", sym.WEEKNUM);
          }
        case 132: break;
        case 63: 
          { return sf.newSymbol("Year", sym.YEAR);
          }
        case 133: break;
        case 86: 
          { return sf.newSymbol("Number", sym.NUMBER, Double.NEGATIVE_INFINITY);
          }
        case 134: break;
        case 85: 
          { return sf.newSymbol("Number", sym.NUMBER, Double.POSITIVE_INFINITY);
          }
        case 135: break;
        case 28: 
          { return sf.newSymbol("Not qquals", sym.NOT_EQ);
          }
        case 136: break;
        case 71: 
          { return sf.newSymbol("SumIf", sym.SUMIF);
          }
        case 137: break;
        case 31: 
          { return sf.newSymbol("pi", sym.PI);
          }
        case 138: break;
        case 24: 
          { string.append(yytext());
          }
        case 139: break;
        case 89: 
          { return sf.newSymbol("Concantenate", sym.CONCATENATE);
          }
        case 140: break;
        case 88: 
          { return sf.newSymbol("CountBlank", sym.COUNTBLANK);
          }
        case 141: break;
        case 79: 
          { return sf.newSymbol("CountIf", sym.COUNTIF);
          }
        case 142: break;
        case 49: 
          { return sf.newSymbol("Procedure", sym.PROCEDURE, new String(yytext().substring(2)));
          }
        case 143: break;
        case 77: 
          { return sf.newSymbol("Average", sym.AVERAGE);
          }
        case 144: break;
        case 1: 
          { System.err.println("Illegal character: "+yytext());
          }
        case 145: break;
        case 45: 
          { return sf.newSymbol("Length", sym.LENGTH);
          }
        case 146: break;
        case 73: 
          { return sf.newSymbol("StdevP", sym.STDEVP);
          }
        case 147: break;
        case 3: 
          { return sf.newSymbol("Plus", sym.PLUS);
          }
        case 148: break;
        case 9: 
          { return sf.newSymbol("Less than", sym.LT);
          }
        case 149: break;
        case 87: 
          { return sf.newSymbol("Substitute", sym.SUBSTITUTE);
          }
        case 150: break;
        case 80: 
          { return sf.newSymbol("Cell object", sym.CELL_OBJECT);
          }
        case 151: break;
        case 20: 
          { return sf.newSymbol("Semicolon", sym.SEMICOLON);
          }
        case 152: break;
        case 16: 
          { return sf.newSymbol("Number", sym.NUMBER, new Double(yytext()));
          }
        case 153: break;
        case 21: 
          { return sf.newSymbol("Left Bracket", sym.LPAREN);
          }
        case 154: break;
        case 32: 
          { return sf.newSymbol("IfElse", sym.IFELSE);
          }
        case 155: break;
        case 74: 
          { return sf.newSymbol("Substr", sym.SUBSTR);
          }
        case 156: break;
        case 57: 
          { return sf.newSymbol("Rint", sym.RINT);
          }
        case 157: break;
        case 39: 
          { return sf.newSymbol("Tan", sym.TAN);
          }
        case 158: break;
        case 48: 
          { return sf.newSymbol("Pow", sym.POW);
          }
        case 159: break;
        case 14: 
          { return sf.newSymbol("Or", sym.OR);
          }
        case 160: break;
        case 26: 
          { string.append('\\');
          }
        case 161: break;
        case 41: 
          { return sf.newSymbol("Day", sym.DAY);
          }
        case 162: break;
        case 62: 
          { return sf.newSymbol("Hour", sym.HOUR);
          }
        case 163: break;
        case 78: 
          { return sf.newSymbol("Replace", sym.REPLACE);
          }
        case 164: break;
        case 13: 
          { return sf.newSymbol("And", sym.AND);
          }
        case 165: break;
        case 15: 
          { return sf.newSymbol("e", sym.E);
          }
        case 166: break;
        case 59: 
          { return sf.newSymbol("Left", sym.LEFT);
          }
        case 167: break;
        case 65: 
          { return sf.newSymbol("Right", sym.RIGHT);
          }
        case 168: break;
        case 66: 
          { return sf.newSymbol("UpperCase", sym.UPPERCASE);
          }
        case 169: break;
        case 12: 
          { return sf.newSymbol("Not", sym.NOT);
          }
        case 170: break;
        case 43: 
          { return sf.newSymbol("Function", sym.FUNCTION, new String(yytext().substring(2)));
          }
        case 171: break;
        case 22: 
          { return sf.newSymbol("Right Bracket", sym.RPAREN);
          }
        case 172: break;
        case 46: 
          { return sf.newSymbol("Sum", sym.SUM);
          }
        case 173: break;
        case 4: 
          { return sf.newSymbol("Times", sym.TIMES);
          }
        case 174: break;
        case 58: 
          { return sf.newSymbol("Find", sym.FIND);
          }
        case 175: break;
        case 69: 
          { return sf.newSymbol("LowerCase", sym.LOWERCASE);
          }
        case 176: break;
        case 50: 
          { return sf.newSymbol("Cos", sym.COS);
          }
        case 177: break;
        case 10: 
          { return sf.newSymbol("Equals", sym.EQ);
          }
        case 178: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {     return sf.newSymbol("EOF",sym.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
