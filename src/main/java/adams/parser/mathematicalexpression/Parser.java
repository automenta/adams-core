
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Apr 03 08:52:04 NZDT 2014
//----------------------------------------------------

package adams.parser.mathematicalexpression;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import adams.core.*;
import adams.parser.ParserHelper;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Apr 03 08:52:04 NZDT 2014
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\142\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\005\005\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\005\000\002\005" +
    "\005\000\002\005\004\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\004\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\006\000\002\005\006\000\002\005\006\000" +
    "\002\005\006\000\002\005\006\000\002\005\006\000\002" +
    "\005\006\000\002\005\006\000\002\005\006\000\002\005" +
    "\010\000\002\005\006\000\002\005\012\000\002\005\010" +
    "\000\002\005\006\000\002\005\006\000\002\005\005\000" +
    "\002\005\006\000\002\005\010\000\002\005\012\000\002" +
    "\005\014\000\002\005\016\000\002\005\020\000\002\005" +
    "\022\000\002\005\024\000\002\005\026\000\002\005\030" +
    "\000\002\005\005\000\002\005\006\000\002\005\010\000" +
    "\002\005\012\000\002\005\014\000\002\005\016\000\002" +
    "\005\020\000\002\005\022\000\002\005\024\000\002\005" +
    "\026\000\002\005\030\000\002\005\006\000\002\005\006" +
    "\000\002\005\006\000\002\005\006\000\002\005\006\000" +
    "\002\005\006\000\002\005\006\000\002\005\006\000\002" +
    "\005\010\000\002\005\012\000\002\005\010\000\002\005" +
    "\012\000\002\005\010\000\002\005\010\000\002\005\010" +
    "\000\002\005\012\000\002\005\014\000\002\005\016\000" +
    "\002\005\006\000\002\005\006\000\002\005\006\000\002" +
    "\005\010\000\002\005\010\000\002\005\012\000\002\005" +
    "\014\000\002\005\012\000\002\005\014\000\002\004\003" +
    "\000\002\004\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0140\000\152\006\022\010\027\017\011\020\007\021" +
    "\047\022\036\023\053\024\046\025\025\026\062\027\030" +
    "\030\006\031\063\032\024\033\020\034\005\035\071\036" +
    "\034\037\054\040\015\041\004\042\042\043\040\044\065" +
    "\045\044\046\072\047\050\050\012\051\013\052\023\053" +
    "\043\054\064\063\033\066\014\067\032\070\031\071\035" +
    "\072\037\073\021\074\067\075\055\076\056\077\017\100" +
    "\016\101\051\102\045\103\041\104\052\105\060\106\026" +
    "\107\010\110\066\001\002\000\004\006\u0140\001\002\000" +
    "\004\006\u013d\001\002\000\004\006\u0138\001\002\000\004" +
    "\006\u0135\001\002\000\004\006\u0116\001\002\000\004\006" +
    "\u0113\001\002\000\004\006\u010b\001\002\000\004\006\375" +
    "\001\002\000\214\002\ufff5\004\ufff5\005\ufff5\006\ufff5\007" +
    "\ufff5\010\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5" +
    "\017\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5\025" +
    "\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5\032\ufff5\033\ufff5" +
    "\034\ufff5\035\ufff5\036\ufff5\037\ufff5\040\ufff5\041\ufff5\042" +
    "\ufff5\043\ufff5\044\ufff5\045\ufff5\046\ufff5\047\ufff5\050\ufff5" +
    "\051\ufff5\052\ufff5\053\ufff5\054\ufff5\055\ufff5\056\ufff5\057" +
    "\ufff5\060\ufff5\061\ufff5\062\ufff5\063\ufff5\064\ufff5\065\ufff5" +
    "\066\ufff5\067\ufff5\070\ufff5\071\ufff5\072\ufff5\073\ufff5\074" +
    "\ufff5\075\ufff5\076\ufff5\077\ufff5\100\ufff5\101\ufff5\102\ufff5" +
    "\103\ufff5\104\ufff5\105\ufff5\106\ufff5\107\ufff5\110\ufff5\001" +
    "\002\000\004\006\372\001\002\000\004\006\367\001\002" +
    "\000\004\006\364\001\002\000\004\006\357\001\002\000" +
    "\004\006\354\001\002\000\152\006\022\010\027\017\011" +
    "\020\007\021\047\022\036\023\053\024\046\025\025\026" +
    "\062\027\030\030\006\031\063\032\024\033\020\034\005" +
    "\035\071\036\034\037\054\040\015\041\004\042\042\043" +
    "\040\044\065\045\044\046\072\047\050\050\012\051\013" +
    "\052\023\053\043\054\064\063\033\066\014\067\032\070" +
    "\031\071\035\072\037\073\021\074\067\075\055\076\056" +
    "\077\017\100\016\101\051\102\045\103\041\104\052\105" +
    "\060\106\026\107\010\110\066\001\002\000\004\006\345" +
    "\001\002\000\004\006\336\001\002\000\004\006\333\001" +
    "\002\000\214\002\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9" +
    "\010\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9\016\ufff9\017" +
    "\ufff9\020\ufff9\021\ufff9\022\ufff9\023\ufff9\024\ufff9\025\ufff9" +
    "\026\ufff9\027\ufff9\030\ufff9\031\ufff9\032\ufff9\033\ufff9\034" +
    "\ufff9\035\ufff9\036\ufff9\037\ufff9\040\ufff9\041\ufff9\042\ufff9" +
    "\043\ufff9\044\ufff9\045\ufff9\046\ufff9\047\ufff9\050\ufff9\051" +
    "\ufff9\052\ufff9\053\ufff9\054\ufff9\055\ufff9\056\ufff9\057\ufff9" +
    "\060\ufff9\061\ufff9\062\ufff9\063\ufff9\064\ufff9\065\ufff9\066" +
    "\ufff9\067\ufff9\070\ufff9\071\ufff9\072\ufff9\073\ufff9\074\ufff9" +
    "\075\ufff9\076\ufff9\077\ufff9\100\ufff9\101\ufff9\102\ufff9\103" +
    "\ufff9\104\ufff9\105\ufff9\106\ufff9\107\ufff9\110\ufff9\001\002" +
    "\000\152\006\022\010\027\017\011\020\007\021\047\022" +
    "\036\023\053\024\046\025\025\026\062\027\030\030\006" +
    "\031\063\032\024\033\020\034\005\035\071\036\034\037" +
    "\054\040\015\041\004\042\042\043\040\044\065\045\044" +
    "\046\072\047\050\050\012\051\013\052\023\053\043\054" +
    "\064\063\033\066\014\067\032\070\031\071\035\072\037" +
    "\073\021\074\067\075\055\076\056\077\017\100\016\101" +
    "\051\102\045\103\041\104\052\105\060\106\026\107\010" +
    "\110\066\001\002\000\004\006\327\001\002\000\004\006" +
    "\325\001\002\000\214\002\ufff4\004\ufff4\005\ufff4\006\ufff4" +
    "\007\ufff4\010\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\016" +
    "\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4" +
    "\025\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4\033" +
    "\ufff4\034\ufff4\035\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4" +
    "\042\ufff4\043\ufff4\044\ufff4\045\ufff4\046\ufff4\047\ufff4\050" +
    "\ufff4\051\ufff4\052\ufff4\053\ufff4\054\ufff4\055\ufff4\056\ufff4" +
    "\057\ufff4\060\ufff4\061\ufff4\062\ufff4\063\ufff4\064\ufff4\065" +
    "\ufff4\066\ufff4\067\ufff4\070\ufff4\071\ufff4\072\ufff4\073\ufff4" +
    "\074\ufff4\075\ufff4\076\ufff4\077\ufff4\100\ufff4\101\ufff4\102" +
    "\ufff4\103\ufff4\104\ufff4\105\ufff4\106\ufff4\107\ufff4\110\ufff4" +
    "\001\002\000\152\006\022\010\027\017\011\020\007\021" +
    "\047\022\036\023\053\024\046\025\025\026\062\027\030" +
    "\030\006\031\063\032\024\033\020\034\005\035\071\036" +
    "\034\037\054\040\015\041\004\042\042\043\040\044\065" +
    "\045\044\046\072\047\050\050\012\051\013\052\023\053" +
    "\043\054\064\063\033\066\014\067\032\070\031\071\035" +
    "\072\037\073\021\074\067\075\055\076\056\077\017\100" +
    "\016\101\051\102\045\103\041\104\052\105\060\106\026" +
    "\107\010\110\066\001\002\000\004\006\321\001\002\000" +
    "\004\006\317\001\002\000\004\006\314\001\002\000\004" +
    "\006\311\001\002\000\004\006\304\001\002\000\214\002" +
    "\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\012\ufffa" +
    "\013\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa\021" +
    "\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa\026\ufffa\027\ufffa" +
    "\030\ufffa\031\ufffa\032\ufffa\033\ufffa\034\ufffa\035\ufffa\036" +
    "\ufffa\037\ufffa\040\ufffa\041\ufffa\042\ufffa\043\ufffa\044\ufffa" +
    "\045\ufffa\046\ufffa\047\ufffa\050\ufffa\051\ufffa\052\ufffa\053" +
    "\ufffa\054\ufffa\055\ufffa\056\ufffa\057\ufffa\060\ufffa\061\ufffa" +
    "\062\ufffa\063\ufffa\064\ufffa\065\ufffa\066\ufffa\067\ufffa\070" +
    "\ufffa\071\ufffa\072\ufffa\073\ufffa\074\ufffa\075\ufffa\076\ufffa" +
    "\077\ufffa\100\ufffa\101\ufffa\102\ufffa\103\ufffa\104\ufffa\105" +
    "\ufffa\106\ufffa\107\ufffa\110\ufffa\001\002\000\004\006\277" +
    "\001\002\000\214\002\ufff7\004\ufff7\005\ufff7\006\ufff7\007" +
    "\ufff7\010\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7\016\ufff7" +
    "\017\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7\025" +
    "\ufff7\026\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7" +
    "\034\ufff7\035\ufff7\036\ufff7\037\ufff7\040\ufff7\041\ufff7\042" +
    "\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7\047\ufff7\050\ufff7" +
    "\051\ufff7\052\ufff7\053\ufff7\054\ufff7\055\ufff7\056\ufff7\057" +
    "\ufff7\060\ufff7\061\ufff7\062\ufff7\063\ufff7\064\ufff7\065\ufff7" +
    "\066\ufff7\067\ufff7\070\ufff7\071\ufff7\072\ufff7\073\ufff7\074" +
    "\ufff7\075\ufff7\076\ufff7\077\ufff7\100\ufff7\101\ufff7\102\ufff7" +
    "\103\ufff7\104\ufff7\105\ufff7\106\ufff7\107\ufff7\110\ufff7\001" +
    "\002\000\004\006\270\001\002\000\214\002\ufffc\004\ufffc" +
    "\005\ufffc\006\ufffc\007\ufffc\010\ufffc\012\ufffc\013\ufffc\014" +
    "\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc" +
    "\023\ufffc\024\ufffc\025\ufffc\026\ufffc\027\ufffc\030\ufffc\031" +
    "\ufffc\032\ufffc\033\ufffc\034\ufffc\035\ufffc\036\ufffc\037\ufffc" +
    "\040\ufffc\041\ufffc\042\ufffc\043\ufffc\044\ufffc\045\ufffc\046" +
    "\ufffc\047\ufffc\050\ufffc\051\ufffc\052\ufffc\053\ufffc\054\ufffc" +
    "\055\ufffc\056\ufffc\057\ufffc\060\ufffc\061\ufffc\062\ufffc\063" +
    "\ufffc\064\ufffc\065\ufffc\066\ufffc\067\ufffc\070\ufffc\071\ufffc" +
    "\072\ufffc\073\ufffc\074\ufffc\075\ufffc\076\ufffc\077\ufffc\100" +
    "\ufffc\101\ufffc\102\ufffc\103\ufffc\104\ufffc\105\ufffc\106\ufffc" +
    "\107\ufffc\110\ufffc\001\002\000\004\006\265\001\002\000" +
    "\004\006\262\001\002\000\004\006\250\001\002\000\004" +
    "\006\245\001\002\000\214\002\ufff8\004\ufff8\005\ufff8\006" +
    "\ufff8\007\ufff8\010\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8" +
    "\016\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8\024" +
    "\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8" +
    "\033\ufff8\034\ufff8\035\ufff8\036\ufff8\037\ufff8\040\ufff8\041" +
    "\ufff8\042\ufff8\043\ufff8\044\ufff8\045\ufff8\046\ufff8\047\ufff8" +
    "\050\ufff8\051\ufff8\052\ufff8\053\ufff8\054\ufff8\055\ufff8\056" +
    "\ufff8\057\ufff8\060\ufff8\061\ufff8\062\ufff8\063\ufff8\064\ufff8" +
    "\065\ufff8\066\ufff8\067\ufff8\070\ufff8\071\ufff8\072\ufff8\073" +
    "\ufff8\074\ufff8\075\ufff8\076\ufff8\077\ufff8\100\ufff8\101\ufff8" +
    "\102\ufff8\103\ufff8\104\ufff8\105\ufff8\106\ufff8\107\ufff8\110" +
    "\ufff8\001\002\000\004\006\242\001\002\000\004\006\232" +
    "\001\002\000\004\006\227\001\002\000\004\006\224\001" +
    "\002\000\206\002\ufffe\006\ufffe\010\076\012\102\013\112" +
    "\014\110\015\113\016\106\017\ufffe\020\ufffe\021\ufffe\022" +
    "\ufffe\023\ufffe\024\ufffe\025\ufffe\026\ufffe\027\ufffe\030\ufffe" +
    "\031\ufffe\032\ufffe\033\ufffe\034\ufffe\035\ufffe\036\ufffe\037" +
    "\ufffe\040\ufffe\041\ufffe\042\ufffe\043\ufffe\044\ufffe\045\ufffe" +
    "\046\ufffe\047\ufffe\050\ufffe\051\ufffe\052\ufffe\053\ufffe\054" +
    "\ufffe\055\114\056\104\057\105\060\100\061\103\062\101" +
    "\063\ufffe\064\075\065\115\066\ufffe\067\ufffe\070\ufffe\071" +
    "\ufffe\072\ufffe\073\ufffe\074\ufffe\075\ufffe\076\ufffe\077\ufffe" +
    "\100\ufffe\101\ufffe\102\ufffe\103\ufffe\104\ufffe\105\ufffe\106" +
    "\ufffe\107\ufffe\110\ufffe\001\002\000\214\002\ufffb\004\ufffb" +
    "\005\ufffb\006\ufffb\007\ufffb\010\ufffb\012\ufffb\013\ufffb\014" +
    "\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb" +
    "\023\ufffb\024\ufffb\025\ufffb\026\ufffb\027\ufffb\030\ufffb\031" +
    "\ufffb\032\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb" +
    "\040\ufffb\041\ufffb\042\ufffb\043\ufffb\044\ufffb\045\ufffb\046" +
    "\ufffb\047\ufffb\050\ufffb\051\ufffb\052\ufffb\053\ufffb\054\ufffb" +
    "\055\ufffb\056\ufffb\057\ufffb\060\ufffb\061\ufffb\062\ufffb\063" +
    "\ufffb\064\ufffb\065\ufffb\066\ufffb\067\ufffb\070\ufffb\071\ufffb" +
    "\072\ufffb\073\ufffb\074\ufffb\075\ufffb\076\ufffb\077\ufffb\100" +
    "\ufffb\101\ufffb\102\ufffb\103\ufffb\104\ufffb\105\ufffb\106\ufffb" +
    "\107\ufffb\110\ufffb\001\002\000\154\002\uffff\006\uffff\010" +
    "\uffff\017\uffff\020\uffff\021\uffff\022\uffff\023\uffff\024\uffff" +
    "\025\uffff\026\uffff\027\uffff\030\uffff\031\uffff\032\uffff\033" +
    "\uffff\034\uffff\035\uffff\036\uffff\037\uffff\040\uffff\041\uffff" +
    "\042\uffff\043\uffff\044\uffff\045\uffff\046\uffff\047\uffff\050" +
    "\uffff\051\uffff\052\uffff\053\uffff\054\uffff\063\uffff\066\uffff" +
    "\067\uffff\070\uffff\071\uffff\072\uffff\073\uffff\074\uffff\075" +
    "\uffff\076\uffff\077\uffff\100\uffff\101\uffff\102\uffff\103\uffff" +
    "\104\uffff\105\uffff\106\uffff\107\uffff\110\uffff\001\002\000" +
    "\004\006\221\001\002\000\004\006\216\001\002\000\214" +
    "\002\ufff6\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\012" +
    "\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6" +
    "\021\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6\027" +
    "\ufff6\030\ufff6\031\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6" +
    "\036\ufff6\037\ufff6\040\ufff6\041\ufff6\042\ufff6\043\ufff6\044" +
    "\ufff6\045\ufff6\046\ufff6\047\ufff6\050\ufff6\051\ufff6\052\ufff6" +
    "\053\ufff6\054\ufff6\055\ufff6\056\ufff6\057\ufff6\060\ufff6\061" +
    "\ufff6\062\ufff6\063\ufff6\064\ufff6\065\ufff6\066\ufff6\067\ufff6" +
    "\070\ufff6\071\ufff6\072\ufff6\073\ufff6\074\ufff6\075\ufff6\076" +
    "\ufff6\077\ufff6\100\ufff6\101\ufff6\102\ufff6\103\ufff6\104\ufff6" +
    "\105\ufff6\106\ufff6\107\ufff6\110\ufff6\001\002\000\004\006" +
    "\211\001\002\000\004\006\152\001\002\000\004\006\147" +
    "\001\002\000\154\002\145\006\022\010\027\017\011\020" +
    "\007\021\047\022\036\023\053\024\046\025\025\026\062" +
    "\027\030\030\006\031\063\032\024\033\020\034\005\035" +
    "\071\036\034\037\054\040\015\041\004\042\042\043\040" +
    "\044\065\045\044\046\072\047\050\050\012\051\013\052" +
    "\023\053\043\054\064\063\033\066\014\067\032\070\031" +
    "\071\035\072\037\073\021\074\067\075\055\076\056\077" +
    "\017\100\016\101\051\102\045\103\041\104\052\105\060" +
    "\106\026\107\010\110\066\001\002\000\004\006\142\001" +
    "\002\000\004\006\073\001\002\000\152\006\022\010\027" +
    "\017\011\020\007\021\047\022\036\023\053\024\046\025" +
    "\025\026\062\027\030\030\006\031\063\032\024\033\020" +
    "\034\005\035\071\036\034\037\054\040\015\041\004\042" +
    "\042\043\040\044\065\045\044\046\072\047\050\050\012" +
    "\051\013\052\023\053\043\054\064\063\033\066\014\067" +
    "\032\070\031\071\035\072\037\073\021\074\067\075\055" +
    "\076\056\077\017\100\016\101\051\102\045\103\041\104" +
    "\052\105\060\106\026\107\010\110\066\001\002\000\042" +
    "\004\107\005\111\010\076\012\102\013\112\014\110\015" +
    "\113\016\106\055\114\056\104\057\105\060\100\061\103" +
    "\062\101\064\075\065\115\001\002\000\152\006\022\010" +
    "\027\017\011\020\007\021\047\022\036\023\053\024\046" +
    "\025\025\026\062\027\030\030\006\031\063\032\024\033" +
    "\020\034\005\035\071\036\034\037\054\040\015\041\004" +
    "\042\042\043\040\044\065\045\044\046\072\047\050\050" +
    "\012\051\013\052\023\053\043\054\064\063\033\066\014" +
    "\067\032\070\031\071\035\072\037\073\021\074\067\075" +
    "\055\076\056\077\017\100\016\101\051\102\045\103\041" +
    "\104\052\105\060\106\026\107\010\110\066\001\002\000" +
    "\152\006\022\010\027\017\011\020\007\021\047\022\036" +
    "\023\053\024\046\025\025\026\062\027\030\030\006\031" +
    "\063\032\024\033\020\034\005\035\071\036\034\037\054" +
    "\040\015\041\004\042\042\043\040\044\065\045\044\046" +
    "\072\047\050\050\012\051\013\052\023\053\043\054\064" +
    "\063\033\066\014\067\032\070\031\071\035\072\037\073" +
    "\021\074\067\075\055\076\056\077\017\100\016\101\051" +
    "\102\045\103\041\104\052\105\060\106\026\107\010\110" +
    "\066\001\002\000\152\006\022\010\027\017\011\020\007" +
    "\021\047\022\036\023\053\024\046\025\025\026\062\027" +
    "\030\030\006\031\063\032\024\033\020\034\005\035\071" +
    "\036\034\037\054\040\015\041\004\042\042\043\040\044" +
    "\065\045\044\046\072\047\050\050\012\051\013\052\023" +
    "\053\043\054\064\063\033\066\014\067\032\070\031\071" +
    "\035\072\037\073\021\074\067\075\055\076\056\077\017" +
    "\100\016\101\051\102\045\103\041\104\052\105\060\106" +
    "\026\107\010\110\066\001\002\000\152\006\022\010\027" +
    "\017\011\020\007\021\047\022\036\023\053\024\046\025" +
    "\025\026\062\027\030\030\006\031\063\032\024\033\020" +
    "\034\005\035\071\036\034\037\054\040\015\041\004\042" +
    "\042\043\040\044\065\045\044\046\072\047\050\050\012" +
    "\051\013\052\023\053\043\054\064\063\033\066\014\067" +
    "\032\070\031\071\035\072\037\073\021\074\067\075\055" +
    "\076\056\077\017\100\016\101\051\102\045\103\041\104" +
    "\052\105\060\106\026\107\010\110\066\001\002\000\152" +
    "\006\022\010\027\017\011\020\007\021\047\022\036\023" +
    "\053\024\046\025\025\026\062\027\030\030\006\031\063" +
    "\032\024\033\020\034\005\035\071\036\034\037\054\040" +
    "\015\041\004\042\042\043\040\044\065\045\044\046\072" +
    "\047\050\050\012\051\013\052\023\053\043\054\064\063" +
    "\033\066\014\067\032\070\031\071\035\072\037\073\021" +
    "\074\067\075\055\076\056\077\017\100\016\101\051\102" +
    "\045\103\041\104\052\105\060\106\026\107\010\110\066" +
    "\001\002\000\152\006\022\010\027\017\011\020\007\021" +
    "\047\022\036\023\053\024\046\025\025\026\062\027\030" +
    "\030\006\031\063\032\024\033\020\034\005\035\071\036" +
    "\034\037\054\040\015\041\004\042\042\043\040\044\065" +
    "\045\044\046\072\047\050\050\012\051\013\052\023\053" +
    "\043\054\064\063\033\066\014\067\032\070\031\071\035" +
    "\072\037\073\021\074\067\075\055\076\056\077\017\100" +
    "\016\101\051\102\045\103\041\104\052\105\060\106\026" +
    "\107\010\110\066\001\002\000\152\006\022\010\027\017" +
    "\011\020\007\021\047\022\036\023\053\024\046\025\025" +
    "\026\062\027\030\030\006\031\063\032\024\033\020\034" +
    "\005\035\071\036\034\037\054\040\015\041\004\042\042" +
    "\043\040\044\065\045\044\046\072\047\050\050\012\051" +
    "\013\052\023\053\043\054\064\063\033\066\014\067\032" +
    "\070\031\071\035\072\037\073\021\074\067\075\055\076" +
    "\056\077\017\100\016\101\051\102\045\103\041\104\052" +
    "\105\060\106\026\107\010\110\066\001\002\000\152\006" +
    "\022\010\027\017\011\020\007\021\047\022\036\023\053" +
    "\024\046\025\025\026\062\027\030\030\006\031\063\032" +
    "\024\033\020\034\005\035\071\036\034\037\054\040\015" +
    "\041\004\042\042\043\040\044\065\045\044\046\072\047" +
    "\050\050\012\051\013\052\023\053\043\054\064\063\033" +
    "\066\014\067\032\070\031\071\035\072\037\073\021\074" +
    "\067\075\055\076\056\077\017\100\016\101\051\102\045" +
    "\103\041\104\052\105\060\106\026\107\010\110\066\001" +
    "\002\000\152\006\022\010\027\017\011\020\007\021\047" +
    "\022\036\023\053\024\046\025\025\026\062\027\030\030" +
    "\006\031\063\032\024\033\020\034\005\035\071\036\034" +
    "\037\054\040\015\041\004\042\042\043\040\044\065\045" +
    "\044\046\072\047\050\050\012\051\013\052\023\053\043" +
    "\054\064\063\033\066\014\067\032\070\031\071\035\072" +
    "\037\073\021\074\067\075\055\076\056\077\017\100\016" +
    "\101\051\102\045\103\041\104\052\105\060\106\026\107" +
    "\010\110\066\001\002\000\152\006\022\010\027\017\011" +
    "\020\007\021\047\022\036\023\053\024\046\025\025\026" +
    "\062\027\030\030\006\031\063\032\024\033\020\034\005" +
    "\035\071\036\034\037\054\040\015\041\004\042\042\043" +
    "\040\044\065\045\044\046\072\047\050\050\012\051\013" +
    "\052\023\053\043\054\064\063\033\066\014\067\032\070" +
    "\031\071\035\072\037\073\021\074\067\075\055\076\056" +
    "\077\017\100\016\101\051\102\045\103\041\104\052\105" +
    "\060\106\026\107\010\110\066\001\002\000\152\006\uffa0" +
    "\010\uffa0\017\uffa0\020\uffa0\021\uffa0\022\uffa0\023\uffa0\024" +
    "\uffa0\025\uffa0\026\uffa0\027\uffa0\030\uffa0\031\uffa0\032\uffa0" +
    "\033\uffa0\034\uffa0\035\uffa0\036\uffa0\037\uffa0\040\uffa0\041" +
    "\uffa0\042\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0\047\uffa0" +
    "\050\uffa0\051\uffa0\052\uffa0\053\uffa0\054\uffa0\063\uffa0\066" +
    "\uffa0\067\uffa0\070\uffa0\071\uffa0\072\uffa0\073\uffa0\074\uffa0" +
    "\075\uffa0\076\uffa0\077\uffa0\100\uffa0\101\uffa0\102\uffa0\103" +
    "\uffa0\104\uffa0\105\uffa0\106\uffa0\107\uffa0\110\uffa0\001\002" +
    "\000\152\006\022\010\027\017\011\020\007\021\047\022" +
    "\036\023\053\024\046\025\025\026\062\027\030\030\006" +
    "\031\063\032\024\033\020\034\005\035\071\036\034\037" +
    "\054\040\015\041\004\042\042\043\040\044\065\045\044" +
    "\046\072\047\050\050\012\051\013\052\023\053\043\054" +
    "\064\063\033\066\014\067\032\070\031\071\035\072\037" +
    "\073\021\074\067\075\055\076\056\077\017\100\016\101" +
    "\051\102\045\103\041\104\052\105\060\106\026\107\010" +
    "\110\066\001\002\000\152\006\uffa1\010\uffa1\017\uffa1\020" +
    "\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1\025\uffa1\026\uffa1" +
    "\027\uffa1\030\uffa1\031\uffa1\032\uffa1\033\uffa1\034\uffa1\035" +
    "\uffa1\036\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1" +
    "\044\uffa1\045\uffa1\046\uffa1\047\uffa1\050\uffa1\051\uffa1\052" +
    "\uffa1\053\uffa1\054\uffa1\063\uffa1\066\uffa1\067\uffa1\070\uffa1" +
    "\071\uffa1\072\uffa1\073\uffa1\074\uffa1\075\uffa1\076\uffa1\077" +
    "\uffa1\100\uffa1\101\uffa1\102\uffa1\103\uffa1\104\uffa1\105\uffa1" +
    "\106\uffa1\107\uffa1\110\uffa1\001\002\000\152\006\022\010" +
    "\027\017\011\020\007\021\047\022\036\023\053\024\046" +
    "\025\025\026\062\027\030\030\006\031\063\032\024\033" +
    "\020\034\005\035\071\036\034\037\054\040\015\041\004" +
    "\042\042\043\040\044\065\045\044\046\072\047\050\050" +
    "\012\051\013\052\023\053\043\054\064\063\033\066\014" +
    "\067\032\070\031\071\035\072\037\073\021\074\067\075" +
    "\055\076\056\077\017\100\016\101\051\102\045\103\041" +
    "\104\052\105\060\106\026\107\010\110\066\001\002\000" +
    "\152\006\022\010\027\017\011\020\007\021\047\022\036" +
    "\023\053\024\046\025\025\026\062\027\030\030\006\031" +
    "\063\032\024\033\020\034\005\035\071\036\034\037\054" +
    "\040\015\041\004\042\042\043\040\044\065\045\044\046" +
    "\072\047\050\050\012\051\013\052\023\053\043\054\064" +
    "\063\033\066\014\067\032\070\031\071\035\072\037\073" +
    "\021\074\067\075\055\076\056\077\017\100\016\101\051" +
    "\102\045\103\041\104\052\105\060\106\026\107\010\110" +
    "\066\001\002\000\152\006\022\010\027\017\011\020\007" +
    "\021\047\022\036\023\053\024\046\025\025\026\062\027" +
    "\030\030\006\031\063\032\024\033\020\034\005\035\071" +
    "\036\034\037\054\040\015\041\004\042\042\043\040\044" +
    "\065\045\044\046\072\047\050\050\012\051\013\052\023" +
    "\053\043\054\064\063\033\066\014\067\032\070\031\071" +
    "\035\072\037\073\021\074\067\075\055\076\056\077\017" +
    "\100\016\101\051\102\045\103\041\104\052\105\060\106" +
    "\026\107\010\110\066\001\002\000\152\006\022\010\027" +
    "\017\011\020\007\021\047\022\036\023\053\024\046\025" +
    "\025\026\062\027\030\030\006\031\063\032\024\033\020" +
    "\034\005\035\071\036\034\037\054\040\015\041\004\042" +
    "\042\043\040\044\065\045\044\046\072\047\050\050\012" +
    "\051\013\052\023\053\043\054\064\063\033\066\014\067" +
    "\032\070\031\071\035\072\037\073\021\074\067\075\055" +
    "\076\056\077\017\100\016\101\051\102\045\103\041\104" +
    "\052\105\060\106\026\107\010\110\066\001\002\000\214" +
    "\002\uffe8\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\076\012" +
    "\102\013\112\014\110\015\113\016\106\017\uffe8\020\uffe8" +
    "\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027" +
    "\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8" +
    "\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\044" +
    "\uffe8\045\uffe8\046\uffe8\047\uffe8\050\uffe8\051\uffe8\052\uffe8" +
    "\053\uffe8\054\uffe8\055\114\056\104\057\105\060\100\061" +
    "\103\062\101\063\uffe8\064\uffe8\065\uffe8\066\uffe8\067\uffe8" +
    "\070\uffe8\071\uffe8\072\uffe8\073\uffe8\074\uffe8\075\uffe8\076" +
    "\uffe8\077\uffe8\100\uffe8\101\uffe8\102\uffe8\103\uffe8\104\uffe8" +
    "\105\uffe8\106\uffe8\107\uffe8\110\uffe8\001\002\000\214\002" +
    "\ufff0\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010\076\012\102" +
    "\013\112\014\110\015\113\016\106\017\ufff0\020\ufff0\021" +
    "\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0" +
    "\030\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0\036" +
    "\ufff0\037\ufff0\040\ufff0\041\ufff0\042\ufff0\043\ufff0\044\ufff0" +
    "\045\ufff0\046\ufff0\047\ufff0\050\ufff0\051\ufff0\052\ufff0\053" +
    "\ufff0\054\ufff0\055\ufff0\056\ufff0\057\ufff0\060\ufff0\061\ufff0" +
    "\062\ufff0\063\ufff0\064\ufff0\065\ufff0\066\ufff0\067\ufff0\070" +
    "\ufff0\071\ufff0\072\ufff0\073\ufff0\074\ufff0\075\ufff0\076\ufff0" +
    "\077\ufff0\100\ufff0\101\ufff0\102\ufff0\103\ufff0\104\ufff0\105" +
    "\ufff0\106\ufff0\107\ufff0\110\ufff0\001\002\000\214\002\uffe2" +
    "\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\012\uffe2\013" +
    "\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2" +
    "\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030" +
    "\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2" +
    "\037\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2\045" +
    "\uffe2\046\uffe2\047\uffe2\050\uffe2\051\uffe2\052\uffe2\053\uffe2" +
    "\054\uffe2\055\uffe2\056\uffe2\057\uffe2\060\uffe2\061\uffe2\062" +
    "\uffe2\063\uffe2\064\uffe2\065\uffe2\066\uffe2\067\uffe2\070\uffe2" +
    "\071\uffe2\072\uffe2\073\uffe2\074\uffe2\075\uffe2\076\uffe2\077" +
    "\uffe2\100\uffe2\101\uffe2\102\uffe2\103\uffe2\104\uffe2\105\uffe2" +
    "\106\uffe2\107\uffe2\110\uffe2\001\002\000\214\002\uffe5\004" +
    "\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\012\uffe5\013\uffe5" +
    "\014\uffe5\015\113\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022" +
    "\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5" +
    "\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037" +
    "\uffe5\040\uffe5\041\uffe5\042\uffe5\043\uffe5\044\uffe5\045\uffe5" +
    "\046\uffe5\047\uffe5\050\uffe5\051\uffe5\052\uffe5\053\uffe5\054" +
    "\uffe5\055\uffe5\056\uffe5\057\uffe5\060\uffe5\061\uffe5\062\uffe5" +
    "\063\uffe5\064\uffe5\065\uffe5\066\uffe5\067\uffe5\070\uffe5\071" +
    "\uffe5\072\uffe5\073\uffe5\074\uffe5\075\uffe5\076\uffe5\077\uffe5" +
    "\100\uffe5\101\uffe5\102\uffe5\103\uffe5\104\uffe5\105\uffe5\106" +
    "\uffe5\107\uffe5\110\uffe5\001\002\000\214\002\uffe4\004\uffe4" +
    "\005\uffe4\006\uffe4\007\uffe4\010\uffe4\012\uffe4\013\uffe4\014" +
    "\uffe4\015\113\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4" +
    "\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031" +
    "\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4" +
    "\040\uffe4\041\uffe4\042\uffe4\043\uffe4\044\uffe4\045\uffe4\046" +
    "\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4\054\uffe4" +
    "\055\uffe4\056\uffe4\057\uffe4\060\uffe4\061\uffe4\062\uffe4\063" +
    "\uffe4\064\uffe4\065\uffe4\066\uffe4\067\uffe4\070\uffe4\071\uffe4" +
    "\072\uffe4\073\uffe4\074\uffe4\075\uffe4\076\uffe4\077\uffe4\100" +
    "\uffe4\101\uffe4\102\uffe4\103\uffe4\104\uffe4\105\uffe4\106\uffe4" +
    "\107\uffe4\110\uffe4\001\002\000\214\002\uffe3\004\uffe3\005" +
    "\uffe3\006\uffe3\007\uffe3\010\uffe3\012\uffe3\013\uffe3\014\uffe3" +
    "\015\113\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023" +
    "\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3" +
    "\032\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040" +
    "\uffe3\041\uffe3\042\uffe3\043\uffe3\044\uffe3\045\uffe3\046\uffe3" +
    "\047\uffe3\050\uffe3\051\uffe3\052\uffe3\053\uffe3\054\uffe3\055" +
    "\uffe3\056\uffe3\057\uffe3\060\uffe3\061\uffe3\062\uffe3\063\uffe3" +
    "\064\uffe3\065\uffe3\066\uffe3\067\uffe3\070\uffe3\071\uffe3\072" +
    "\uffe3\073\uffe3\074\uffe3\075\uffe3\076\uffe3\077\uffe3\100\uffe3" +
    "\101\uffe3\102\uffe3\103\uffe3\104\uffe3\105\uffe3\106\uffe3\107" +
    "\uffe3\110\uffe3\001\002\000\214\002\uffee\004\uffee\005\uffee" +
    "\006\uffee\007\uffee\010\076\012\102\013\112\014\110\015" +
    "\113\016\106\017\uffee\020\uffee\021\uffee\022\uffee\023\uffee" +
    "\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee\031\uffee\032" +
    "\uffee\033\uffee\034\uffee\035\uffee\036\uffee\037\uffee\040\uffee" +
    "\041\uffee\042\uffee\043\uffee\044\uffee\045\uffee\046\uffee\047" +
    "\uffee\050\uffee\051\uffee\052\uffee\053\uffee\054\uffee\055\uffee" +
    "\056\uffee\057\uffee\060\uffee\061\uffee\062\uffee\063\uffee\064" +
    "\uffee\065\uffee\066\uffee\067\uffee\070\uffee\071\uffee\072\uffee" +
    "\073\uffee\074\uffee\075\uffee\076\uffee\077\uffee\100\uffee\101" +
    "\uffee\102\uffee\103\uffee\104\uffee\105\uffee\106\uffee\107\uffee" +
    "\110\uffee\001\002\000\214\002\uffef\004\uffef\005\uffef\006" +
    "\uffef\007\uffef\010\076\012\102\013\112\014\110\015\113" +
    "\016\106\017\uffef\020\uffef\021\uffef\022\uffef\023\uffef\024" +
    "\uffef\025\uffef\026\uffef\027\uffef\030\uffef\031\uffef\032\uffef" +
    "\033\uffef\034\uffef\035\uffef\036\uffef\037\uffef\040\uffef\041" +
    "\uffef\042\uffef\043\uffef\044\uffef\045\uffef\046\uffef\047\uffef" +
    "\050\uffef\051\uffef\052\uffef\053\uffef\054\uffef\055\uffef\056" +
    "\uffef\057\uffef\060\uffef\061\uffef\062\uffef\063\uffef\064\uffef" +
    "\065\uffef\066\uffef\067\uffef\070\uffef\071\uffef\072\uffef\073" +
    "\uffef\074\uffef\075\uffef\076\uffef\077\uffef\100\uffef\101\uffef" +
    "\102\uffef\103\uffef\104\uffef\105\uffef\106\uffef\107\uffef\110" +
    "\uffef\001\002\000\214\002\uffec\004\uffec\005\uffec\006\uffec" +
    "\007\uffec\010\076\012\102\013\112\014\110\015\113\016" +
    "\106\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec" +
    "\025\uffec\026\uffec\027\uffec\030\uffec\031\uffec\032\uffec\033" +
    "\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec\041\uffec" +
    "\042\uffec\043\uffec\044\uffec\045\uffec\046\uffec\047\uffec\050" +
    "\uffec\051\uffec\052\uffec\053\uffec\054\uffec\055\uffec\056\uffec" +
    "\057\uffec\060\uffec\061\uffec\062\uffec\063\uffec\064\uffec\065" +
    "\uffec\066\uffec\067\uffec\070\uffec\071\uffec\072\uffec\073\uffec" +
    "\074\uffec\075\uffec\076\uffec\077\uffec\100\uffec\101\uffec\102" +
    "\uffec\103\uffec\104\uffec\105\uffec\106\uffec\107\uffec\110\uffec" +
    "\001\002\000\214\002\uffe7\004\uffe7\005\uffe7\006\uffe7\007" +
    "\uffe7\010\uffe7\012\uffe7\013\112\014\110\015\113\016\106" +
    "\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025" +
    "\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7" +
    "\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7\042" +
    "\uffe7\043\uffe7\044\uffe7\045\uffe7\046\uffe7\047\uffe7\050\uffe7" +
    "\051\uffe7\052\uffe7\053\uffe7\054\uffe7\055\uffe7\056\uffe7\057" +
    "\uffe7\060\uffe7\061\uffe7\062\uffe7\063\uffe7\064\uffe7\065\uffe7" +
    "\066\uffe7\067\uffe7\070\uffe7\071\uffe7\072\uffe7\073\uffe7\074" +
    "\uffe7\075\uffe7\076\uffe7\077\uffe7\100\uffe7\101\uffe7\102\uffe7" +
    "\103\uffe7\104\uffe7\105\uffe7\106\uffe7\107\uffe7\110\uffe7\001" +
    "\002\000\214\002\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb" +
    "\010\076\012\102\013\112\014\110\015\113\016\106\017" +
    "\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb" +
    "\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034" +
    "\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb" +
    "\043\uffeb\044\uffeb\045\uffeb\046\uffeb\047\uffeb\050\uffeb\051" +
    "\uffeb\052\uffeb\053\uffeb\054\uffeb\055\uffeb\056\uffeb\057\uffeb" +
    "\060\uffeb\061\uffeb\062\uffeb\063\uffeb\064\uffeb\065\uffeb\066" +
    "\uffeb\067\uffeb\070\uffeb\071\uffeb\072\uffeb\073\uffeb\074\uffeb" +
    "\075\uffeb\076\uffeb\077\uffeb\100\uffeb\101\uffeb\102\uffeb\103" +
    "\uffeb\104\uffeb\105\uffeb\106\uffeb\107\uffeb\110\uffeb\001\002" +
    "\000\214\002\uffed\004\uffed\005\uffed\006\uffed\007\uffed\010" +
    "\076\012\102\013\112\014\110\015\113\016\106\017\uffed" +
    "\020\uffed\021\uffed\022\uffed\023\uffed\024\uffed\025\uffed\026" +
    "\uffed\027\uffed\030\uffed\031\uffed\032\uffed\033\uffed\034\uffed" +
    "\035\uffed\036\uffed\037\uffed\040\uffed\041\uffed\042\uffed\043" +
    "\uffed\044\uffed\045\uffed\046\uffed\047\uffed\050\uffed\051\uffed" +
    "\052\uffed\053\uffed\054\uffed\055\uffed\056\uffed\057\uffed\060" +
    "\uffed\061\uffed\062\uffed\063\uffed\064\uffed\065\uffed\066\uffed" +
    "\067\uffed\070\uffed\071\uffed\072\uffed\073\uffed\074\uffed\075" +
    "\uffed\076\uffed\077\uffed\100\uffed\101\uffed\102\uffed\103\uffed" +
    "\104\uffed\105\uffed\106\uffed\107\uffed\110\uffed\001\002\000" +
    "\042\004\107\005\111\010\076\012\102\013\112\014\110" +
    "\015\113\016\106\055\114\056\104\057\105\060\100\061" +
    "\103\062\101\064\075\065\115\001\002\000\152\006\022" +
    "\010\027\017\011\020\007\021\047\022\036\023\053\024" +
    "\046\025\025\026\062\027\030\030\006\031\063\032\024" +
    "\033\020\034\005\035\071\036\034\037\054\040\015\041" +
    "\004\042\042\043\040\044\065\045\044\046\072\047\050" +
    "\050\012\051\013\052\023\053\043\054\064\063\033\066" +
    "\014\067\032\070\031\071\035\072\037\073\021\074\067" +
    "\075\055\076\056\077\017\100\016\101\051\102\045\103" +
    "\041\104\052\105\060\106\026\107\010\110\066\001\002" +
    "\000\042\004\107\005\111\010\076\012\102\013\112\014" +
    "\110\015\113\016\106\055\114\056\104\057\105\060\100" +
    "\061\103\062\101\064\075\065\115\001\002\000\152\006" +
    "\022\010\027\017\011\020\007\021\047\022\036\023\053" +
    "\024\046\025\025\026\062\027\030\030\006\031\063\032" +
    "\024\033\020\034\005\035\071\036\034\037\054\040\015" +
    "\041\004\042\042\043\040\044\065\045\044\046\072\047" +
    "\050\050\012\051\013\052\023\053\043\054\064\063\033" +
    "\066\014\067\032\070\031\071\035\072\037\073\021\074" +
    "\067\075\055\076\056\077\017\100\016\101\051\102\045" +
    "\103\041\104\052\105\060\106\026\107\010\110\066\001" +
    "\002\000\040\007\137\010\076\012\102\013\112\014\110" +
    "\015\113\016\106\055\114\056\104\057\105\060\100\061" +
    "\103\062\101\064\075\065\115\001\002\000\214\002\uffa4" +
    "\004\uffa4\005\uffa4\006\uffa4\007\uffa4\010\uffa4\012\uffa4\013" +
    "\uffa4\014\uffa4\015\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4" +
    "\022\uffa4\023\uffa4\024\uffa4\025\uffa4\026\uffa4\027\uffa4\030" +
    "\uffa4\031\uffa4\032\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4" +
    "\037\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4\045" +
    "\uffa4\046\uffa4\047\uffa4\050\uffa4\051\uffa4\052\uffa4\053\uffa4" +
    "\054\uffa4\055\uffa4\056\uffa4\057\uffa4\060\uffa4\061\uffa4\062" +
    "\uffa4\063\uffa4\064\uffa4\065\uffa4\066\uffa4\067\uffa4\070\uffa4" +
    "\071\uffa4\072\uffa4\073\uffa4\074\uffa4\075\uffa4\076\uffa4\077" +
    "\uffa4\100\uffa4\101\uffa4\102\uffa4\103\uffa4\104\uffa4\105\uffa4" +
    "\106\uffa4\107\uffa4\110\uffa4\001\002\000\214\002\uffe6\004" +
    "\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\012\uffe6\013\112" +
    "\014\110\015\113\016\106\017\uffe6\020\uffe6\021\uffe6\022" +
    "\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6" +
    "\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037" +
    "\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6\045\uffe6" +
    "\046\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6\054" +
    "\uffe6\055\uffe6\056\uffe6\057\uffe6\060\uffe6\061\uffe6\062\uffe6" +
    "\063\uffe6\064\uffe6\065\uffe6\066\uffe6\067\uffe6\070\uffe6\071" +
    "\uffe6\072\uffe6\073\uffe6\074\uffe6\075\uffe6\076\uffe6\077\uffe6" +
    "\100\uffe6\101\uffe6\102\uffe6\103\uffe6\104\uffe6\105\uffe6\106" +
    "\uffe6\107\uffe6\110\uffe6\001\002\000\214\002\uffe9\004\uffe9" +
    "\005\uffe9\006\uffe9\007\uffe9\010\076\012\102\013\112\014" +
    "\110\015\113\016\106\017\uffe9\020\uffe9\021\uffe9\022\uffe9" +
    "\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031" +
    "\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9" +
    "\040\uffe9\041\uffe9\042\uffe9\043\uffe9\044\uffe9\045\uffe9\046" +
    "\uffe9\047\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9" +
    "\055\114\056\104\057\105\060\100\061\103\062\101\063" +
    "\uffe9\064\uffe9\065\uffe9\066\uffe9\067\uffe9\070\uffe9\071\uffe9" +
    "\072\uffe9\073\uffe9\074\uffe9\075\uffe9\076\uffe9\077\uffe9\100" +
    "\uffe9\101\uffe9\102\uffe9\103\uffe9\104\uffe9\105\uffe9\106\uffe9" +
    "\107\uffe9\110\uffe9\001\002\000\152\006\022\010\027\017" +
    "\011\020\007\021\047\022\036\023\053\024\046\025\025" +
    "\026\062\027\030\030\006\031\063\032\024\033\020\034" +
    "\005\035\071\036\034\037\054\040\015\041\004\042\042" +
    "\043\040\044\065\045\044\046\072\047\050\050\012\051" +
    "\013\052\023\053\043\054\064\063\033\066\014\067\032" +
    "\070\031\071\035\072\037\073\021\074\067\075\055\076" +
    "\056\077\017\100\016\101\051\102\045\103\041\104\052" +
    "\105\060\106\026\107\010\110\066\001\002\000\040\007" +
    "\144\010\076\012\102\013\112\014\110\015\113\016\106" +
    "\055\114\056\104\057\105\060\100\061\103\062\101\064" +
    "\075\065\115\001\002\000\214\002\uffd3\004\uffd3\005\uffd3" +
    "\006\uffd3\007\uffd3\010\uffd3\012\uffd3\013\uffd3\014\uffd3\015" +
    "\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3" +
    "\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032" +
    "\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3" +
    "\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047" +
    "\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3\054\uffd3\055\uffd3" +
    "\056\uffd3\057\uffd3\060\uffd3\061\uffd3\062\uffd3\063\uffd3\064" +
    "\uffd3\065\uffd3\066\uffd3\067\uffd3\070\uffd3\071\uffd3\072\uffd3" +
    "\073\uffd3\074\uffd3\075\uffd3\076\uffd3\077\uffd3\100\uffd3\101" +
    "\uffd3\102\uffd3\103\uffd3\104\uffd3\105\uffd3\106\uffd3\107\uffd3" +
    "\110\uffd3\001\002\000\004\002\000\001\002\000\154\002" +
    "\001\006\001\010\001\017\001\020\001\021\001\022\001" +
    "\023\001\024\001\025\001\026\001\027\001\030\001\031" +
    "\001\032\001\033\001\034\001\035\001\036\001\037\001" +
    "\040\001\041\001\042\001\043\001\044\001\045\001\046" +
    "\001\047\001\050\001\051\001\052\001\053\001\054\001" +
    "\063\001\066\001\067\001\070\001\071\001\072\001\073" +
    "\001\074\001\075\001\076\001\077\001\100\001\101\001" +
    "\102\001\103\001\104\001\105\001\106\001\107\001\110" +
    "\001\001\002\000\152\006\022\010\027\017\011\020\007" +
    "\021\047\022\036\023\053\024\046\025\025\026\062\027" +
    "\030\030\006\031\063\032\024\033\020\034\005\035\071" +
    "\036\034\037\054\040\015\041\004\042\042\043\040\044" +
    "\065\045\044\046\072\047\050\050\012\051\013\052\023" +
    "\053\043\054\064\063\033\066\014\067\032\070\031\071" +
    "\035\072\037\073\021\074\067\075\055\076\056\077\017" +
    "\100\016\101\051\102\045\103\041\104\052\105\060\106" +
    "\026\107\010\110\066\001\002\000\040\007\151\010\076" +
    "\012\102\013\112\014\110\015\113\016\106\055\114\056" +
    "\104\057\105\060\100\061\103\062\101\064\075\065\115" +
    "\001\002\000\214\002\uffba\004\uffba\005\uffba\006\uffba\007" +
    "\uffba\010\uffba\012\uffba\013\uffba\014\uffba\015\uffba\016\uffba" +
    "\017\uffba\020\uffba\021\uffba\022\uffba\023\uffba\024\uffba\025" +
    "\uffba\026\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033\uffba" +
    "\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba\042" +
    "\uffba\043\uffba\044\uffba\045\uffba\046\uffba\047\uffba\050\uffba" +
    "\051\uffba\052\uffba\053\uffba\054\uffba\055\uffba\056\uffba\057" +
    "\uffba\060\uffba\061\uffba\062\uffba\063\uffba\064\uffba\065\uffba" +
    "\066\uffba\067\uffba\070\uffba\071\uffba\072\uffba\073\uffba\074" +
    "\uffba\075\uffba\076\uffba\077\uffba\100\uffba\101\uffba\102\uffba" +
    "\103\uffba\104\uffba\105\uffba\106\uffba\107\uffba\110\uffba\001" +
    "\002\000\154\006\022\007\153\010\027\017\011\020\007" +
    "\021\047\022\036\023\053\024\046\025\025\026\062\027" +
    "\030\030\006\031\063\032\024\033\020\034\005\035\071" +
    "\036\034\037\054\040\015\041\004\042\042\043\040\044" +
    "\065\045\044\046\072\047\050\050\012\051\013\052\023" +
    "\053\043\054\064\063\033\066\014\067\032\070\031\071" +
    "\035\072\037\073\021\074\067\075\055\076\056\077\017" +
    "\100\016\101\051\102\045\103\041\104\052\105\060\106" +
    "\026\107\010\110\066\001\002\000\214\002\uffc7\004\uffc7" +
    "\005\uffc7\006\uffc7\007\uffc7\010\uffc7\012\uffc7\013\uffc7\014" +
    "\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7" +
    "\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031" +
    "\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7" +
    "\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046" +
    "\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7" +
    "\055\uffc7\056\uffc7\057\uffc7\060\uffc7\061\uffc7\062\uffc7\063" +
    "\uffc7\064\uffc7\065\uffc7\066\uffc7\067\uffc7\070\uffc7\071\uffc7" +
    "\072\uffc7\073\uffc7\074\uffc7\075\uffc7\076\uffc7\077\uffc7\100" +
    "\uffc7\101\uffc7\102\uffc7\103\uffc7\104\uffc7\105\uffc7\106\uffc7" +
    "\107\uffc7\110\uffc7\001\002\000\044\004\107\005\111\007" +
    "\155\010\076\012\102\013\112\014\110\015\113\016\106" +
    "\055\114\056\104\057\105\060\100\061\103\062\101\064" +
    "\075\065\115\001\002\000\214\002\uffc6\004\uffc6\005\uffc6" +
    "\006\uffc6\007\uffc6\010\uffc6\012\uffc6\013\uffc6\014\uffc6\015" +
    "\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6" +
    "\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\032" +
    "\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6" +
    "\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6\047" +
    "\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\054\uffc6\055\uffc6" +
    "\056\uffc6\057\uffc6\060\uffc6\061\uffc6\062\uffc6\063\uffc6\064" +
    "\uffc6\065\uffc6\066\uffc6\067\uffc6\070\uffc6\071\uffc6\072\uffc6" +
    "\073\uffc6\074\uffc6\075\uffc6\076\uffc6\077\uffc6\100\uffc6\101" +
    "\uffc6\102\uffc6\103\uffc6\104\uffc6\105\uffc6\106\uffc6\107\uffc6" +
    "\110\uffc6\001\002\000\152\006\022\010\027\017\011\020" +
    "\007\021\047\022\036\023\053\024\046\025\025\026\062" +
    "\027\030\030\006\031\063\032\024\033\020\034\005\035" +
    "\071\036\034\037\054\040\015\041\004\042\042\043\040" +
    "\044\065\045\044\046\072\047\050\050\012\051\013\052" +
    "\023\053\043\054\064\063\033\066\014\067\032\070\031" +
    "\071\035\072\037\073\021\074\067\075\055\076\056\077" +
    "\017\100\016\101\051\102\045\103\041\104\052\105\060" +
    "\106\026\107\010\110\066\001\002\000\044\004\107\005" +
    "\111\007\160\010\076\012\102\013\112\014\110\015\113" +
    "\016\106\055\114\056\104\057\105\060\100\061\103\062" +
    "\101\064\075\065\115\001\002\000\214\002\uffc5\004\uffc5" +
    "\005\uffc5\006\uffc5\007\uffc5\010\uffc5\012\uffc5\013\uffc5\014" +
    "\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5" +
    "\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031" +
    "\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5" +
    "\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046" +
    "\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5" +
    "\055\uffc5\056\uffc5\057\uffc5\060\uffc5\061\uffc5\062\uffc5\063" +
    "\uffc5\064\uffc5\065\uffc5\066\uffc5\067\uffc5\070\uffc5\071\uffc5" +
    "\072\uffc5\073\uffc5\074\uffc5\075\uffc5\076\uffc5\077\uffc5\100" +
    "\uffc5\101\uffc5\102\uffc5\103\uffc5\104\uffc5\105\uffc5\106\uffc5" +
    "\107\uffc5\110\uffc5\001\002\000\152\006\022\010\027\017" +
    "\011\020\007\021\047\022\036\023\053\024\046\025\025" +
    "\026\062\027\030\030\006\031\063\032\024\033\020\034" +
    "\005\035\071\036\034\037\054\040\015\041\004\042\042" +
    "\043\040\044\065\045\044\046\072\047\050\050\012\051" +
    "\013\052\023\053\043\054\064\063\033\066\014\067\032" +
    "\070\031\071\035\072\037\073\021\074\067\075\055\076" +
    "\056\077\017\100\016\101\051\102\045\103\041\104\052" +
    "\105\060\106\026\107\010\110\066\001\002\000\044\004" +
    "\107\005\111\007\163\010\076\012\102\013\112\014\110" +
    "\015\113\016\106\055\114\056\104\057\105\060\100\061" +
    "\103\062\101\064\075\065\115\001\002\000\214\002\uffc4" +
    "\004\uffc4\005\uffc4\006\uffc4\007\uffc4\010\uffc4\012\uffc4\013" +
    "\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4" +
    "\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030" +
    "\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4" +
    "\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4\045" +
    "\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4" +
    "\054\uffc4\055\uffc4\056\uffc4\057\uffc4\060\uffc4\061\uffc4\062" +
    "\uffc4\063\uffc4\064\uffc4\065\uffc4\066\uffc4\067\uffc4\070\uffc4" +
    "\071\uffc4\072\uffc4\073\uffc4\074\uffc4\075\uffc4\076\uffc4\077" +
    "\uffc4\100\uffc4\101\uffc4\102\uffc4\103\uffc4\104\uffc4\105\uffc4" +
    "\106\uffc4\107\uffc4\110\uffc4\001\002\000\152\006\022\010" +
    "\027\017\011\020\007\021\047\022\036\023\053\024\046" +
    "\025\025\026\062\027\030\030\006\031\063\032\024\033" +
    "\020\034\005\035\071\036\034\037\054\040\015\041\004" +
    "\042\042\043\040\044\065\045\044\046\072\047\050\050" +
    "\012\051\013\052\023\053\043\054\064\063\033\066\014" +
    "\067\032\070\031\071\035\072\037\073\021\074\067\075" +
    "\055\076\056\077\017\100\016\101\051\102\045\103\041" +
    "\104\052\105\060\106\026\107\010\110\066\001\002\000" +
    "\044\004\107\005\111\007\166\010\076\012\102\013\112" +
    "\014\110\015\113\016\106\055\114\056\104\057\105\060" +
    "\100\061\103\062\101\064\075\065\115\001\002\000\214" +
    "\002\uffc3\004\uffc3\005\uffc3\006\uffc3\007\uffc3\010\uffc3\012" +
    "\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3" +
    "\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027" +
    "\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3" +
    "\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044" +
    "\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3" +
    "\053\uffc3\054\uffc3\055\uffc3\056\uffc3\057\uffc3\060\uffc3\061" +
    "\uffc3\062\uffc3\063\uffc3\064\uffc3\065\uffc3\066\uffc3\067\uffc3" +
    "\070\uffc3\071\uffc3\072\uffc3\073\uffc3\074\uffc3\075\uffc3\076" +
    "\uffc3\077\uffc3\100\uffc3\101\uffc3\102\uffc3\103\uffc3\104\uffc3" +
    "\105\uffc3\106\uffc3\107\uffc3\110\uffc3\001\002\000\152\006" +
    "\022\010\027\017\011\020\007\021\047\022\036\023\053" +
    "\024\046\025\025\026\062\027\030\030\006\031\063\032" +
    "\024\033\020\034\005\035\071\036\034\037\054\040\015" +
    "\041\004\042\042\043\040\044\065\045\044\046\072\047" +
    "\050\050\012\051\013\052\023\053\043\054\064\063\033" +
    "\066\014\067\032\070\031\071\035\072\037\073\021\074" +
    "\067\075\055\076\056\077\017\100\016\101\051\102\045" +
    "\103\041\104\052\105\060\106\026\107\010\110\066\001" +
    "\002\000\044\004\107\005\111\007\171\010\076\012\102" +
    "\013\112\014\110\015\113\016\106\055\114\056\104\057" +
    "\105\060\100\061\103\062\101\064\075\065\115\001\002" +
    "\000\214\002\uffc2\004\uffc2\005\uffc2\006\uffc2\007\uffc2\010" +
    "\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2" +
    "\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026" +
    "\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2" +
    "\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043" +
    "\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2" +
    "\052\uffc2\053\uffc2\054\uffc2\055\uffc2\056\uffc2\057\uffc2\060" +
    "\uffc2\061\uffc2\062\uffc2\063\uffc2\064\uffc2\065\uffc2\066\uffc2" +
    "\067\uffc2\070\uffc2\071\uffc2\072\uffc2\073\uffc2\074\uffc2\075" +
    "\uffc2\076\uffc2\077\uffc2\100\uffc2\101\uffc2\102\uffc2\103\uffc2" +
    "\104\uffc2\105\uffc2\106\uffc2\107\uffc2\110\uffc2\001\002\000" +
    "\152\006\022\010\027\017\011\020\007\021\047\022\036" +
    "\023\053\024\046\025\025\026\062\027\030\030\006\031" +
    "\063\032\024\033\020\034\005\035\071\036\034\037\054" +
    "\040\015\041\004\042\042\043\040\044\065\045\044\046" +
    "\072\047\050\050\012\051\013\052\023\053\043\054\064" +
    "\063\033\066\014\067\032\070\031\071\035\072\037\073" +
    "\021\074\067\075\055\076\056\077\017\100\016\101\051" +
    "\102\045\103\041\104\052\105\060\106\026\107\010\110" +
    "\066\001\002\000\044\004\107\005\111\007\174\010\076" +
    "\012\102\013\112\014\110\015\113\016\106\055\114\056" +
    "\104\057\105\060\100\061\103\062\101\064\075\065\115" +
    "\001\002\000\214\002\uffc1\004\uffc1\005\uffc1\006\uffc1\007" +
    "\uffc1\010\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1" +
    "\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025" +
    "\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1" +
    "\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042" +
    "\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1" +
    "\051\uffc1\052\uffc1\053\uffc1\054\uffc1\055\uffc1\056\uffc1\057" +
    "\uffc1\060\uffc1\061\uffc1\062\uffc1\063\uffc1\064\uffc1\065\uffc1" +
    "\066\uffc1\067\uffc1\070\uffc1\071\uffc1\072\uffc1\073\uffc1\074" +
    "\uffc1\075\uffc1\076\uffc1\077\uffc1\100\uffc1\101\uffc1\102\uffc1" +
    "\103\uffc1\104\uffc1\105\uffc1\106\uffc1\107\uffc1\110\uffc1\001" +
    "\002\000\152\006\022\010\027\017\011\020\007\021\047" +
    "\022\036\023\053\024\046\025\025\026\062\027\030\030" +
    "\006\031\063\032\024\033\020\034\005\035\071\036\034" +
    "\037\054\040\015\041\004\042\042\043\040\044\065\045" +
    "\044\046\072\047\050\050\012\051\013\052\023\053\043" +
    "\054\064\063\033\066\014\067\032\070\031\071\035\072" +
    "\037\073\021\074\067\075\055\076\056\077\017\100\016" +
    "\101\051\102\045\103\041\104\052\105\060\106\026\107" +
    "\010\110\066\001\002\000\044\004\107\005\111\007\177" +
    "\010\076\012\102\013\112\014\110\015\113\016\106\055" +
    "\114\056\104\057\105\060\100\061\103\062\101\064\075" +
    "\065\115\001\002\000\214\002\uffc0\004\uffc0\005\uffc0\006" +
    "\uffc0\007\uffc0\010\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0" +
    "\016\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024" +
    "\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0" +
    "\033\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041" +
    "\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0" +
    "\050\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0\056" +
    "\uffc0\057\uffc0\060\uffc0\061\uffc0\062\uffc0\063\uffc0\064\uffc0" +
    "\065\uffc0\066\uffc0\067\uffc0\070\uffc0\071\uffc0\072\uffc0\073" +
    "\uffc0\074\uffc0\075\uffc0\076\uffc0\077\uffc0\100\uffc0\101\uffc0" +
    "\102\uffc0\103\uffc0\104\uffc0\105\uffc0\106\uffc0\107\uffc0\110" +
    "\uffc0\001\002\000\152\006\022\010\027\017\011\020\007" +
    "\021\047\022\036\023\053\024\046\025\025\026\062\027" +
    "\030\030\006\031\063\032\024\033\020\034\005\035\071" +
    "\036\034\037\054\040\015\041\004\042\042\043\040\044" +
    "\065\045\044\046\072\047\050\050\012\051\013\052\023" +
    "\053\043\054\064\063\033\066\014\067\032\070\031\071" +
    "\035\072\037\073\021\074\067\075\055\076\056\077\017" +
    "\100\016\101\051\102\045\103\041\104\052\105\060\106" +
    "\026\107\010\110\066\001\002\000\044\004\107\005\111" +
    "\007\202\010\076\012\102\013\112\014\110\015\113\016" +
    "\106\055\114\056\104\057\105\060\100\061\103\062\101" +
    "\064\075\065\115\001\002\000\214\002\uffbf\004\uffbf\005" +
    "\uffbf\006\uffbf\007\uffbf\010\uffbf\012\uffbf\013\uffbf\014\uffbf" +
    "\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023" +
    "\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf" +
    "\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040" +
    "\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf" +
    "\047\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf\054\uffbf\055" +
    "\uffbf\056\uffbf\057\uffbf\060\uffbf\061\uffbf\062\uffbf\063\uffbf" +
    "\064\uffbf\065\uffbf\066\uffbf\067\uffbf\070\uffbf\071\uffbf\072" +
    "\uffbf\073\uffbf\074\uffbf\075\uffbf\076\uffbf\077\uffbf\100\uffbf" +
    "\101\uffbf\102\uffbf\103\uffbf\104\uffbf\105\uffbf\106\uffbf\107" +
    "\uffbf\110\uffbf\001\002\000\152\006\022\010\027\017\011" +
    "\020\007\021\047\022\036\023\053\024\046\025\025\026" +
    "\062\027\030\030\006\031\063\032\024\033\020\034\005" +
    "\035\071\036\034\037\054\040\015\041\004\042\042\043" +
    "\040\044\065\045\044\046\072\047\050\050\012\051\013" +
    "\052\023\053\043\054\064\063\033\066\014\067\032\070" +
    "\031\071\035\072\037\073\021\074\067\075\055\076\056" +
    "\077\017\100\016\101\051\102\045\103\041\104\052\105" +
    "\060\106\026\107\010\110\066\001\002\000\044\004\107" +
    "\005\111\007\205\010\076\012\102\013\112\014\110\015" +
    "\113\016\106\055\114\056\104\057\105\060\100\061\103" +
    "\062\101\064\075\065\115\001\002\000\214\002\uffbe\004" +
    "\uffbe\005\uffbe\006\uffbe\007\uffbe\010\uffbe\012\uffbe\013\uffbe" +
    "\014\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022" +
    "\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe" +
    "\031\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037" +
    "\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe" +
    "\046\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe\054" +
    "\uffbe\055\uffbe\056\uffbe\057\uffbe\060\uffbe\061\uffbe\062\uffbe" +
    "\063\uffbe\064\uffbe\065\uffbe\066\uffbe\067\uffbe\070\uffbe\071" +
    "\uffbe\072\uffbe\073\uffbe\074\uffbe\075\uffbe\076\uffbe\077\uffbe" +
    "\100\uffbe\101\uffbe\102\uffbe\103\uffbe\104\uffbe\105\uffbe\106" +
    "\uffbe\107\uffbe\110\uffbe\001\002\000\152\006\022\010\027" +
    "\017\011\020\007\021\047\022\036\023\053\024\046\025" +
    "\025\026\062\027\030\030\006\031\063\032\024\033\020" +
    "\034\005\035\071\036\034\037\054\040\015\041\004\042" +
    "\042\043\040\044\065\045\044\046\072\047\050\050\012" +
    "\051\013\052\023\053\043\054\064\063\033\066\014\067" +
    "\032\070\031\071\035\072\037\073\021\074\067\075\055" +
    "\076\056\077\017\100\016\101\051\102\045\103\041\104" +
    "\052\105\060\106\026\107\010\110\066\001\002\000\040" +
    "\007\210\010\076\012\102\013\112\014\110\015\113\016" +
    "\106\055\114\056\104\057\105\060\100\061\103\062\101" +
    "\064\075\065\115\001\002\000\214\002\uffbd\004\uffbd\005" +
    "\uffbd\006\uffbd\007\uffbd\010\uffbd\012\uffbd\013\uffbd\014\uffbd" +
    "\015\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023" +
    "\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd" +
    "\032\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040" +
    "\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd" +
    "\047\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055" +
    "\uffbd\056\uffbd\057\uffbd\060\uffbd\061\uffbd\062\uffbd\063\uffbd" +
    "\064\uffbd\065\uffbd\066\uffbd\067\uffbd\070\uffbd\071\uffbd\072" +
    "\uffbd\073\uffbd\074\uffbd\075\uffbd\076\uffbd\077\uffbd\100\uffbd" +
    "\101\uffbd\102\uffbd\103\uffbd\104\uffbd\105\uffbd\106\uffbd\107" +
    "\uffbd\110\uffbd\001\002\000\152\006\022\010\027\017\011" +
    "\020\007\021\047\022\036\023\053\024\046\025\025\026" +
    "\062\027\030\030\006\031\063\032\024\033\020\034\005" +
    "\035\071\036\034\037\054\040\015\041\004\042\042\043" +
    "\040\044\065\045\044\046\072\047\050\050\012\051\013" +
    "\052\023\053\043\054\064\063\033\066\014\067\032\070" +
    "\031\071\035\072\037\073\021\074\067\075\055\076\056" +
    "\077\017\100\016\101\051\102\045\103\041\104\052\105" +
    "\060\106\026\107\010\110\066\001\002\000\042\004\107" +
    "\005\111\010\076\012\102\013\112\014\110\015\113\016" +
    "\106\055\114\056\104\057\105\060\100\061\103\062\101" +
    "\064\075\065\115\001\002\000\152\006\022\010\027\017" +
    "\011\020\007\021\047\022\036\023\053\024\046\025\025" +
    "\026\062\027\030\030\006\031\063\032\024\033\020\034" +
    "\005\035\071\036\034\037\054\040\015\041\004\042\042" +
    "\043\040\044\065\045\044\046\072\047\050\050\012\051" +
    "\013\052\023\053\043\054\064\063\033\066\014\067\032" +
    "\070\031\071\035\072\037\073\021\074\067\075\055\076" +
    "\056\077\017\100\016\101\051\102\045\103\041\104\052" +
    "\105\060\106\026\107\010\110\066\001\002\000\040\007" +
    "\215\010\076\012\102\013\112\014\110\015\113\016\106" +
    "\055\114\056\104\057\105\060\100\061\103\062\101\064" +
    "\075\065\115\001\002\000\214\002\uffb0\004\uffb0\005\uffb0" +
    "\006\uffb0\007\uffb0\010\uffb0\012\uffb0\013\uffb0\014\uffb0\015" +
    "\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0" +
    "\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032" +
    "\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0" +
    "\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047" +
    "\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0\054\uffb0\055\uffb0" +
    "\056\uffb0\057\uffb0\060\uffb0\061\uffb0\062\uffb0\063\uffb0\064" +
    "\uffb0\065\uffb0\066\uffb0\067\uffb0\070\uffb0\071\uffb0\072\uffb0" +
    "\073\uffb0\074\uffb0\075\uffb0\076\uffb0\077\uffb0\100\uffb0\101" +
    "\uffb0\102\uffb0\103\uffb0\104\uffb0\105\uffb0\106\uffb0\107\uffb0" +
    "\110\uffb0\001\002\000\152\006\022\010\027\017\011\020" +
    "\007\021\047\022\036\023\053\024\046\025\025\026\062" +
    "\027\030\030\006\031\063\032\024\033\020\034\005\035" +
    "\071\036\034\037\054\040\015\041\004\042\042\043\040" +
    "\044\065\045\044\046\072\047\050\050\012\051\013\052" +
    "\023\053\043\054\064\063\033\066\014\067\032\070\031" +
    "\071\035\072\037\073\021\074\067\075\055\076\056\077" +
    "\017\100\016\101\051\102\045\103\041\104\052\105\060" +
    "\106\026\107\010\110\066\001\002\000\040\007\220\010" +
    "\076\012\102\013\112\014\110\015\113\016\106\055\114" +
    "\056\104\057\105\060\100\061\103\062\101\064\075\065" +
    "\115\001\002\000\214\002\uffd7\004\uffd7\005\uffd7\006\uffd7" +
    "\007\uffd7\010\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016" +
    "\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7" +
    "\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033" +
    "\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7" +
    "\042\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7\047\uffd7\050" +
    "\uffd7\051\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7\056\uffd7" +
    "\057\uffd7\060\uffd7\061\uffd7\062\uffd7\063\uffd7\064\uffd7\065" +
    "\uffd7\066\uffd7\067\uffd7\070\uffd7\071\uffd7\072\uffd7\073\uffd7" +
    "\074\uffd7\075\uffd7\076\uffd7\077\uffd7\100\uffd7\101\uffd7\102" +
    "\uffd7\103\uffd7\104\uffd7\105\uffd7\106\uffd7\107\uffd7\110\uffd7" +
    "\001\002\000\152\006\022\010\027\017\011\020\007\021" +
    "\047\022\036\023\053\024\046\025\025\026\062\027\030" +
    "\030\006\031\063\032\024\033\020\034\005\035\071\036" +
    "\034\037\054\040\015\041\004\042\042\043\040\044\065" +
    "\045\044\046\072\047\050\050\012\051\013\052\023\053" +
    "\043\054\064\063\033\066\014\067\032\070\031\071\035" +
    "\072\037\073\021\074\067\075\055\076\056\077\017\100" +
    "\016\101\051\102\045\103\041\104\052\105\060\106\026" +
    "\107\010\110\066\001\002\000\040\007\223\010\076\012" +
    "\102\013\112\014\110\015\113\016\106\055\114\056\104" +
    "\057\105\060\100\061\103\062\101\064\075\065\115\001" +
    "\002\000\214\002\uffda\004\uffda\005\uffda\006\uffda\007\uffda" +
    "\010\uffda\012\uffda\013\uffda\014\uffda\015\uffda\016\uffda\017" +
    "\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda" +
    "\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda\034" +
    "\uffda\035\uffda\036\uffda\037\uffda\040\uffda\041\uffda\042\uffda" +
    "\043\uffda\044\uffda\045\uffda\046\uffda\047\uffda\050\uffda\051" +
    "\uffda\052\uffda\053\uffda\054\uffda\055\uffda\056\uffda\057\uffda" +
    "\060\uffda\061\uffda\062\uffda\063\uffda\064\uffda\065\uffda\066" +
    "\uffda\067\uffda\070\uffda\071\uffda\072\uffda\073\uffda\074\uffda" +
    "\075\uffda\076\uffda\077\uffda\100\uffda\101\uffda\102\uffda\103" +
    "\uffda\104\uffda\105\uffda\106\uffda\107\uffda\110\uffda\001\002" +
    "\000\152\006\022\010\027\017\011\020\007\021\047\022" +
    "\036\023\053\024\046\025\025\026\062\027\030\030\006" +
    "\031\063\032\024\033\020\034\005\035\071\036\034\037" +
    "\054\040\015\041\004\042\042\043\040\044\065\045\044" +
    "\046\072\047\050\050\012\051\013\052\023\053\043\054" +
    "\064\063\033\066\014\067\032\070\031\071\035\072\037" +
    "\073\021\074\067\075\055\076\056\077\017\100\016\101" +
    "\051\102\045\103\041\104\052\105\060\106\026\107\010" +
    "\110\066\001\002\000\040\007\226\010\076\012\102\013" +
    "\112\014\110\015\113\016\106\055\114\056\104\057\105" +
    "\060\100\061\103\062\101\064\075\065\115\001\002\000" +
    "\214\002\uffb8\004\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8" +
    "\012\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\020" +
    "\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8" +
    "\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035" +
    "\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8" +
    "\044\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\052" +
    "\uffb8\053\uffb8\054\uffb8\055\uffb8\056\uffb8\057\uffb8\060\uffb8" +
    "\061\uffb8\062\uffb8\063\uffb8\064\uffb8\065\uffb8\066\uffb8\067" +
    "\uffb8\070\uffb8\071\uffb8\072\uffb8\073\uffb8\074\uffb8\075\uffb8" +
    "\076\uffb8\077\uffb8\100\uffb8\101\uffb8\102\uffb8\103\uffb8\104" +
    "\uffb8\105\uffb8\106\uffb8\107\uffb8\110\uffb8\001\002\000\152" +
    "\006\022\010\027\017\011\020\007\021\047\022\036\023" +
    "\053\024\046\025\025\026\062\027\030\030\006\031\063" +
    "\032\024\033\020\034\005\035\071\036\034\037\054\040" +
    "\015\041\004\042\042\043\040\044\065\045\044\046\072" +
    "\047\050\050\012\051\013\052\023\053\043\054\064\063" +
    "\033\066\014\067\032\070\031\071\035\072\037\073\021" +
    "\074\067\075\055\076\056\077\017\100\016\101\051\102" +
    "\045\103\041\104\052\105\060\106\026\107\010\110\066" +
    "\001\002\000\040\007\231\010\076\012\102\013\112\014" +
    "\110\015\113\016\106\055\114\056\104\057\105\060\100" +
    "\061\103\062\101\064\075\065\115\001\002\000\214\002" +
    "\uffb9\004\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9\012\uffb9" +
    "\013\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021" +
    "\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9" +
    "\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036" +
    "\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9" +
    "\045\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053" +
    "\uffb9\054\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9\061\uffb9" +
    "\062\uffb9\063\uffb9\064\uffb9\065\uffb9\066\uffb9\067\uffb9\070" +
    "\uffb9\071\uffb9\072\uffb9\073\uffb9\074\uffb9\075\uffb9\076\uffb9" +
    "\077\uffb9\100\uffb9\101\uffb9\102\uffb9\103\uffb9\104\uffb9\105" +
    "\uffb9\106\uffb9\107\uffb9\110\uffb9\001\002\000\152\006\022" +
    "\010\027\017\011\020\007\021\047\022\036\023\053\024" +
    "\046\025\025\026\062\027\030\030\006\031\063\032\024" +
    "\033\020\034\005\035\071\036\034\037\054\040\015\041" +
    "\004\042\042\043\040\044\065\045\044\046\072\047\050" +
    "\050\012\051\013\052\023\053\043\054\064\063\033\066" +
    "\014\067\032\070\031\071\035\072\037\073\021\074\067" +
    "\075\055\076\056\077\017\100\016\101\051\102\045\103" +
    "\041\104\052\105\060\106\026\107\010\110\066\001\002" +
    "\000\042\004\107\005\111\010\076\012\102\013\112\014" +
    "\110\015\113\016\106\055\114\056\104\057\105\060\100" +
    "\061\103\062\101\064\075\065\115\001\002\000\152\006" +
    "\022\010\027\017\011\020\007\021\047\022\036\023\053" +
    "\024\046\025\025\026\062\027\030\030\006\031\063\032" +
    "\024\033\020\034\005\035\071\036\034\037\054\040\015" +
    "\041\004\042\042\043\040\044\065\045\044\046\072\047" +
    "\050\050\012\051\013\052\023\053\043\054\064\063\033" +
    "\066\014\067\032\070\031\071\035\072\037\073\021\074" +
    "\067\075\055\076\056\077\017\100\016\101\051\102\045" +
    "\103\041\104\052\105\060\106\026\107\010\110\066\001" +
    "\002\000\044\004\107\005\111\007\236\010\076\012\102" +
    "\013\112\014\110\015\113\016\106\055\114\056\104\057" +
    "\105\060\100\061\103\062\101\064\075\065\115\001\002" +
    "\000\214\002\uffb4\004\uffb4\005\uffb4\006\uffb4\007\uffb4\010" +
    "\uffb4\012\uffb4\013\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4" +
    "\020\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026" +
    "\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4" +
    "\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043" +
    "\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4" +
    "\052\uffb4\053\uffb4\054\uffb4\055\uffb4\056\uffb4\057\uffb4\060" +
    "\uffb4\061\uffb4\062\uffb4\063\uffb4\064\uffb4\065\uffb4\066\uffb4" +
    "\067\uffb4\070\uffb4\071\uffb4\072\uffb4\073\uffb4\074\uffb4\075" +
    "\uffb4\076\uffb4\077\uffb4\100\uffb4\101\uffb4\102\uffb4\103\uffb4" +
    "\104\uffb4\105\uffb4\106\uffb4\107\uffb4\110\uffb4\001\002\000" +
    "\152\006\022\010\027\017\011\020\007\021\047\022\036" +
    "\023\053\024\046\025\025\026\062\027\030\030\006\031" +
    "\063\032\024\033\020\034\005\035\071\036\034\037\054" +
    "\040\015\041\004\042\042\043\040\044\065\045\044\046" +
    "\072\047\050\050\012\051\013\052\023\053\043\054\064" +
    "\063\033\066\014\067\032\070\031\071\035\072\037\073" +
    "\021\074\067\075\055\076\056\077\017\100\016\101\051" +
    "\102\045\103\041\104\052\105\060\106\026\107\010\110" +
    "\066\001\002\000\040\007\241\010\076\012\102\013\112" +
    "\014\110\015\113\016\106\055\114\056\104\057\105\060" +
    "\100\061\103\062\101\064\075\065\115\001\002\000\214" +
    "\002\uffb3\004\uffb3\005\uffb3\006\uffb3\007\uffb3\010\uffb3\012" +
    "\uffb3\013\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3" +
    "\021\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027" +
    "\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3" +
    "\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044" +
    "\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3" +
    "\053\uffb3\054\uffb3\055\uffb3\056\uffb3\057\uffb3\060\uffb3\061" +
    "\uffb3\062\uffb3\063\uffb3\064\uffb3\065\uffb3\066\uffb3\067\uffb3" +
    "\070\uffb3\071\uffb3\072\uffb3\073\uffb3\074\uffb3\075\uffb3\076" +
    "\uffb3\077\uffb3\100\uffb3\101\uffb3\102\uffb3\103\uffb3\104\uffb3" +
    "\105\uffb3\106\uffb3\107\uffb3\110\uffb3\001\002\000\152\006" +
    "\022\010\027\017\011\020\007\021\047\022\036\023\053" +
    "\024\046\025\025\026\062\027\030\030\006\031\063\032" +
    "\024\033\020\034\005\035\071\036\034\037\054\040\015" +
    "\041\004\042\042\043\040\044\065\045\044\046\072\047" +
    "\050\050\012\051\013\052\023\053\043\054\064\063\033" +
    "\066\014\067\032\070\031\071\035\072\037\073\021\074" +
    "\067\075\055\076\056\077\017\100\016\101\051\102\045" +
    "\103\041\104\052\105\060\106\026\107\010\110\066\001" +
    "\002\000\040\007\244\010\076\012\102\013\112\014\110" +
    "\015\113\016\106\055\114\056\104\057\105\060\100\061" +
    "\103\062\101\064\075\065\115\001\002\000\214\002\uffdd" +
    "\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd\012\uffdd\013" +
    "\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd" +
    "\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030" +
    "\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd" +
    "\037\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\045" +
    "\uffdd\046\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd" +
    "\054\uffdd\055\uffdd\056\uffdd\057\uffdd\060\uffdd\061\uffdd\062" +
    "\uffdd\063\uffdd\064\uffdd\065\uffdd\066\uffdd\067\uffdd\070\uffdd" +
    "\071\uffdd\072\uffdd\073\uffdd\074\uffdd\075\uffdd\076\uffdd\077" +
    "\uffdd\100\uffdd\101\uffdd\102\uffdd\103\uffdd\104\uffdd\105\uffdd" +
    "\106\uffdd\107\uffdd\110\uffdd\001\002\000\152\006\022\010" +
    "\027\017\011\020\007\021\047\022\036\023\053\024\046" +
    "\025\025\026\062\027\030\030\006\031\063\032\024\033" +
    "\020\034\005\035\071\036\034\037\054\040\015\041\004" +
    "\042\042\043\040\044\065\045\044\046\072\047\050\050" +
    "\012\051\013\052\023\053\043\054\064\063\033\066\014" +
    "\067\032\070\031\071\035\072\037\073\021\074\067\075" +
    "\055\076\056\077\017\100\016\101\051\102\045\103\041" +
    "\104\052\105\060\106\026\107\010\110\066\001\002\000" +
    "\040\007\247\010\076\012\102\013\112\014\110\015\113" +
    "\016\106\055\114\056\104\057\105\060\100\061\103\062" +
    "\101\064\075\065\115\001\002\000\214\002\uffb6\004\uffb6" +
    "\005\uffb6\006\uffb6\007\uffb6\010\uffb6\012\uffb6\013\uffb6\014" +
    "\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6" +
    "\023\uffb6\024\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6\031" +
    "\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6" +
    "\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\046" +
    "\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6" +
    "\055\uffb6\056\uffb6\057\uffb6\060\uffb6\061\uffb6\062\uffb6\063" +
    "\uffb6\064\uffb6\065\uffb6\066\uffb6\067\uffb6\070\uffb6\071\uffb6" +
    "\072\uffb6\073\uffb6\074\uffb6\075\uffb6\076\uffb6\077\uffb6\100" +
    "\uffb6\101\uffb6\102\uffb6\103\uffb6\104\uffb6\105\uffb6\106\uffb6" +
    "\107\uffb6\110\uffb6\001\002\000\152\006\022\010\027\017" +
    "\011\020\007\021\047\022\036\023\053\024\046\025\025" +
    "\026\062\027\030\030\006\031\063\032\024\033\020\034" +
    "\005\035\071\036\034\037\054\040\015\041\004\042\042" +
    "\043\040\044\065\045\044\046\072\047\050\050\012\051" +
    "\013\052\023\053\043\054\064\063\033\066\014\067\032" +
    "\070\031\071\035\072\037\073\021\074\067\075\055\076" +
    "\056\077\017\100\016\101\051\102\045\103\041\104\052" +
    "\105\060\106\026\107\010\110\066\001\002\000\042\004" +
    "\107\005\111\010\076\012\102\013\112\014\110\015\113" +
    "\016\106\055\114\056\104\057\105\060\100\061\103\062" +
    "\101\064\075\065\115\001\002\000\152\006\022\010\027" +
    "\017\011\020\007\021\047\022\036\023\053\024\046\025" +
    "\025\026\062\027\030\030\006\031\063\032\024\033\020" +
    "\034\005\035\071\036\034\037\054\040\015\041\004\042" +
    "\042\043\040\044\065\045\044\046\072\047\050\050\012" +
    "\051\013\052\023\053\043\054\064\063\033\066\014\067" +
    "\032\070\031\071\035\072\037\073\021\074\067\075\055" +
    "\076\056\077\017\100\016\101\051\102\045\103\041\104" +
    "\052\105\060\106\026\107\010\110\066\001\002\000\042" +
    "\004\107\005\111\010\076\012\102\013\112\014\110\015" +
    "\113\016\106\055\114\056\104\057\105\060\100\061\103" +
    "\062\101\064\075\065\115\001\002\000\152\006\022\010" +
    "\027\017\011\020\007\021\047\022\036\023\053\024\046" +
    "\025\025\026\062\027\030\030\006\031\063\032\024\033" +
    "\020\034\005\035\071\036\034\037\054\040\015\041\004" +
    "\042\042\043\040\044\065\045\044\046\072\047\050\050" +
    "\012\051\013\052\023\053\043\054\064\063\033\066\014" +
    "\067\032\070\031\071\035\072\037\073\021\074\067\075" +
    "\055\076\056\077\017\100\016\101\051\102\045\103\041" +
    "\104\052\105\060\106\026\107\010\110\066\001\002\000" +
    "\044\004\107\005\111\007\256\010\076\012\102\013\112" +
    "\014\110\015\113\016\106\055\114\056\104\057\105\060" +
    "\100\061\103\062\101\064\075\065\115\001\002\000\214" +
    "\002\uffa3\004\uffa3\005\uffa3\006\uffa3\007\uffa3\010\uffa3\012" +
    "\uffa3\013\uffa3\014\uffa3\015\uffa3\016\uffa3\017\uffa3\020\uffa3" +
    "\021\uffa3\022\uffa3\023\uffa3\024\uffa3\025\uffa3\026\uffa3\027" +
    "\uffa3\030\uffa3\031\uffa3\032\uffa3\033\uffa3\034\uffa3\035\uffa3" +
    "\036\uffa3\037\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3\044" +
    "\uffa3\045\uffa3\046\uffa3\047\uffa3\050\uffa3\051\uffa3\052\uffa3" +
    "\053\uffa3\054\uffa3\055\uffa3\056\uffa3\057\uffa3\060\uffa3\061" +
    "\uffa3\062\uffa3\063\uffa3\064\uffa3\065\uffa3\066\uffa3\067\uffa3" +
    "\070\uffa3\071\uffa3\072\uffa3\073\uffa3\074\uffa3\075\uffa3\076" +
    "\uffa3\077\uffa3\100\uffa3\101\uffa3\102\uffa3\103\uffa3\104\uffa3" +
    "\105\uffa3\106\uffa3\107\uffa3\110\uffa3\001\002\000\152\006" +
    "\022\010\027\017\011\020\007\021\047\022\036\023\053" +
    "\024\046\025\025\026\062\027\030\030\006\031\063\032" +
    "\024\033\020\034\005\035\071\036\034\037\054\040\015" +
    "\041\004\042\042\043\040\044\065\045\044\046\072\047" +
    "\050\050\012\051\013\052\023\053\043\054\064\063\033" +
    "\066\014\067\032\070\031\071\035\072\037\073\021\074" +
    "\067\075\055\076\056\077\017\100\016\101\051\102\045" +
    "\103\041\104\052\105\060\106\026\107\010\110\066\001" +
    "\002\000\040\007\261\010\076\012\102\013\112\014\110" +
    "\015\113\016\106\055\114\056\104\057\105\060\100\061" +
    "\103\062\101\064\075\065\115\001\002\000\214\002\uffa2" +
    "\004\uffa2\005\uffa2\006\uffa2\007\uffa2\010\uffa2\012\uffa2\013" +
    "\uffa2\014\uffa2\015\uffa2\016\uffa2\017\uffa2\020\uffa2\021\uffa2" +
    "\022\uffa2\023\uffa2\024\uffa2\025\uffa2\026\uffa2\027\uffa2\030" +
    "\uffa2\031\uffa2\032\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2" +
    "\037\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2\044\uffa2\045" +
    "\uffa2\046\uffa2\047\uffa2\050\uffa2\051\uffa2\052\uffa2\053\uffa2" +
    "\054\uffa2\055\uffa2\056\uffa2\057\uffa2\060\uffa2\061\uffa2\062" +
    "\uffa2\063\uffa2\064\uffa2\065\uffa2\066\uffa2\067\uffa2\070\uffa2" +
    "\071\uffa2\072\uffa2\073\uffa2\074\uffa2\075\uffa2\076\uffa2\077" +
    "\uffa2\100\uffa2\101\uffa2\102\uffa2\103\uffa2\104\uffa2\105\uffa2" +
    "\106\uffa2\107\uffa2\110\uffa2\001\002\000\152\006\022\010" +
    "\027\017\011\020\007\021\047\022\036\023\053\024\046" +
    "\025\025\026\062\027\030\030\006\031\063\032\024\033" +
    "\020\034\005\035\071\036\034\037\054\040\015\041\004" +
    "\042\042\043\040\044\065\045\044\046\072\047\050\050" +
    "\012\051\013\052\023\053\043\054\064\063\033\066\014" +
    "\067\032\070\031\071\035\072\037\073\021\074\067\075" +
    "\055\076\056\077\017\100\016\101\051\102\045\103\041" +
    "\104\052\105\060\106\026\107\010\110\066\001\002\000" +
    "\040\007\264\010\076\012\102\013\112\014\110\015\113" +
    "\016\106\055\114\056\104\057\105\060\100\061\103\062" +
    "\101\064\075\065\115\001\002\000\214\002\uffdf\004\uffdf" +
    "\005\uffdf\006\uffdf\007\uffdf\010\uffdf\012\uffdf\013\uffdf\014" +
    "\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf" +
    "\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031" +
    "\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf" +
    "\040\uffdf\041\uffdf\042\uffdf\043\uffdf\044\uffdf\045\uffdf\046" +
    "\uffdf\047\uffdf\050\uffdf\051\uffdf\052\uffdf\053\uffdf\054\uffdf" +
    "\055\uffdf\056\uffdf\057\uffdf\060\uffdf\061\uffdf\062\uffdf\063" +
    "\uffdf\064\uffdf\065\uffdf\066\uffdf\067\uffdf\070\uffdf\071\uffdf" +
    "\072\uffdf\073\uffdf\074\uffdf\075\uffdf\076\uffdf\077\uffdf\100" +
    "\uffdf\101\uffdf\102\uffdf\103\uffdf\104\uffdf\105\uffdf\106\uffdf" +
    "\107\uffdf\110\uffdf\001\002\000\152\006\022\010\027\017" +
    "\011\020\007\021\047\022\036\023\053\024\046\025\025" +
    "\026\062\027\030\030\006\031\063\032\024\033\020\034" +
    "\005\035\071\036\034\037\054\040\015\041\004\042\042" +
    "\043\040\044\065\045\044\046\072\047\050\050\012\051" +
    "\013\052\023\053\043\054\064\063\033\066\014\067\032" +
    "\070\031\071\035\072\037\073\021\074\067\075\055\076" +
    "\056\077\017\100\016\101\051\102\045\103\041\104\052" +
    "\105\060\106\026\107\010\110\066\001\002\000\040\007" +
    "\267\010\076\012\102\013\112\014\110\015\113\016\106" +
    "\055\114\056\104\057\105\060\100\061\103\062\101\064" +
    "\075\065\115\001\002\000\214\002\uffdc\004\uffdc\005\uffdc" +
    "\006\uffdc\007\uffdc\010\uffdc\012\uffdc\013\uffdc\014\uffdc\015" +
    "\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc" +
    "\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032" +
    "\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc" +
    "\041\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc\047" +
    "\uffdc\050\uffdc\051\uffdc\052\uffdc\053\uffdc\054\uffdc\055\uffdc" +
    "\056\uffdc\057\uffdc\060\uffdc\061\uffdc\062\uffdc\063\uffdc\064" +
    "\uffdc\065\uffdc\066\uffdc\067\uffdc\070\uffdc\071\uffdc\072\uffdc" +
    "\073\uffdc\074\uffdc\075\uffdc\076\uffdc\077\uffdc\100\uffdc\101" +
    "\uffdc\102\uffdc\103\uffdc\104\uffdc\105\uffdc\106\uffdc\107\uffdc" +
    "\110\uffdc\001\002\000\152\006\022\010\027\017\011\020" +
    "\007\021\047\022\036\023\053\024\046\025\025\026\062" +
    "\027\030\030\006\031\063\032\024\033\020\034\005\035" +
    "\071\036\034\037\054\040\015\041\004\042\042\043\040" +
    "\044\065\045\044\046\072\047\050\050\012\051\013\052" +
    "\023\053\043\054\064\063\033\066\014\067\032\070\031" +
    "\071\035\072\037\073\021\074\067\075\055\076\056\077" +
    "\017\100\016\101\051\102\045\103\041\104\052\105\060" +
    "\106\026\107\010\110\066\001\002\000\042\004\107\005" +
    "\111\010\076\012\102\013\112\014\110\015\113\016\106" +
    "\055\114\056\104\057\105\060\100\061\103\062\101\064" +
    "\075\065\115\001\002\000\152\006\022\010\027\017\011" +
    "\020\007\021\047\022\036\023\053\024\046\025\025\026" +
    "\062\027\030\030\006\031\063\032\024\033\020\034\005" +
    "\035\071\036\034\037\054\040\015\041\004\042\042\043" +
    "\040\044\065\045\044\046\072\047\050\050\012\051\013" +
    "\052\023\053\043\054\064\063\033\066\014\067\032\070" +
    "\031\071\035\072\037\073\021\074\067\075\055\076\056" +
    "\077\017\100\016\101\051\102\045\103\041\104\052\105" +
    "\060\106\026\107\010\110\066\001\002\000\042\004\107" +
    "\005\111\010\076\012\102\013\112\014\110\015\113\016" +
    "\106\055\114\056\104\057\105\060\100\061\103\062\101" +
    "\064\075\065\115\001\002\000\152\006\022\010\027\017" +
    "\011\020\007\021\047\022\036\023\053\024\046\025\025" +
    "\026\062\027\030\030\006\031\063\032\024\033\020\034" +
    "\005\035\071\036\034\037\054\040\015\041\004\042\042" +
    "\043\040\044\065\045\044\046\072\047\050\050\012\051" +
    "\013\052\023\053\043\054\064\063\033\066\014\067\032" +
    "\070\031\071\035\072\037\073\021\074\067\075\055\076" +
    "\056\077\017\100\016\101\051\102\045\103\041\104\052" +
    "\105\060\106\026\107\010\110\066\001\002\000\040\007" +
    "\276\010\076\012\102\013\112\014\110\015\113\016\106" +
    "\055\114\056\104\057\105\060\100\061\103\062\101\064" +
    "\075\065\115\001\002\000\214\002\uffb1\004\uffb1\005\uffb1" +
    "\006\uffb1\007\uffb1\010\uffb1\012\uffb1\013\uffb1\014\uffb1\015" +
    "\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1" +
    "\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\032" +
    "\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1" +
    "\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1\047" +
    "\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1" +
    "\056\uffb1\057\uffb1\060\uffb1\061\uffb1\062\uffb1\063\uffb1\064" +
    "\uffb1\065\uffb1\066\uffb1\067\uffb1\070\uffb1\071\uffb1\072\uffb1" +
    "\073\uffb1\074\uffb1\075\uffb1\076\uffb1\077\uffb1\100\uffb1\101" +
    "\uffb1\102\uffb1\103\uffb1\104\uffb1\105\uffb1\106\uffb1\107\uffb1" +
    "\110\uffb1\001\002\000\152\006\022\010\027\017\011\020" +
    "\007\021\047\022\036\023\053\024\046\025\025\026\062" +
    "\027\030\030\006\031\063\032\024\033\020\034\005\035" +
    "\071\036\034\037\054\040\015\041\004\042\042\043\040" +
    "\044\065\045\044\046\072\047\050\050\012\051\013\052" +
    "\023\053\043\054\064\063\033\066\014\067\032\070\031" +
    "\071\035\072\037\073\021\074\067\075\055\076\056\077" +
    "\017\100\016\101\051\102\045\103\041\104\052\105\060" +
    "\106\026\107\010\110\066\001\002\000\042\004\107\005" +
    "\111\010\076\012\102\013\112\014\110\015\113\016\106" +
    "\055\114\056\104\057\105\060\100\061\103\062\101\064" +
    "\075\065\115\001\002\000\152\006\022\010\027\017\011" +
    "\020\007\021\047\022\036\023\053\024\046\025\025\026" +
    "\062\027\030\030\006\031\063\032\024\033\020\034\005" +
    "\035\071\036\034\037\054\040\015\041\004\042\042\043" +
    "\040\044\065\045\044\046\072\047\050\050\012\051\013" +
    "\052\023\053\043\054\064\063\033\066\014\067\032\070" +
    "\031\071\035\072\037\073\021\074\067\075\055\076\056" +
    "\077\017\100\016\101\051\102\045\103\041\104\052\105" +
    "\060\106\026\107\010\110\066\001\002\000\040\007\303" +
    "\010\076\012\102\013\112\014\110\015\113\016\106\055" +
    "\114\056\104\057\105\060\100\061\103\062\101\064\075" +
    "\065\115\001\002\000\214\002\uffa7\004\uffa7\005\uffa7\006" +
    "\uffa7\007\uffa7\010\uffa7\012\uffa7\013\uffa7\014\uffa7\015\uffa7" +
    "\016\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7\024" +
    "\uffa7\025\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7" +
    "\033\uffa7\034\uffa7\035\uffa7\036\uffa7\037\uffa7\040\uffa7\041" +
    "\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7\047\uffa7" +
    "\050\uffa7\051\uffa7\052\uffa7\053\uffa7\054\uffa7\055\uffa7\056" +
    "\uffa7\057\uffa7\060\uffa7\061\uffa7\062\uffa7\063\uffa7\064\uffa7" +
    "\065\uffa7\066\uffa7\067\uffa7\070\uffa7\071\uffa7\072\uffa7\073" +
    "\uffa7\074\uffa7\075\uffa7\076\uffa7\077\uffa7\100\uffa7\101\uffa7" +
    "\102\uffa7\103\uffa7\104\uffa7\105\uffa7\106\uffa7\107\uffa7\110" +
    "\uffa7\001\002\000\152\006\022\010\027\017\011\020\007" +
    "\021\047\022\036\023\053\024\046\025\025\026\062\027" +
    "\030\030\006\031\063\032\024\033\020\034\005\035\071" +
    "\036\034\037\054\040\015\041\004\042\042\043\040\044" +
    "\065\045\044\046\072\047\050\050\012\051\013\052\023" +
    "\053\043\054\064\063\033\066\014\067\032\070\031\071" +
    "\035\072\037\073\021\074\067\075\055\076\056\077\017" +
    "\100\016\101\051\102\045\103\041\104\052\105\060\106" +
    "\026\107\010\110\066\001\002\000\042\004\107\005\111" +
    "\010\076\012\102\013\112\014\110\015\113\016\106\055" +
    "\114\056\104\057\105\060\100\061\103\062\101\064\075" +
    "\065\115\001\002\000\152\006\022\010\027\017\011\020" +
    "\007\021\047\022\036\023\053\024\046\025\025\026\062" +
    "\027\030\030\006\031\063\032\024\033\020\034\005\035" +
    "\071\036\034\037\054\040\015\041\004\042\042\043\040" +
    "\044\065\045\044\046\072\047\050\050\012\051\013\052" +
    "\023\053\043\054\064\063\033\066\014\067\032\070\031" +
    "\071\035\072\037\073\021\074\067\075\055\076\056\077" +
    "\017\100\016\101\051\102\045\103\041\104\052\105\060" +
    "\106\026\107\010\110\066\001\002\000\040\007\310\010" +
    "\076\012\102\013\112\014\110\015\113\016\106\055\114" +
    "\056\104\057\105\060\100\061\103\062\101\064\075\065" +
    "\115\001\002\000\214\002\uffb2\004\uffb2\005\uffb2\006\uffb2" +
    "\007\uffb2\010\uffb2\012\uffb2\013\uffb2\014\uffb2\015\uffb2\016" +
    "\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2" +
    "\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033" +
    "\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2" +
    "\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2\050" +
    "\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\055\uffb2\056\uffb2" +
    "\057\uffb2\060\uffb2\061\uffb2\062\uffb2\063\uffb2\064\uffb2\065" +
    "\uffb2\066\uffb2\067\uffb2\070\uffb2\071\uffb2\072\uffb2\073\uffb2" +
    "\074\uffb2\075\uffb2\076\uffb2\077\uffb2\100\uffb2\101\uffb2\102" +
    "\uffb2\103\uffb2\104\uffb2\105\uffb2\106\uffb2\107\uffb2\110\uffb2" +
    "\001\002\000\152\006\022\010\027\017\011\020\007\021" +
    "\047\022\036\023\053\024\046\025\025\026\062\027\030" +
    "\030\006\031\063\032\024\033\020\034\005\035\071\036" +
    "\034\037\054\040\015\041\004\042\042\043\040\044\065" +
    "\045\044\046\072\047\050\050\012\051\013\052\023\053" +
    "\043\054\064\063\033\066\014\067\032\070\031\071\035" +
    "\072\037\073\021\074\067\075\055\076\056\077\017\100" +
    "\016\101\051\102\045\103\041\104\052\105\060\106\026" +
    "\107\010\110\066\001\002\000\040\007\313\010\076\012" +
    "\102\013\112\014\110\015\113\016\106\055\114\056\104" +
    "\057\105\060\100\061\103\062\101\064\075\065\115\001" +
    "\002\000\214\002\uffbc\004\uffbc\005\uffbc\006\uffbc\007\uffbc" +
    "\010\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc\017" +
    "\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc" +
    "\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034" +
    "\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc" +
    "\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc\051" +
    "\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc\057\uffbc" +
    "\060\uffbc\061\uffbc\062\uffbc\063\uffbc\064\uffbc\065\uffbc\066" +
    "\uffbc\067\uffbc\070\uffbc\071\uffbc\072\uffbc\073\uffbc\074\uffbc" +
    "\075\uffbc\076\uffbc\077\uffbc\100\uffbc\101\uffbc\102\uffbc\103" +
    "\uffbc\104\uffbc\105\uffbc\106\uffbc\107\uffbc\110\uffbc\001\002" +
    "\000\152\006\022\010\027\017\011\020\007\021\047\022" +
    "\036\023\053\024\046\025\025\026\062\027\030\030\006" +
    "\031\063\032\024\033\020\034\005\035\071\036\034\037" +
    "\054\040\015\041\004\042\042\043\040\044\065\045\044" +
    "\046\072\047\050\050\012\051\013\052\023\053\043\054" +
    "\064\063\033\066\014\067\032\070\031\071\035\072\037" +
    "\073\021\074\067\075\055\076\056\077\017\100\016\101" +
    "\051\102\045\103\041\104\052\105\060\106\026\107\010" +
    "\110\066\001\002\000\040\007\316\010\076\012\102\013" +
    "\112\014\110\015\113\016\106\055\114\056\104\057\105" +
    "\060\100\061\103\062\101\064\075\065\115\001\002\000" +
    "\214\002\uffde\004\uffde\005\uffde\006\uffde\007\uffde\010\uffde" +
    "\012\uffde\013\uffde\014\uffde\015\uffde\016\uffde\017\uffde\020" +
    "\uffde\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde" +
    "\027\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde\035" +
    "\uffde\036\uffde\037\uffde\040\uffde\041\uffde\042\uffde\043\uffde" +
    "\044\uffde\045\uffde\046\uffde\047\uffde\050\uffde\051\uffde\052" +
    "\uffde\053\uffde\054\uffde\055\uffde\056\uffde\057\uffde\060\uffde" +
    "\061\uffde\062\uffde\063\uffde\064\uffde\065\uffde\066\uffde\067" +
    "\uffde\070\uffde\071\uffde\072\uffde\073\uffde\074\uffde\075\uffde" +
    "\076\uffde\077\uffde\100\uffde\101\uffde\102\uffde\103\uffde\104" +
    "\uffde\105\uffde\106\uffde\107\uffde\110\uffde\001\002\000\004" +
    "\007\320\001\002\000\214\002\ufff2\004\ufff2\005\ufff2\006" +
    "\ufff2\007\ufff2\010\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2" +
    "\016\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2\024" +
    "\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2" +
    "\033\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\041" +
    "\ufff2\042\ufff2\043\ufff2\044\ufff2\045\ufff2\046\ufff2\047\ufff2" +
    "\050\ufff2\051\ufff2\052\ufff2\053\ufff2\054\ufff2\055\ufff2\056" +
    "\ufff2\057\ufff2\060\ufff2\061\ufff2\062\ufff2\063\ufff2\064\ufff2" +
    "\065\ufff2\066\ufff2\067\ufff2\070\ufff2\071\ufff2\072\ufff2\073" +
    "\ufff2\074\ufff2\075\ufff2\076\ufff2\077\ufff2\100\ufff2\101\ufff2" +
    "\102\ufff2\103\ufff2\104\ufff2\105\ufff2\106\ufff2\107\ufff2\110" +
    "\ufff2\001\002\000\152\006\022\010\027\017\011\020\007" +
    "\021\047\022\036\023\053\024\046\025\025\026\062\027" +
    "\030\030\006\031\063\032\024\033\020\034\005\035\071" +
    "\036\034\037\054\040\015\041\004\042\042\043\040\044" +
    "\065\045\044\046\072\047\050\050\012\051\013\052\023" +
    "\053\043\054\064\063\033\066\014\067\032\070\031\071" +
    "\035\072\037\073\021\074\067\075\055\076\056\077\017" +
    "\100\016\101\051\102\045\103\041\104\052\105\060\106" +
    "\026\107\010\110\066\001\002\000\040\007\323\010\076" +
    "\012\102\013\112\014\110\015\113\016\106\055\114\056" +
    "\104\057\105\060\100\061\103\062\101\064\075\065\115" +
    "\001\002\000\214\002\uffa8\004\uffa8\005\uffa8\006\uffa8\007" +
    "\uffa8\010\uffa8\012\uffa8\013\uffa8\014\uffa8\015\uffa8\016\uffa8" +
    "\017\uffa8\020\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8\025" +
    "\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8" +
    "\034\uffa8\035\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8\042" +
    "\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8\050\uffa8" +
    "\051\uffa8\052\uffa8\053\uffa8\054\uffa8\055\uffa8\056\uffa8\057" +
    "\uffa8\060\uffa8\061\uffa8\062\uffa8\063\uffa8\064\uffa8\065\uffa8" +
    "\066\uffa8\067\uffa8\070\uffa8\071\uffa8\072\uffa8\073\uffa8\074" +
    "\uffa8\075\uffa8\076\uffa8\077\uffa8\100\uffa8\101\uffa8\102\uffa8" +
    "\103\uffa8\104\uffa8\105\uffa8\106\uffa8\107\uffa8\110\uffa8\001" +
    "\002\000\214\002\uffea\004\uffea\005\uffea\006\uffea\007\uffea" +
    "\010\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016\uffea\017" +
    "\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea" +
    "\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033\uffea\034" +
    "\uffea\035\uffea\036\uffea\037\uffea\040\uffea\041\uffea\042\uffea" +
    "\043\uffea\044\uffea\045\uffea\046\uffea\047\uffea\050\uffea\051" +
    "\uffea\052\uffea\053\uffea\054\uffea\055\uffea\056\uffea\057\uffea" +
    "\060\uffea\061\uffea\062\uffea\063\uffea\064\uffea\065\uffea\066" +
    "\uffea\067\uffea\070\uffea\071\uffea\072\uffea\073\uffea\074\uffea" +
    "\075\uffea\076\uffea\077\uffea\100\uffea\101\uffea\102\uffea\103" +
    "\uffea\104\uffea\105\uffea\106\uffea\107\uffea\110\uffea\001\002" +
    "\000\004\007\326\001\002\000\214\002\ufff3\004\ufff3\005" +
    "\ufff3\006\ufff3\007\ufff3\010\ufff3\012\ufff3\013\ufff3\014\ufff3" +
    "\015\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\023" +
    "\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3\031\ufff3" +
    "\032\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3\040" +
    "\ufff3\041\ufff3\042\ufff3\043\ufff3\044\ufff3\045\ufff3\046\ufff3" +
    "\047\ufff3\050\ufff3\051\ufff3\052\ufff3\053\ufff3\054\ufff3\055" +
    "\ufff3\056\ufff3\057\ufff3\060\ufff3\061\ufff3\062\ufff3\063\ufff3" +
    "\064\ufff3\065\ufff3\066\ufff3\067\ufff3\070\ufff3\071\ufff3\072" +
    "\ufff3\073\ufff3\074\ufff3\075\ufff3\076\ufff3\077\ufff3\100\ufff3" +
    "\101\ufff3\102\ufff3\103\ufff3\104\ufff3\105\ufff3\106\ufff3\107" +
    "\ufff3\110\ufff3\001\002\000\152\006\022\010\027\017\011" +
    "\020\007\021\047\022\036\023\053\024\046\025\025\026" +
    "\062\027\030\030\006\031\063\032\024\033\020\034\005" +
    "\035\071\036\034\037\054\040\015\041\004\042\042\043" +
    "\040\044\065\045\044\046\072\047\050\050\012\051\013" +
    "\052\023\053\043\054\064\063\033\066\014\067\032\070" +
    "\031\071\035\072\037\073\021\074\067\075\055\076\056" +
    "\077\017\100\016\101\051\102\045\103\041\104\052\105" +
    "\060\106\026\107\010\110\066\001\002\000\040\007\331" +
    "\010\076\012\102\013\112\014\110\015\113\016\106\055" +
    "\114\056\104\057\105\060\100\061\103\062\101\064\075" +
    "\065\115\001\002\000\214\002\uffd9\004\uffd9\005\uffd9\006" +
    "\uffd9\007\uffd9\010\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9" +
    "\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024" +
    "\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9" +
    "\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041" +
    "\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9" +
    "\050\uffd9\051\uffd9\052\uffd9\053\uffd9\054\uffd9\055\uffd9\056" +
    "\uffd9\057\uffd9\060\uffd9\061\uffd9\062\uffd9\063\uffd9\064\uffd9" +
    "\065\uffd9\066\uffd9\067\uffd9\070\uffd9\071\uffd9\072\uffd9\073" +
    "\uffd9\074\uffd9\075\uffd9\076\uffd9\077\uffd9\100\uffd9\101\uffd9" +
    "\102\uffd9\103\uffd9\104\uffd9\105\uffd9\106\uffd9\107\uffd9\110" +
    "\uffd9\001\002\000\214\002\ufff1\004\ufff1\005\ufff1\006\ufff1" +
    "\007\ufff1\010\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016" +
    "\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1" +
    "\025\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1\033" +
    "\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1\040\ufff1\041\ufff1" +
    "\042\ufff1\043\ufff1\044\ufff1\045\ufff1\046\ufff1\047\ufff1\050" +
    "\ufff1\051\ufff1\052\ufff1\053\ufff1\054\ufff1\055\ufff1\056\ufff1" +
    "\057\ufff1\060\ufff1\061\ufff1\062\ufff1\063\ufff1\064\ufff1\065" +
    "\ufff1\066\ufff1\067\ufff1\070\ufff1\071\ufff1\072\ufff1\073\ufff1" +
    "\074\ufff1\075\ufff1\076\ufff1\077\ufff1\100\ufff1\101\ufff1\102" +
    "\ufff1\103\ufff1\104\ufff1\105\ufff1\106\ufff1\107\ufff1\110\ufff1" +
    "\001\002\000\152\006\022\010\027\017\011\020\007\021" +
    "\047\022\036\023\053\024\046\025\025\026\062\027\030" +
    "\030\006\031\063\032\024\033\020\034\005\035\071\036" +
    "\034\037\054\040\015\041\004\042\042\043\040\044\065" +
    "\045\044\046\072\047\050\050\012\051\013\052\023\053" +
    "\043\054\064\063\033\066\014\067\032\070\031\071\035" +
    "\072\037\073\021\074\067\075\055\076\056\077\017\100" +
    "\016\101\051\102\045\103\041\104\052\105\060\106\026" +
    "\107\010\110\066\001\002\000\040\007\335\010\076\012" +
    "\102\013\112\014\110\015\113\016\106\055\114\056\104" +
    "\057\105\060\100\061\103\062\101\064\075\065\115\001" +
    "\002\000\214\002\uffdb\004\uffdb\005\uffdb\006\uffdb\007\uffdb" +
    "\010\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017" +
    "\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb" +
    "\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034" +
    "\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb" +
    "\043\uffdb\044\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb\051" +
    "\uffdb\052\uffdb\053\uffdb\054\uffdb\055\uffdb\056\uffdb\057\uffdb" +
    "\060\uffdb\061\uffdb\062\uffdb\063\uffdb\064\uffdb\065\uffdb\066" +
    "\uffdb\067\uffdb\070\uffdb\071\uffdb\072\uffdb\073\uffdb\074\uffdb" +
    "\075\uffdb\076\uffdb\077\uffdb\100\uffdb\101\uffdb\102\uffdb\103" +
    "\uffdb\104\uffdb\105\uffdb\106\uffdb\107\uffdb\110\uffdb\001\002" +
    "\000\152\006\022\010\027\017\011\020\007\021\047\022" +
    "\036\023\053\024\046\025\025\026\062\027\030\030\006" +
    "\031\063\032\024\033\020\034\005\035\071\036\034\037" +
    "\054\040\015\041\004\042\042\043\040\044\065\045\044" +
    "\046\072\047\050\050\012\051\013\052\023\053\043\054" +
    "\064\063\033\066\014\067\032\070\031\071\035\072\037" +
    "\073\021\074\067\075\055\076\056\077\017\100\016\101" +
    "\051\102\045\103\041\104\052\105\060\106\026\107\010" +
    "\110\066\001\002\000\042\004\107\005\111\010\076\012" +
    "\102\013\112\014\110\015\113\016\106\055\114\056\104" +
    "\057\105\060\100\061\103\062\101\064\075\065\115\001" +
    "\002\000\152\006\022\010\027\017\011\020\007\021\047" +
    "\022\036\023\053\024\046\025\025\026\062\027\030\030" +
    "\006\031\063\032\024\033\020\034\005\035\071\036\034" +
    "\037\054\040\015\041\004\042\042\043\040\044\065\045" +
    "\044\046\072\047\050\050\012\051\013\052\023\053\043" +
    "\054\064\063\033\066\014\067\032\070\031\071\035\072" +
    "\037\073\021\074\067\075\055\076\056\077\017\100\016" +
    "\101\051\102\045\103\041\104\052\105\060\106\026\107" +
    "\010\110\066\001\002\000\042\004\107\005\111\010\076" +
    "\012\102\013\112\014\110\015\113\016\106\055\114\056" +
    "\104\057\105\060\100\061\103\062\101\064\075\065\115" +
    "\001\002\000\152\006\022\010\027\017\011\020\007\021" +
    "\047\022\036\023\053\024\046\025\025\026\062\027\030" +
    "\030\006\031\063\032\024\033\020\034\005\035\071\036" +
    "\034\037\054\040\015\041\004\042\042\043\040\044\065" +
    "\045\044\046\072\047\050\050\012\051\013\052\023\053" +
    "\043\054\064\063\033\066\014\067\032\070\031\071\035" +
    "\072\037\073\021\074\067\075\055\076\056\077\017\100" +
    "\016\101\051\102\045\103\041\104\052\105\060\106\026" +
    "\107\010\110\066\001\002\000\040\007\344\010\076\012" +
    "\102\013\112\014\110\015\113\016\106\055\114\056\104" +
    "\057\105\060\100\061\103\062\101\064\075\065\115\001" +
    "\002\000\214\002\uffd6\004\uffd6\005\uffd6\006\uffd6\007\uffd6" +
    "\010\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017" +
    "\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6" +
    "\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034" +
    "\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6" +
    "\043\uffd6\044\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6\051" +
    "\uffd6\052\uffd6\053\uffd6\054\uffd6\055\uffd6\056\uffd6\057\uffd6" +
    "\060\uffd6\061\uffd6\062\uffd6\063\uffd6\064\uffd6\065\uffd6\066" +
    "\uffd6\067\uffd6\070\uffd6\071\uffd6\072\uffd6\073\uffd6\074\uffd6" +
    "\075\uffd6\076\uffd6\077\uffd6\100\uffd6\101\uffd6\102\uffd6\103" +
    "\uffd6\104\uffd6\105\uffd6\106\uffd6\107\uffd6\110\uffd6\001\002" +
    "\000\152\006\022\010\027\017\011\020\007\021\047\022" +
    "\036\023\053\024\046\025\025\026\062\027\030\030\006" +
    "\031\063\032\024\033\020\034\005\035\071\036\034\037" +
    "\054\040\015\041\004\042\042\043\040\044\065\045\044" +
    "\046\072\047\050\050\012\051\013\052\023\053\043\054" +
    "\064\063\033\066\014\067\032\070\031\071\035\072\037" +
    "\073\021\074\067\075\055\076\056\077\017\100\016\101" +
    "\051\102\045\103\041\104\052\105\060\106\026\107\010" +
    "\110\066\001\002\000\042\004\107\005\111\010\076\012" +
    "\102\013\112\014\110\015\113\016\106\055\114\056\104" +
    "\057\105\060\100\061\103\062\101\064\075\065\115\001" +
    "\002\000\152\006\022\010\027\017\011\020\007\021\047" +
    "\022\036\023\053\024\046\025\025\026\062\027\030\030" +
    "\006\031\063\032\024\033\020\034\005\035\071\036\034" +
    "\037\054\040\015\041\004\042\042\043\040\044\065\045" +
    "\044\046\072\047\050\050\012\051\013\052\023\053\043" +
    "\054\064\063\033\066\014\067\032\070\031\071\035\072" +
    "\037\073\021\074\067\075\055\076\056\077\017\100\016" +
    "\101\051\102\045\103\041\104\052\105\060\106\026\107" +
    "\010\110\066\001\002\000\040\007\351\010\076\012\102" +
    "\013\112\014\110\015\113\016\106\055\114\056\104\057" +
    "\105\060\100\061\103\062\101\064\075\065\115\001\002" +
    "\000\214\002\uffaf\004\uffaf\005\uffaf\006\uffaf\007\uffaf\010" +
    "\uffaf\012\uffaf\013\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf" +
    "\020\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf\026" +
    "\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf" +
    "\035\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\043" +
    "\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf" +
    "\052\uffaf\053\uffaf\054\uffaf\055\uffaf\056\uffaf\057\uffaf\060" +
    "\uffaf\061\uffaf\062\uffaf\063\uffaf\064\uffaf\065\uffaf\066\uffaf" +
    "\067\uffaf\070\uffaf\071\uffaf\072\uffaf\073\uffaf\074\uffaf\075" +
    "\uffaf\076\uffaf\077\uffaf\100\uffaf\101\uffaf\102\uffaf\103\uffaf" +
    "\104\uffaf\105\uffaf\106\uffaf\107\uffaf\110\uffaf\001\002\000" +
    "\040\007\353\010\076\012\102\013\112\014\110\015\113" +
    "\016\106\055\114\056\104\057\105\060\100\061\103\062" +
    "\101\064\075\065\115\001\002\000\214\002\ufffd\004\ufffd" +
    "\005\ufffd\006\ufffd\007\ufffd\010\ufffd\012\ufffd\013\ufffd\014" +
    "\ufffd\015\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd" +
    "\023\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd\030\ufffd\031" +
    "\ufffd\032\ufffd\033\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd" +
    "\040\ufffd\041\ufffd\042\ufffd\043\ufffd\044\ufffd\045\ufffd\046" +
    "\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd\053\ufffd\054\ufffd" +
    "\055\ufffd\056\ufffd\057\ufffd\060\ufffd\061\ufffd\062\ufffd\063" +
    "\ufffd\064\ufffd\065\ufffd\066\ufffd\067\ufffd\070\ufffd\071\ufffd" +
    "\072\ufffd\073\ufffd\074\ufffd\075\ufffd\076\ufffd\077\ufffd\100" +
    "\ufffd\101\ufffd\102\ufffd\103\ufffd\104\ufffd\105\ufffd\106\ufffd" +
    "\107\ufffd\110\ufffd\001\002\000\152\006\022\010\027\017" +
    "\011\020\007\021\047\022\036\023\053\024\046\025\025" +
    "\026\062\027\030\030\006\031\063\032\024\033\020\034" +
    "\005\035\071\036\034\037\054\040\015\041\004\042\042" +
    "\043\040\044\065\045\044\046\072\047\050\050\012\051" +
    "\013\052\023\053\043\054\064\063\033\066\014\067\032" +
    "\070\031\071\035\072\037\073\021\074\067\075\055\076" +
    "\056\077\017\100\016\101\051\102\045\103\041\104\052" +
    "\105\060\106\026\107\010\110\066\001\002\000\040\007" +
    "\356\010\076\012\102\013\112\014\110\015\113\016\106" +
    "\055\114\056\104\057\105\060\100\061\103\062\101\064" +
    "\075\065\115\001\002\000\214\002\uffbb\004\uffbb\005\uffbb" +
    "\006\uffbb\007\uffbb\010\uffbb\012\uffbb\013\uffbb\014\uffbb\015" +
    "\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb" +
    "\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032" +
    "\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb" +
    "\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb\046\uffbb\047" +
    "\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb" +
    "\056\uffbb\057\uffbb\060\uffbb\061\uffbb\062\uffbb\063\uffbb\064" +
    "\uffbb\065\uffbb\066\uffbb\067\uffbb\070\uffbb\071\uffbb\072\uffbb" +
    "\073\uffbb\074\uffbb\075\uffbb\076\uffbb\077\uffbb\100\uffbb\101" +
    "\uffbb\102\uffbb\103\uffbb\104\uffbb\105\uffbb\106\uffbb\107\uffbb" +
    "\110\uffbb\001\002\000\004\104\360\001\002\000\006\004" +
    "\107\005\111\001\002\000\152\006\022\010\027\017\011" +
    "\020\007\021\047\022\036\023\053\024\046\025\025\026" +
    "\062\027\030\030\006\031\063\032\024\033\020\034\005" +
    "\035\071\036\034\037\054\040\015\041\004\042\042\043" +
    "\040\044\065\045\044\046\072\047\050\050\012\051\013" +
    "\052\023\053\043\054\064\063\033\066\014\067\032\070" +
    "\031\071\035\072\037\073\021\074\067\075\055\076\056" +
    "\077\017\100\016\101\051\102\045\103\041\104\052\105" +
    "\060\106\026\107\010\110\066\001\002\000\040\007\363" +
    "\010\076\012\102\013\112\014\110\015\113\016\106\055" +
    "\114\056\104\057\105\060\100\061\103\062\101\064\075" +
    "\065\115\001\002\000\214\002\uffd5\004\uffd5\005\uffd5\006" +
    "\uffd5\007\uffd5\010\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5" +
    "\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024" +
    "\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5" +
    "\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041" +
    "\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5" +
    "\050\uffd5\051\uffd5\052\uffd5\053\uffd5\054\uffd5\055\uffd5\056" +
    "\uffd5\057\uffd5\060\uffd5\061\uffd5\062\uffd5\063\uffd5\064\uffd5" +
    "\065\uffd5\066\uffd5\067\uffd5\070\uffd5\071\uffd5\072\uffd5\073" +
    "\uffd5\074\uffd5\075\uffd5\076\uffd5\077\uffd5\100\uffd5\101\uffd5" +
    "\102\uffd5\103\uffd5\104\uffd5\105\uffd5\106\uffd5\107\uffd5\110" +
    "\uffd5\001\002\000\152\006\022\010\027\017\011\020\007" +
    "\021\047\022\036\023\053\024\046\025\025\026\062\027" +
    "\030\030\006\031\063\032\024\033\020\034\005\035\071" +
    "\036\034\037\054\040\015\041\004\042\042\043\040\044" +
    "\065\045\044\046\072\047\050\050\012\051\013\052\023" +
    "\053\043\054\064\063\033\066\014\067\032\070\031\071" +
    "\035\072\037\073\021\074\067\075\055\076\056\077\017" +
    "\100\016\101\051\102\045\103\041\104\052\105\060\106" +
    "\026\107\010\110\066\001\002\000\040\007\366\010\076" +
    "\012\102\013\112\014\110\015\113\016\106\055\114\056" +
    "\104\057\105\060\100\061\103\062\101\064\075\065\115" +
    "\001\002\000\214\002\uffb7\004\uffb7\005\uffb7\006\uffb7\007" +
    "\uffb7\010\uffb7\012\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7" +
    "\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025" +
    "\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7" +
    "\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\042" +
    "\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7\050\uffb7" +
    "\051\uffb7\052\uffb7\053\uffb7\054\uffb7\055\uffb7\056\uffb7\057" +
    "\uffb7\060\uffb7\061\uffb7\062\uffb7\063\uffb7\064\uffb7\065\uffb7" +
    "\066\uffb7\067\uffb7\070\uffb7\071\uffb7\072\uffb7\073\uffb7\074" +
    "\uffb7\075\uffb7\076\uffb7\077\uffb7\100\uffb7\101\uffb7\102\uffb7" +
    "\103\uffb7\104\uffb7\105\uffb7\106\uffb7\107\uffb7\110\uffb7\001" +
    "\002\000\152\006\022\010\027\017\011\020\007\021\047" +
    "\022\036\023\053\024\046\025\025\026\062\027\030\030" +
    "\006\031\063\032\024\033\020\034\005\035\071\036\034" +
    "\037\054\040\015\041\004\042\042\043\040\044\065\045" +
    "\044\046\072\047\050\050\012\051\013\052\023\053\043" +
    "\054\064\063\033\066\014\067\032\070\031\071\035\072" +
    "\037\073\021\074\067\075\055\076\056\077\017\100\016" +
    "\101\051\102\045\103\041\104\052\105\060\106\026\107" +
    "\010\110\066\001\002\000\040\007\371\010\076\012\102" +
    "\013\112\014\110\015\113\016\106\055\114\056\104\057" +
    "\105\060\100\061\103\062\101\064\075\065\115\001\002" +
    "\000\214\002\uffb5\004\uffb5\005\uffb5\006\uffb5\007\uffb5\010" +
    "\uffb5\012\uffb5\013\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5" +
    "\020\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026" +
    "\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5" +
    "\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043" +
    "\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5" +
    "\052\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5\057\uffb5\060" +
    "\uffb5\061\uffb5\062\uffb5\063\uffb5\064\uffb5\065\uffb5\066\uffb5" +
    "\067\uffb5\070\uffb5\071\uffb5\072\uffb5\073\uffb5\074\uffb5\075" +
    "\uffb5\076\uffb5\077\uffb5\100\uffb5\101\uffb5\102\uffb5\103\uffb5" +
    "\104\uffb5\105\uffb5\106\uffb5\107\uffb5\110\uffb5\001\002\000" +
    "\152\006\022\010\027\017\011\020\007\021\047\022\036" +
    "\023\053\024\046\025\025\026\062\027\030\030\006\031" +
    "\063\032\024\033\020\034\005\035\071\036\034\037\054" +
    "\040\015\041\004\042\042\043\040\044\065\045\044\046" +
    "\072\047\050\050\012\051\013\052\023\053\043\054\064" +
    "\063\033\066\014\067\032\070\031\071\035\072\037\073" +
    "\021\074\067\075\055\076\056\077\017\100\016\101\051" +
    "\102\045\103\041\104\052\105\060\106\026\107\010\110" +
    "\066\001\002\000\040\007\374\010\076\012\102\013\112" +
    "\014\110\015\113\016\106\055\114\056\104\057\105\060" +
    "\100\061\103\062\101\064\075\065\115\001\002\000\214" +
    "\002\uffaa\004\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa\012" +
    "\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa" +
    "\021\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa\027" +
    "\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa" +
    "\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044" +
    "\uffaa\045\uffaa\046\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa" +
    "\053\uffaa\054\uffaa\055\uffaa\056\uffaa\057\uffaa\060\uffaa\061" +
    "\uffaa\062\uffaa\063\uffaa\064\uffaa\065\uffaa\066\uffaa\067\uffaa" +
    "\070\uffaa\071\uffaa\072\uffaa\073\uffaa\074\uffaa\075\uffaa\076" +
    "\uffaa\077\uffaa\100\uffaa\101\uffaa\102\uffaa\103\uffaa\104\uffaa" +
    "\105\uffaa\106\uffaa\107\uffaa\110\uffaa\001\002\000\152\006" +
    "\022\010\027\017\011\020\007\021\047\022\036\023\053" +
    "\024\046\025\025\026\062\027\030\030\006\031\063\032" +
    "\024\033\020\034\005\035\071\036\034\037\054\040\015" +
    "\041\004\042\042\043\040\044\065\045\044\046\072\047" +
    "\050\050\012\051\013\052\023\053\043\054\064\063\033" +
    "\066\014\067\032\070\031\071\035\072\037\073\021\074" +
    "\067\075\055\076\056\077\017\100\016\101\051\102\045" +
    "\103\041\104\052\105\060\106\026\107\010\110\066\001" +
    "\002\000\042\004\107\005\111\010\076\012\102\013\112" +
    "\014\110\015\113\016\106\055\114\056\104\057\105\060" +
    "\100\061\103\062\101\064\075\065\115\001\002\000\152" +
    "\006\022\010\027\017\011\020\007\021\047\022\036\023" +
    "\053\024\046\025\025\026\062\027\030\030\006\031\063" +
    "\032\024\033\020\034\005\035\071\036\034\037\054\040" +
    "\015\041\004\042\042\043\040\044\065\045\044\046\072" +
    "\047\050\050\012\051\013\052\023\053\043\054\064\063" +
    "\033\066\014\067\032\070\031\071\035\072\037\073\021" +
    "\074\067\075\055\076\056\077\017\100\016\101\051\102" +
    "\045\103\041\104\052\105\060\106\026\107\010\110\066" +
    "\001\002\000\044\004\107\005\111\007\u0101\010\076\012" +
    "\102\013\112\014\110\015\113\016\106\055\114\056\104" +
    "\057\105\060\100\061\103\062\101\064\075\065\115\001" +
    "\002\000\214\002\uffae\004\uffae\005\uffae\006\uffae\007\uffae" +
    "\010\uffae\012\uffae\013\uffae\014\uffae\015\uffae\016\uffae\017" +
    "\uffae\020\uffae\021\uffae\022\uffae\023\uffae\024\uffae\025\uffae" +
    "\026\uffae\027\uffae\030\uffae\031\uffae\032\uffae\033\uffae\034" +
    "\uffae\035\uffae\036\uffae\037\uffae\040\uffae\041\uffae\042\uffae" +
    "\043\uffae\044\uffae\045\uffae\046\uffae\047\uffae\050\uffae\051" +
    "\uffae\052\uffae\053\uffae\054\uffae\055\uffae\056\uffae\057\uffae" +
    "\060\uffae\061\uffae\062\uffae\063\uffae\064\uffae\065\uffae\066" +
    "\uffae\067\uffae\070\uffae\071\uffae\072\uffae\073\uffae\074\uffae" +
    "\075\uffae\076\uffae\077\uffae\100\uffae\101\uffae\102\uffae\103" +
    "\uffae\104\uffae\105\uffae\106\uffae\107\uffae\110\uffae\001\002" +
    "\000\152\006\022\010\027\017\011\020\007\021\047\022" +
    "\036\023\053\024\046\025\025\026\062\027\030\030\006" +
    "\031\063\032\024\033\020\034\005\035\071\036\034\037" +
    "\054\040\015\041\004\042\042\043\040\044\065\045\044" +
    "\046\072\047\050\050\012\051\013\052\023\053\043\054" +
    "\064\063\033\066\014\067\032\070\031\071\035\072\037" +
    "\073\021\074\067\075\055\076\056\077\017\100\016\101" +
    "\051\102\045\103\041\104\052\105\060\106\026\107\010" +
    "\110\066\001\002\000\044\004\107\005\111\007\u0104\010" +
    "\076\012\102\013\112\014\110\015\113\016\106\055\114" +
    "\056\104\057\105\060\100\061\103\062\101\064\075\065" +
    "\115\001\002\000\214\002\uffad\004\uffad\005\uffad\006\uffad" +
    "\007\uffad\010\uffad\012\uffad\013\uffad\014\uffad\015\uffad\016" +
    "\uffad\017\uffad\020\uffad\021\uffad\022\uffad\023\uffad\024\uffad" +
    "\025\uffad\026\uffad\027\uffad\030\uffad\031\uffad\032\uffad\033" +
    "\uffad\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad\041\uffad" +
    "\042\uffad\043\uffad\044\uffad\045\uffad\046\uffad\047\uffad\050" +
    "\uffad\051\uffad\052\uffad\053\uffad\054\uffad\055\uffad\056\uffad" +
    "\057\uffad\060\uffad\061\uffad\062\uffad\063\uffad\064\uffad\065" +
    "\uffad\066\uffad\067\uffad\070\uffad\071\uffad\072\uffad\073\uffad" +
    "\074\uffad\075\uffad\076\uffad\077\uffad\100\uffad\101\uffad\102" +
    "\uffad\103\uffad\104\uffad\105\uffad\106\uffad\107\uffad\110\uffad" +
    "\001\002\000\152\006\022\010\027\017\011\020\007\021" +
    "\047\022\036\023\053\024\046\025\025\026\062\027\030" +
    "\030\006\031\063\032\024\033\020\034\005\035\071\036" +
    "\034\037\054\040\015\041\004\042\042\043\040\044\065" +
    "\045\044\046\072\047\050\050\012\051\013\052\023\053" +
    "\043\054\064\063\033\066\014\067\032\070\031\071\035" +
    "\072\037\073\021\074\067\075\055\076\056\077\017\100" +
    "\016\101\051\102\045\103\041\104\052\105\060\106\026" +
    "\107\010\110\066\001\002\000\044\004\107\005\111\007" +
    "\u0107\010\076\012\102\013\112\014\110\015\113\016\106" +
    "\055\114\056\104\057\105\060\100\061\103\062\101\064" +
    "\075\065\115\001\002\000\214\002\uffac\004\uffac\005\uffac" +
    "\006\uffac\007\uffac\010\uffac\012\uffac\013\uffac\014\uffac\015" +
    "\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023\uffac" +
    "\024\uffac\025\uffac\026\uffac\027\uffac\030\uffac\031\uffac\032" +
    "\uffac\033\uffac\034\uffac\035\uffac\036\uffac\037\uffac\040\uffac" +
    "\041\uffac\042\uffac\043\uffac\044\uffac\045\uffac\046\uffac\047" +
    "\uffac\050\uffac\051\uffac\052\uffac\053\uffac\054\uffac\055\uffac" +
    "\056\uffac\057\uffac\060\uffac\061\uffac\062\uffac\063\uffac\064" +
    "\uffac\065\uffac\066\uffac\067\uffac\070\uffac\071\uffac\072\uffac" +
    "\073\uffac\074\uffac\075\uffac\076\uffac\077\uffac\100\uffac\101" +
    "\uffac\102\uffac\103\uffac\104\uffac\105\uffac\106\uffac\107\uffac" +
    "\110\uffac\001\002\000\152\006\022\010\027\017\011\020" +
    "\007\021\047\022\036\023\053\024\046\025\025\026\062" +
    "\027\030\030\006\031\063\032\024\033\020\034\005\035" +
    "\071\036\034\037\054\040\015\041\004\042\042\043\040" +
    "\044\065\045\044\046\072\047\050\050\012\051\013\052" +
    "\023\053\043\054\064\063\033\066\014\067\032\070\031" +
    "\071\035\072\037\073\021\074\067\075\055\076\056\077" +
    "\017\100\016\101\051\102\045\103\041\104\052\105\060" +
    "\106\026\107\010\110\066\001\002\000\040\007\u010a\010" +
    "\076\012\102\013\112\014\110\015\113\016\106\055\114" +
    "\056\104\057\105\060\100\061\103\062\101\064\075\065" +
    "\115\001\002\000\214\002\uffab\004\uffab\005\uffab\006\uffab" +
    "\007\uffab\010\uffab\012\uffab\013\uffab\014\uffab\015\uffab\016" +
    "\uffab\017\uffab\020\uffab\021\uffab\022\uffab\023\uffab\024\uffab" +
    "\025\uffab\026\uffab\027\uffab\030\uffab\031\uffab\032\uffab\033" +
    "\uffab\034\uffab\035\uffab\036\uffab\037\uffab\040\uffab\041\uffab" +
    "\042\uffab\043\uffab\044\uffab\045\uffab\046\uffab\047\uffab\050" +
    "\uffab\051\uffab\052\uffab\053\uffab\054\uffab\055\uffab\056\uffab" +
    "\057\uffab\060\uffab\061\uffab\062\uffab\063\uffab\064\uffab\065" +
    "\uffab\066\uffab\067\uffab\070\uffab\071\uffab\072\uffab\073\uffab" +
    "\074\uffab\075\uffab\076\uffab\077\uffab\100\uffab\101\uffab\102" +
    "\uffab\103\uffab\104\uffab\105\uffab\106\uffab\107\uffab\110\uffab" +
    "\001\002\000\152\006\022\010\027\017\011\020\007\021" +
    "\047\022\036\023\053\024\046\025\025\026\062\027\030" +
    "\030\006\031\063\032\024\033\020\034\005\035\071\036" +
    "\034\037\054\040\015\041\004\042\042\043\040\044\065" +
    "\045\044\046\072\047\050\050\012\051\013\052\023\053" +
    "\043\054\064\063\033\066\014\067\032\070\031\071\035" +
    "\072\037\073\021\074\067\075\055\076\056\077\017\100" +
    "\016\101\051\102\045\103\041\104\052\105\060\106\026" +
    "\107\010\110\066\001\002\000\042\004\107\005\111\010" +
    "\076\012\102\013\112\014\110\015\113\016\106\055\114" +
    "\056\104\057\105\060\100\061\103\062\101\064\075\065" +
    "\115\001\002\000\152\006\022\010\027\017\011\020\007" +
    "\021\047\022\036\023\053\024\046\025\025\026\062\027" +
    "\030\030\006\031\063\032\024\033\020\034\005\035\071" +
    "\036\034\037\054\040\015\041\004\042\042\043\040\044" +
    "\065\045\044\046\072\047\050\050\012\051\013\052\023" +
    "\053\043\054\064\063\033\066\014\067\032\070\031\071" +
    "\035\072\037\073\021\074\067\075\055\076\056\077\017" +
    "\100\016\101\051\102\045\103\041\104\052\105\060\106" +
    "\026\107\010\110\066\001\002\000\044\004\107\005\111" +
    "\007\u010f\010\076\012\102\013\112\014\110\015\113\016" +
    "\106\055\114\056\104\057\105\060\100\061\103\062\101" +
    "\064\075\065\115\001\002\000\214\002\uffa6\004\uffa6\005" +
    "\uffa6\006\uffa6\007\uffa6\010\uffa6\012\uffa6\013\uffa6\014\uffa6" +
    "\015\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6\022\uffa6\023" +
    "\uffa6\024\uffa6\025\uffa6\026\uffa6\027\uffa6\030\uffa6\031\uffa6" +
    "\032\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6\040" +
    "\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6" +
    "\047\uffa6\050\uffa6\051\uffa6\052\uffa6\053\uffa6\054\uffa6\055" +
    "\uffa6\056\uffa6\057\uffa6\060\uffa6\061\uffa6\062\uffa6\063\uffa6" +
    "\064\uffa6\065\uffa6\066\uffa6\067\uffa6\070\uffa6\071\uffa6\072" +
    "\uffa6\073\uffa6\074\uffa6\075\uffa6\076\uffa6\077\uffa6\100\uffa6" +
    "\101\uffa6\102\uffa6\103\uffa6\104\uffa6\105\uffa6\106\uffa6\107" +
    "\uffa6\110\uffa6\001\002\000\152\006\022\010\027\017\011" +
    "\020\007\021\047\022\036\023\053\024\046\025\025\026" +
    "\062\027\030\030\006\031\063\032\024\033\020\034\005" +
    "\035\071\036\034\037\054\040\015\041\004\042\042\043" +
    "\040\044\065\045\044\046\072\047\050\050\012\051\013" +
    "\052\023\053\043\054\064\063\033\066\014\067\032\070" +
    "\031\071\035\072\037\073\021\074\067\075\055\076\056" +
    "\077\017\100\016\101\051\102\045\103\041\104\052\105" +
    "\060\106\026\107\010\110\066\001\002\000\040\007\u0112" +
    "\010\076\012\102\013\112\014\110\015\113\016\106\055" +
    "\114\056\104\057\105\060\100\061\103\062\101\064\075" +
    "\065\115\001\002\000\214\002\uffa5\004\uffa5\005\uffa5\006" +
    "\uffa5\007\uffa5\010\uffa5\012\uffa5\013\uffa5\014\uffa5\015\uffa5" +
    "\016\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5\024" +
    "\uffa5\025\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5" +
    "\033\uffa5\034\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\041" +
    "\uffa5\042\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5" +
    "\050\uffa5\051\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5\056" +
    "\uffa5\057\uffa5\060\uffa5\061\uffa5\062\uffa5\063\uffa5\064\uffa5" +
    "\065\uffa5\066\uffa5\067\uffa5\070\uffa5\071\uffa5\072\uffa5\073" +
    "\uffa5\074\uffa5\075\uffa5\076\uffa5\077\uffa5\100\uffa5\101\uffa5" +
    "\102\uffa5\103\uffa5\104\uffa5\105\uffa5\106\uffa5\107\uffa5\110" +
    "\uffa5\001\002\000\152\006\022\010\027\017\011\020\007" +
    "\021\047\022\036\023\053\024\046\025\025\026\062\027" +
    "\030\030\006\031\063\032\024\033\020\034\005\035\071" +
    "\036\034\037\054\040\015\041\004\042\042\043\040\044" +
    "\065\045\044\046\072\047\050\050\012\051\013\052\023" +
    "\053\043\054\064\063\033\066\014\067\032\070\031\071" +
    "\035\072\037\073\021\074\067\075\055\076\056\077\017" +
    "\100\016\101\051\102\045\103\041\104\052\105\060\106" +
    "\026\107\010\110\066\001\002\000\040\007\u0115\010\076" +
    "\012\102\013\112\014\110\015\113\016\106\055\114\056" +
    "\104\057\105\060\100\061\103\062\101\064\075\065\115" +
    "\001\002\000\214\002\uffe1\004\uffe1\005\uffe1\006\uffe1\007" +
    "\uffe1\010\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1" +
    "\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025" +
    "\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1" +
    "\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042" +
    "\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1" +
    "\051\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1\056\uffe1\057" +
    "\uffe1\060\uffe1\061\uffe1\062\uffe1\063\uffe1\064\uffe1\065\uffe1" +
    "\066\uffe1\067\uffe1\070\uffe1\071\uffe1\072\uffe1\073\uffe1\074" +
    "\uffe1\075\uffe1\076\uffe1\077\uffe1\100\uffe1\101\uffe1\102\uffe1" +
    "\103\uffe1\104\uffe1\105\uffe1\106\uffe1\107\uffe1\110\uffe1\001" +
    "\002\000\154\006\022\007\u0117\010\027\017\011\020\007" +
    "\021\047\022\036\023\053\024\046\025\025\026\062\027" +
    "\030\030\006\031\063\032\024\033\020\034\005\035\071" +
    "\036\034\037\054\040\015\041\004\042\042\043\040\044" +
    "\065\045\044\046\072\047\050\050\012\051\013\052\023" +
    "\053\043\054\064\063\033\066\014\067\032\070\031\071" +
    "\035\072\037\073\021\074\067\075\055\076\056\077\017" +
    "\100\016\101\051\102\045\103\041\104\052\105\060\106" +
    "\026\107\010\110\066\001\002\000\214\002\uffd2\004\uffd2" +
    "\005\uffd2\006\uffd2\007\uffd2\010\uffd2\012\uffd2\013\uffd2\014" +
    "\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2" +
    "\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031" +
    "\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2" +
    "\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\046" +
    "\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2" +
    "\055\uffd2\056\uffd2\057\uffd2\060\uffd2\061\uffd2\062\uffd2\063" +
    "\uffd2\064\uffd2\065\uffd2\066\uffd2\067\uffd2\070\uffd2\071\uffd2" +
    "\072\uffd2\073\uffd2\074\uffd2\075\uffd2\076\uffd2\077\uffd2\100" +
    "\uffd2\101\uffd2\102\uffd2\103\uffd2\104\uffd2\105\uffd2\106\uffd2" +
    "\107\uffd2\110\uffd2\001\002\000\044\004\107\005\111\007" +
    "\u0119\010\076\012\102\013\112\014\110\015\113\016\106" +
    "\055\114\056\104\057\105\060\100\061\103\062\101\064" +
    "\075\065\115\001\002\000\214\002\uffd1\004\uffd1\005\uffd1" +
    "\006\uffd1\007\uffd1\010\uffd1\012\uffd1\013\uffd1\014\uffd1\015" +
    "\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1" +
    "\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032" +
    "\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1" +
    "\041\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047" +
    "\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1" +
    "\056\uffd1\057\uffd1\060\uffd1\061\uffd1\062\uffd1\063\uffd1\064" +
    "\uffd1\065\uffd1\066\uffd1\067\uffd1\070\uffd1\071\uffd1\072\uffd1" +
    "\073\uffd1\074\uffd1\075\uffd1\076\uffd1\077\uffd1\100\uffd1\101" +
    "\uffd1\102\uffd1\103\uffd1\104\uffd1\105\uffd1\106\uffd1\107\uffd1" +
    "\110\uffd1\001\002\000\152\006\022\010\027\017\011\020" +
    "\007\021\047\022\036\023\053\024\046\025\025\026\062" +
    "\027\030\030\006\031\063\032\024\033\020\034\005\035" +
    "\071\036\034\037\054\040\015\041\004\042\042\043\040" +
    "\044\065\045\044\046\072\047\050\050\012\051\013\052" +
    "\023\053\043\054\064\063\033\066\014\067\032\070\031" +
    "\071\035\072\037\073\021\074\067\075\055\076\056\077" +
    "\017\100\016\101\051\102\045\103\041\104\052\105\060" +
    "\106\026\107\010\110\066\001\002\000\044\004\107\005" +
    "\111\007\u011c\010\076\012\102\013\112\014\110\015\113" +
    "\016\106\055\114\056\104\057\105\060\100\061\103\062" +
    "\101\064\075\065\115\001\002\000\214\002\uffd0\004\uffd0" +
    "\005\uffd0\006\uffd0\007\uffd0\010\uffd0\012\uffd0\013\uffd0\014" +
    "\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0" +
    "\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031" +
    "\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0" +
    "\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0\046" +
    "\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0\053\uffd0\054\uffd0" +
    "\055\uffd0\056\uffd0\057\uffd0\060\uffd0\061\uffd0\062\uffd0\063" +
    "\uffd0\064\uffd0\065\uffd0\066\uffd0\067\uffd0\070\uffd0\071\uffd0" +
    "\072\uffd0\073\uffd0\074\uffd0\075\uffd0\076\uffd0\077\uffd0\100" +
    "\uffd0\101\uffd0\102\uffd0\103\uffd0\104\uffd0\105\uffd0\106\uffd0" +
    "\107\uffd0\110\uffd0\001\002\000\152\006\022\010\027\017" +
    "\011\020\007\021\047\022\036\023\053\024\046\025\025" +
    "\026\062\027\030\030\006\031\063\032\024\033\020\034" +
    "\005\035\071\036\034\037\054\040\015\041\004\042\042" +
    "\043\040\044\065\045\044\046\072\047\050\050\012\051" +
    "\013\052\023\053\043\054\064\063\033\066\014\067\032" +
    "\070\031\071\035\072\037\073\021\074\067\075\055\076" +
    "\056\077\017\100\016\101\051\102\045\103\041\104\052" +
    "\105\060\106\026\107\010\110\066\001\002\000\044\004" +
    "\107\005\111\007\u011f\010\076\012\102\013\112\014\110" +
    "\015\113\016\106\055\114\056\104\057\105\060\100\061" +
    "\103\062\101\064\075\065\115\001\002\000\214\002\uffcf" +
    "\004\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf\012\uffcf\013" +
    "\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf" +
    "\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030" +
    "\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf" +
    "\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045" +
    "\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf" +
    "\054\uffcf\055\uffcf\056\uffcf\057\uffcf\060\uffcf\061\uffcf\062" +
    "\uffcf\063\uffcf\064\uffcf\065\uffcf\066\uffcf\067\uffcf\070\uffcf" +
    "\071\uffcf\072\uffcf\073\uffcf\074\uffcf\075\uffcf\076\uffcf\077" +
    "\uffcf\100\uffcf\101\uffcf\102\uffcf\103\uffcf\104\uffcf\105\uffcf" +
    "\106\uffcf\107\uffcf\110\uffcf\001\002\000\152\006\022\010" +
    "\027\017\011\020\007\021\047\022\036\023\053\024\046" +
    "\025\025\026\062\027\030\030\006\031\063\032\024\033" +
    "\020\034\005\035\071\036\034\037\054\040\015\041\004" +
    "\042\042\043\040\044\065\045\044\046\072\047\050\050" +
    "\012\051\013\052\023\053\043\054\064\063\033\066\014" +
    "\067\032\070\031\071\035\072\037\073\021\074\067\075" +
    "\055\076\056\077\017\100\016\101\051\102\045\103\041" +
    "\104\052\105\060\106\026\107\010\110\066\001\002\000" +
    "\044\004\107\005\111\007\u0122\010\076\012\102\013\112" +
    "\014\110\015\113\016\106\055\114\056\104\057\105\060" +
    "\100\061\103\062\101\064\075\065\115\001\002\000\214" +
    "\002\uffce\004\uffce\005\uffce\006\uffce\007\uffce\010\uffce\012" +
    "\uffce\013\uffce\014\uffce\015\uffce\016\uffce\017\uffce\020\uffce" +
    "\021\uffce\022\uffce\023\uffce\024\uffce\025\uffce\026\uffce\027" +
    "\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035\uffce" +
    "\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce\043\uffce\044" +
    "\uffce\045\uffce\046\uffce\047\uffce\050\uffce\051\uffce\052\uffce" +
    "\053\uffce\054\uffce\055\uffce\056\uffce\057\uffce\060\uffce\061" +
    "\uffce\062\uffce\063\uffce\064\uffce\065\uffce\066\uffce\067\uffce" +
    "\070\uffce\071\uffce\072\uffce\073\uffce\074\uffce\075\uffce\076" +
    "\uffce\077\uffce\100\uffce\101\uffce\102\uffce\103\uffce\104\uffce" +
    "\105\uffce\106\uffce\107\uffce\110\uffce\001\002\000\152\006" +
    "\022\010\027\017\011\020\007\021\047\022\036\023\053" +
    "\024\046\025\025\026\062\027\030\030\006\031\063\032" +
    "\024\033\020\034\005\035\071\036\034\037\054\040\015" +
    "\041\004\042\042\043\040\044\065\045\044\046\072\047" +
    "\050\050\012\051\013\052\023\053\043\054\064\063\033" +
    "\066\014\067\032\070\031\071\035\072\037\073\021\074" +
    "\067\075\055\076\056\077\017\100\016\101\051\102\045" +
    "\103\041\104\052\105\060\106\026\107\010\110\066\001" +
    "\002\000\044\004\107\005\111\007\u0125\010\076\012\102" +
    "\013\112\014\110\015\113\016\106\055\114\056\104\057" +
    "\105\060\100\061\103\062\101\064\075\065\115\001\002" +
    "\000\214\002\uffcd\004\uffcd\005\uffcd\006\uffcd\007\uffcd\010" +
    "\uffcd\012\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd" +
    "\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026" +
    "\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd" +
    "\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043" +
    "\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd" +
    "\052\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd\057\uffcd\060" +
    "\uffcd\061\uffcd\062\uffcd\063\uffcd\064\uffcd\065\uffcd\066\uffcd" +
    "\067\uffcd\070\uffcd\071\uffcd\072\uffcd\073\uffcd\074\uffcd\075" +
    "\uffcd\076\uffcd\077\uffcd\100\uffcd\101\uffcd\102\uffcd\103\uffcd" +
    "\104\uffcd\105\uffcd\106\uffcd\107\uffcd\110\uffcd\001\002\000" +
    "\152\006\022\010\027\017\011\020\007\021\047\022\036" +
    "\023\053\024\046\025\025\026\062\027\030\030\006\031" +
    "\063\032\024\033\020\034\005\035\071\036\034\037\054" +
    "\040\015\041\004\042\042\043\040\044\065\045\044\046" +
    "\072\047\050\050\012\051\013\052\023\053\043\054\064" +
    "\063\033\066\014\067\032\070\031\071\035\072\037\073" +
    "\021\074\067\075\055\076\056\077\017\100\016\101\051" +
    "\102\045\103\041\104\052\105\060\106\026\107\010\110" +
    "\066\001\002\000\044\004\107\005\111\007\u0128\010\076" +
    "\012\102\013\112\014\110\015\113\016\106\055\114\056" +
    "\104\057\105\060\100\061\103\062\101\064\075\065\115" +
    "\001\002\000\214\002\uffcc\004\uffcc\005\uffcc\006\uffcc\007" +
    "\uffcc\010\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc" +
    "\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025" +
    "\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc" +
    "\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc\042" +
    "\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc" +
    "\051\uffcc\052\uffcc\053\uffcc\054\uffcc\055\uffcc\056\uffcc\057" +
    "\uffcc\060\uffcc\061\uffcc\062\uffcc\063\uffcc\064\uffcc\065\uffcc" +
    "\066\uffcc\067\uffcc\070\uffcc\071\uffcc\072\uffcc\073\uffcc\074" +
    "\uffcc\075\uffcc\076\uffcc\077\uffcc\100\uffcc\101\uffcc\102\uffcc" +
    "\103\uffcc\104\uffcc\105\uffcc\106\uffcc\107\uffcc\110\uffcc\001" +
    "\002\000\152\006\022\010\027\017\011\020\007\021\047" +
    "\022\036\023\053\024\046\025\025\026\062\027\030\030" +
    "\006\031\063\032\024\033\020\034\005\035\071\036\034" +
    "\037\054\040\015\041\004\042\042\043\040\044\065\045" +
    "\044\046\072\047\050\050\012\051\013\052\023\053\043" +
    "\054\064\063\033\066\014\067\032\070\031\071\035\072" +
    "\037\073\021\074\067\075\055\076\056\077\017\100\016" +
    "\101\051\102\045\103\041\104\052\105\060\106\026\107" +
    "\010\110\066\001\002\000\044\004\107\005\111\007\u012b" +
    "\010\076\012\102\013\112\014\110\015\113\016\106\055" +
    "\114\056\104\057\105\060\100\061\103\062\101\064\075" +
    "\065\115\001\002\000\214\002\uffcb\004\uffcb\005\uffcb\006" +
    "\uffcb\007\uffcb\010\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb" +
    "\016\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024" +
    "\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb" +
    "\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041" +
    "\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb" +
    "\050\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb\055\uffcb\056" +
    "\uffcb\057\uffcb\060\uffcb\061\uffcb\062\uffcb\063\uffcb\064\uffcb" +
    "\065\uffcb\066\uffcb\067\uffcb\070\uffcb\071\uffcb\072\uffcb\073" +
    "\uffcb\074\uffcb\075\uffcb\076\uffcb\077\uffcb\100\uffcb\101\uffcb" +
    "\102\uffcb\103\uffcb\104\uffcb\105\uffcb\106\uffcb\107\uffcb\110" +
    "\uffcb\001\002\000\152\006\022\010\027\017\011\020\007" +
    "\021\047\022\036\023\053\024\046\025\025\026\062\027" +
    "\030\030\006\031\063\032\024\033\020\034\005\035\071" +
    "\036\034\037\054\040\015\041\004\042\042\043\040\044" +
    "\065\045\044\046\072\047\050\050\012\051\013\052\023" +
    "\053\043\054\064\063\033\066\014\067\032\070\031\071" +
    "\035\072\037\073\021\074\067\075\055\076\056\077\017" +
    "\100\016\101\051\102\045\103\041\104\052\105\060\106" +
    "\026\107\010\110\066\001\002\000\044\004\107\005\111" +
    "\007\u012e\010\076\012\102\013\112\014\110\015\113\016" +
    "\106\055\114\056\104\057\105\060\100\061\103\062\101" +
    "\064\075\065\115\001\002\000\214\002\uffca\004\uffca\005" +
    "\uffca\006\uffca\007\uffca\010\uffca\012\uffca\013\uffca\014\uffca" +
    "\015\uffca\016\uffca\017\uffca\020\uffca\021\uffca\022\uffca\023" +
    "\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031\uffca" +
    "\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040" +
    "\uffca\041\uffca\042\uffca\043\uffca\044\uffca\045\uffca\046\uffca" +
    "\047\uffca\050\uffca\051\uffca\052\uffca\053\uffca\054\uffca\055" +
    "\uffca\056\uffca\057\uffca\060\uffca\061\uffca\062\uffca\063\uffca" +
    "\064\uffca\065\uffca\066\uffca\067\uffca\070\uffca\071\uffca\072" +
    "\uffca\073\uffca\074\uffca\075\uffca\076\uffca\077\uffca\100\uffca" +
    "\101\uffca\102\uffca\103\uffca\104\uffca\105\uffca\106\uffca\107" +
    "\uffca\110\uffca\001\002\000\152\006\022\010\027\017\011" +
    "\020\007\021\047\022\036\023\053\024\046\025\025\026" +
    "\062\027\030\030\006\031\063\032\024\033\020\034\005" +
    "\035\071\036\034\037\054\040\015\041\004\042\042\043" +
    "\040\044\065\045\044\046\072\047\050\050\012\051\013" +
    "\052\023\053\043\054\064\063\033\066\014\067\032\070" +
    "\031\071\035\072\037\073\021\074\067\075\055\076\056" +
    "\077\017\100\016\101\051\102\045\103\041\104\052\105" +
    "\060\106\026\107\010\110\066\001\002\000\044\004\107" +
    "\005\111\007\u0131\010\076\012\102\013\112\014\110\015" +
    "\113\016\106\055\114\056\104\057\105\060\100\061\103" +
    "\062\101\064\075\065\115\001\002\000\214\002\uffc9\004" +
    "\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9\012\uffc9\013\uffc9" +
    "\014\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022" +
    "\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9" +
    "\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037" +
    "\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9" +
    "\046\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9\054" +
    "\uffc9\055\uffc9\056\uffc9\057\uffc9\060\uffc9\061\uffc9\062\uffc9" +
    "\063\uffc9\064\uffc9\065\uffc9\066\uffc9\067\uffc9\070\uffc9\071" +
    "\uffc9\072\uffc9\073\uffc9\074\uffc9\075\uffc9\076\uffc9\077\uffc9" +
    "\100\uffc9\101\uffc9\102\uffc9\103\uffc9\104\uffc9\105\uffc9\106" +
    "\uffc9\107\uffc9\110\uffc9\001\002\000\152\006\022\010\027" +
    "\017\011\020\007\021\047\022\036\023\053\024\046\025" +
    "\025\026\062\027\030\030\006\031\063\032\024\033\020" +
    "\034\005\035\071\036\034\037\054\040\015\041\004\042" +
    "\042\043\040\044\065\045\044\046\072\047\050\050\012" +
    "\051\013\052\023\053\043\054\064\063\033\066\014\067" +
    "\032\070\031\071\035\072\037\073\021\074\067\075\055" +
    "\076\056\077\017\100\016\101\051\102\045\103\041\104" +
    "\052\105\060\106\026\107\010\110\066\001\002\000\040" +
    "\007\u0134\010\076\012\102\013\112\014\110\015\113\016" +
    "\106\055\114\056\104\057\105\060\100\061\103\062\101" +
    "\064\075\065\115\001\002\000\214\002\uffc8\004\uffc8\005" +
    "\uffc8\006\uffc8\007\uffc8\010\uffc8\012\uffc8\013\uffc8\014\uffc8" +
    "\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023" +
    "\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8" +
    "\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040" +
    "\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8" +
    "\047\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8\055" +
    "\uffc8\056\uffc8\057\uffc8\060\uffc8\061\uffc8\062\uffc8\063\uffc8" +
    "\064\uffc8\065\uffc8\066\uffc8\067\uffc8\070\uffc8\071\uffc8\072" +
    "\uffc8\073\uffc8\074\uffc8\075\uffc8\076\uffc8\077\uffc8\100\uffc8" +
    "\101\uffc8\102\uffc8\103\uffc8\104\uffc8\105\uffc8\106\uffc8\107" +
    "\uffc8\110\uffc8\001\002\000\152\006\022\010\027\017\011" +
    "\020\007\021\047\022\036\023\053\024\046\025\025\026" +
    "\062\027\030\030\006\031\063\032\024\033\020\034\005" +
    "\035\071\036\034\037\054\040\015\041\004\042\042\043" +
    "\040\044\065\045\044\046\072\047\050\050\012\051\013" +
    "\052\023\053\043\054\064\063\033\066\014\067\032\070" +
    "\031\071\035\072\037\073\021\074\067\075\055\076\056" +
    "\077\017\100\016\101\051\102\045\103\041\104\052\105" +
    "\060\106\026\107\010\110\066\001\002\000\040\007\u0137" +
    "\010\076\012\102\013\112\014\110\015\113\016\106\055" +
    "\114\056\104\057\105\060\100\061\103\062\101\064\075" +
    "\065\115\001\002\000\214\002\uffe0\004\uffe0\005\uffe0\006" +
    "\uffe0\007\uffe0\010\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0" +
    "\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024" +
    "\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0" +
    "\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041" +
    "\uffe0\042\uffe0\043\uffe0\044\uffe0\045\uffe0\046\uffe0\047\uffe0" +
    "\050\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0\056" +
    "\uffe0\057\uffe0\060\uffe0\061\uffe0\062\uffe0\063\uffe0\064\uffe0" +
    "\065\uffe0\066\uffe0\067\uffe0\070\uffe0\071\uffe0\072\uffe0\073" +
    "\uffe0\074\uffe0\075\uffe0\076\uffe0\077\uffe0\100\uffe0\101\uffe0" +
    "\102\uffe0\103\uffe0\104\uffe0\105\uffe0\106\uffe0\107\uffe0\110" +
    "\uffe0\001\002\000\152\006\022\010\027\017\011\020\007" +
    "\021\047\022\036\023\053\024\046\025\025\026\062\027" +
    "\030\030\006\031\063\032\024\033\020\034\005\035\071" +
    "\036\034\037\054\040\015\041\004\042\042\043\040\044" +
    "\065\045\044\046\072\047\050\050\012\051\013\052\023" +
    "\053\043\054\064\063\033\066\014\067\032\070\031\071" +
    "\035\072\037\073\021\074\067\075\055\076\056\077\017" +
    "\100\016\101\051\102\045\103\041\104\052\105\060\106" +
    "\026\107\010\110\066\001\002\000\042\004\107\005\111" +
    "\010\076\012\102\013\112\014\110\015\113\016\106\055" +
    "\114\056\104\057\105\060\100\061\103\062\101\064\075" +
    "\065\115\001\002\000\152\006\022\010\027\017\011\020" +
    "\007\021\047\022\036\023\053\024\046\025\025\026\062" +
    "\027\030\030\006\031\063\032\024\033\020\034\005\035" +
    "\071\036\034\037\054\040\015\041\004\042\042\043\040" +
    "\044\065\045\044\046\072\047\050\050\012\051\013\052" +
    "\023\053\043\054\064\063\033\066\014\067\032\070\031" +
    "\071\035\072\037\073\021\074\067\075\055\076\056\077" +
    "\017\100\016\101\051\102\045\103\041\104\052\105\060" +
    "\106\026\107\010\110\066\001\002\000\040\007\u013c\010" +
    "\076\012\102\013\112\014\110\015\113\016\106\055\114" +
    "\056\104\057\105\060\100\061\103\062\101\064\075\065" +
    "\115\001\002\000\214\002\uffd8\004\uffd8\005\uffd8\006\uffd8" +
    "\007\uffd8\010\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016" +
    "\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8" +
    "\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033" +
    "\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8" +
    "\042\uffd8\043\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8\050" +
    "\uffd8\051\uffd8\052\uffd8\053\uffd8\054\uffd8\055\uffd8\056\uffd8" +
    "\057\uffd8\060\uffd8\061\uffd8\062\uffd8\063\uffd8\064\uffd8\065" +
    "\uffd8\066\uffd8\067\uffd8\070\uffd8\071\uffd8\072\uffd8\073\uffd8" +
    "\074\uffd8\075\uffd8\076\uffd8\077\uffd8\100\uffd8\101\uffd8\102" +
    "\uffd8\103\uffd8\104\uffd8\105\uffd8\106\uffd8\107\uffd8\110\uffd8" +
    "\001\002\000\152\006\022\010\027\017\011\020\007\021" +
    "\047\022\036\023\053\024\046\025\025\026\062\027\030" +
    "\030\006\031\063\032\024\033\020\034\005\035\071\036" +
    "\034\037\054\040\015\041\004\042\042\043\040\044\065" +
    "\045\044\046\072\047\050\050\012\051\013\052\023\053" +
    "\043\054\064\063\033\066\014\067\032\070\031\071\035" +
    "\072\037\073\021\074\067\075\055\076\056\077\017\100" +
    "\016\101\051\102\045\103\041\104\052\105\060\106\026" +
    "\107\010\110\066\001\002\000\040\007\u013f\010\076\012" +
    "\102\013\112\014\110\015\113\016\106\055\114\056\104" +
    "\057\105\060\100\061\103\062\101\064\075\065\115\001" +
    "\002\000\214\002\uffd4\004\uffd4\005\uffd4\006\uffd4\007\uffd4" +
    "\010\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017" +
    "\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4" +
    "\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034" +
    "\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4" +
    "\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4\051" +
    "\uffd4\052\uffd4\053\uffd4\054\uffd4\055\uffd4\056\uffd4\057\uffd4" +
    "\060\uffd4\061\uffd4\062\uffd4\063\uffd4\064\uffd4\065\uffd4\066" +
    "\uffd4\067\uffd4\070\uffd4\071\uffd4\072\uffd4\073\uffd4\074\uffd4" +
    "\075\uffd4\076\uffd4\077\uffd4\100\uffd4\101\uffd4\102\uffd4\103" +
    "\uffd4\104\uffd4\105\uffd4\106\uffd4\107\uffd4\110\uffd4\001\002" +
    "\000\152\006\022\010\027\017\011\020\007\021\047\022" +
    "\036\023\053\024\046\025\025\026\062\027\030\030\006" +
    "\031\063\032\024\033\020\034\005\035\071\036\034\037" +
    "\054\040\015\041\004\042\042\043\040\044\065\045\044" +
    "\046\072\047\050\050\012\051\013\052\023\053\043\054" +
    "\064\063\033\066\014\067\032\070\031\071\035\072\037" +
    "\073\021\074\067\075\055\076\056\077\017\100\016\101" +
    "\051\102\045\103\041\104\052\105\060\106\026\107\010" +
    "\110\066\001\002\000\040\007\u0142\010\076\012\102\013" +
    "\112\014\110\015\113\016\106\055\114\056\104\057\105" +
    "\060\100\061\103\062\101\064\075\065\115\001\002\000" +
    "\214\002\uffa9\004\uffa9\005\uffa9\006\uffa9\007\uffa9\010\uffa9" +
    "\012\uffa9\013\uffa9\014\uffa9\015\uffa9\016\uffa9\017\uffa9\020" +
    "\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9" +
    "\027\uffa9\030\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9\035" +
    "\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9" +
    "\044\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9\051\uffa9\052" +
    "\uffa9\053\uffa9\054\uffa9\055\uffa9\056\uffa9\057\uffa9\060\uffa9" +
    "\061\uffa9\062\uffa9\063\uffa9\064\uffa9\065\uffa9\066\uffa9\067" +
    "\uffa9\070\uffa9\071\uffa9\072\uffa9\073\uffa9\074\uffa9\075\uffa9" +
    "\076\uffa9\077\uffa9\100\uffa9\101\uffa9\102\uffa9\103\uffa9\104" +
    "\uffa9\105\uffa9\106\uffa9\107\uffa9\110\uffa9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0140\000\010\002\067\003\060\005\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\351\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\331\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\323\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\145\005\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\073\001" +
    "\001\000\004\004\076\001\001\000\004\005\140\001\001" +
    "\000\004\005\137\001\001\000\004\005\131\001\001\000" +
    "\004\005\130\001\001\000\004\005\127\001\001\000\004" +
    "\005\126\001\001\000\004\005\125\001\001\000\004\005" +
    "\124\001\001\000\004\005\123\001\001\000\004\005\122" +
    "\001\001\000\002\001\001\000\004\005\121\001\001\000" +
    "\002\001\001\000\004\005\120\001\001\000\004\005\117" +
    "\001\001\000\004\005\116\001\001\000\004\005\115\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\132\001\001\000\004\005\133\001\001\000\004\004\134" +
    "\001\001\000\004\005\135\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\142\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\147\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\153\001" +
    "\001\000\002\001\001\000\004\004\155\001\001\000\002" +
    "\001\001\000\004\005\156\001\001\000\004\004\160\001" +
    "\001\000\002\001\001\000\004\005\161\001\001\000\004" +
    "\004\163\001\001\000\002\001\001\000\004\005\164\001" +
    "\001\000\004\004\166\001\001\000\002\001\001\000\004" +
    "\005\167\001\001\000\004\004\171\001\001\000\002\001" +
    "\001\000\004\005\172\001\001\000\004\004\174\001\001" +
    "\000\002\001\001\000\004\005\175\001\001\000\004\004" +
    "\177\001\001\000\002\001\001\000\004\005\200\001\001" +
    "\000\004\004\202\001\001\000\002\001\001\000\004\005" +
    "\203\001\001\000\004\004\205\001\001\000\002\001\001" +
    "\000\004\005\206\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\211\001\001\000\004\004\212\001\001" +
    "\000\004\005\213\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\216\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\221\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\224\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\227\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\232\001\001\000\004" +
    "\004\233\001\001\000\004\005\234\001\001\000\004\004" +
    "\236\001\001\000\002\001\001\000\004\005\237\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\242\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\245" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\250\001\001\000\004\004\251\001\001\000\004\005\252" +
    "\001\001\000\004\004\253\001\001\000\004\005\254\001" +
    "\001\000\004\004\256\001\001\000\002\001\001\000\004" +
    "\005\257\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\262\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\265\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\270\001\001\000\004\004\271\001\001" +
    "\000\004\005\272\001\001\000\004\004\273\001\001\000" +
    "\004\005\274\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\277\001\001\000\004\004\300\001\001\000" +
    "\004\005\301\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\304\001\001\000\004\004\305\001\001\000" +
    "\004\005\306\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\311\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\314\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\321\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\327\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\333\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\336\001\001\000\004\004\337" +
    "\001\001\000\004\005\340\001\001\000\004\004\341\001" +
    "\001\000\004\005\342\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\345\001\001\000\004\004\346\001" +
    "\001\000\004\005\347\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\354\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\360\001\001\000\004\005\361\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\364" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\367\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\372\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\375\001\001\000\004\004\376\001\001\000\004" +
    "\005\377\001\001\000\004\004\u0101\001\001\000\002\001" +
    "\001\000\004\005\u0102\001\001\000\004\004\u0104\001\001" +
    "\000\002\001\001\000\004\005\u0105\001\001\000\004\004" +
    "\u0107\001\001\000\002\001\001\000\004\005\u0108\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\u010b\001" +
    "\001\000\004\004\u010c\001\001\000\004\005\u010d\001\001" +
    "\000\004\004\u010f\001\001\000\002\001\001\000\004\005" +
    "\u0110\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\u0113\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\u0117\001\001\000\002\001\001\000\004\004\u0119" +
    "\001\001\000\002\001\001\000\004\005\u011a\001\001\000" +
    "\004\004\u011c\001\001\000\002\001\001\000\004\005\u011d" +
    "\001\001\000\004\004\u011f\001\001\000\002\001\001\000" +
    "\004\005\u0120\001\001\000\004\004\u0122\001\001\000\002" +
    "\001\001\000\004\005\u0123\001\001\000\004\004\u0125\001" +
    "\001\000\002\001\001\000\004\005\u0126\001\001\000\004" +
    "\004\u0128\001\001\000\002\001\001\000\004\005\u0129\001" +
    "\001\000\004\004\u012b\001\001\000\002\001\001\000\004" +
    "\005\u012c\001\001\000\004\004\u012e\001\001\000\002\001" +
    "\001\000\004\005\u012f\001\001\000\004\004\u0131\001\001" +
    "\000\002\001\001\000\004\005\u0132\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\u0135\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\u0138\001\001\000" +
    "\004\004\u0139\001\001\000\004\005\u013a\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\u013d\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\u0140\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  /** variable - value relation. */
  protected HashMap m_Symbols = new HashMap();

  /** for storing the result of the expresion. */
  protected Double m_Result = null;

  /** the helper. */
  protected ParserHelper m_Helper = new ParserHelper();

  /**
   * Sets the variable - value relation to use.
   *
   * @param value the variable-value relation
   */
  public void setSymbols(HashMap value) {
    m_Symbols = value;
    m_Helper.setSymbols(value);
  }

  /**
   * Returns the current variable - value relation in use.
   *
   * @return the variable-value relation
   */
  public HashMap getSymbols() {
    return m_Symbols;
  }

  /**
   * Returns the parser helper.
   *
   * @return the helper
   */
  public ParserHelper getHelper() {
    return m_Helper;
  }

  /**
   * Sets the result of the evaluation.
   *
   * @param value the result
   */
  public void setResult(Double value) {
    m_Result = value;
  }

  /**
   * Returns the result of the evaluation.
   *
   * @return the result
   */
  public Double getResult() {
    return m_Result;
  }

  /**
   * Runs the parser from commandline. Either reads lines from System.in
   * or from a provided file (line by line). With
   * <code>-symbols <semi-colon separated list of variable/value pairs></code>
   * as first parameter one can provide predefined variable values. E.g.:
   * <code>-symbols "Y=10;X=3" "X+Y"</code>
   *
   * @param args the commandline arguments
   * @throws Exception if something goes wrong
   */
  public static void main(String args[]) throws Exception {
    // read symbols, if present
    HashMap symbols = new HashMap();
    if (args.length > 0) {
      if (args[0].equals("-symbols")) {
        // parse symbols
        String[] pairs = args[1].replaceAll(" ", "").split(";");
        for (int i = 0; i < pairs.length; i++) {
          String[] parts = pairs[i].split("=");
          symbols.put(parts[0], new Double(parts[1]));
        }
        // print symbols
        System.out.println("\nSymbols provided:");
        Iterator iter = symbols.keySet().iterator();
        while (iter.hasNext()) {
          String key = (String) iter.next();
          System.out.println(key + "=" + symbols.get(key));
        }
        // remove symbols from commandline
        String[] argsNew = new String[args.length - 2];
        System.arraycopy(args, 2, argsNew, 0, argsNew.length);
        args = argsNew;
      }
    }

    // setup input stream
    int index = -1;
    if (args.length == 1)
      index = 0;
    BufferedReader input = null;
    if (index == -1) {
      System.out.println("\nPlease type in expressions (and press <Enter>), exit with <Ctrl+D>:");
      input = new BufferedReader(new InputStreamReader(System.in));
    }
    else {
      System.out.println("\nReading expressions from file '" + args[index] + "':");
      input = new BufferedReader(new FileReader(args[index]));
    }

    // process stream
    SymbolFactory sf = new DefaultSymbolFactory();
    String line;
    while ((line = input.readLine()) != null) {
      ByteArrayInputStream parserInput = new ByteArrayInputStream(line.getBytes());
      Parser parser = new Parser(new Scanner(parserInput,sf), sf);
      parser.setSymbols(symbols);
      parser.parse();
      System.out.println(line + " = " + parser.getResult());
    }
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // semi_or_comma ::= COMMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("semi_or_comma",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // semi_or_comma ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("semi_or_comma",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expr ::= SUBSTITUTE LPAREN expr semi_or_comma expr semi_or_comma expr semi_or_comma expr RPAREN 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = parser.getHelper().substitute(parser.getHelper().toString(s), parser.getHelper().toString(f), parser.getHelper().toString(r), parser.getHelper().toInteger(o)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expr ::= SUBSTITUTE LPAREN expr semi_or_comma expr semi_or_comma expr RPAREN 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = parser.getHelper().substitute(parser.getHelper().toString(s), parser.getHelper().toString(f), parser.getHelper().toString(r)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expr ::= REPLACE LPAREN expr semi_or_comma expr semi_or_comma expr semi_or_comma expr RPAREN 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = parser.getHelper().replace(parser.getHelper().toString(s), parser.getHelper().toInteger(p) - 1, parser.getHelper().toInteger(l), parser.getHelper().toString(n)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expr ::= FIND LPAREN expr semi_or_comma expr semi_or_comma expr RPAREN 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Double(parser.getHelper().toString(s).toLowerCase().indexOf(parser.getHelper().toString(f).toLowerCase(), parser.getHelper().toInteger(p) - 1) + 1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expr ::= FIND LPAREN expr semi_or_comma expr RPAREN 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Double(parser.getHelper().toString(s).toLowerCase().indexOf(parser.getHelper().toString(f).toLowerCase()) + 1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expr ::= MATCHES LPAREN expr semi_or_comma expr RPAREN 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int patternleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int patternright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object pattern = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Boolean(parser.getHelper().toString(s).matches(parser.getHelper().toString(pattern))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expr ::= TRIM LPAREN expr RPAREN 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = parser.getHelper().toString(s).trim(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expr ::= UPPERCASE LPAREN expr RPAREN 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = parser.getHelper().toString(s).toUpperCase(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expr ::= LOWERCASE LPAREN expr RPAREN 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = parser.getHelper().toString(s).toLowerCase(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expr ::= CONCATENATE LPAREN expr semi_or_comma expr semi_or_comma expr semi_or_comma expr semi_or_comma expr RPAREN 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int s3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int s3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object s3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int s4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int s4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object s4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int s5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int s5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s5 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new String(parser.getHelper().toString(s1) + parser.getHelper().toString(s2) + parser.getHelper().toString(s3) + parser.getHelper().toString(s4) + parser.getHelper().toString(s5)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expr ::= CONCATENATE LPAREN expr semi_or_comma expr semi_or_comma expr semi_or_comma expr RPAREN 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int s3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int s3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object s3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int s4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int s4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new String(parser.getHelper().toString(s1) + parser.getHelper().toString(s2) + parser.getHelper().toString(s3) + parser.getHelper().toString(s4)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expr ::= CONCATENATE LPAREN expr semi_or_comma expr semi_or_comma expr RPAREN 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int s3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int s3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new String(parser.getHelper().toString(s1) + parser.getHelper().toString(s2) + parser.getHelper().toString(s3)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expr ::= CONCATENATE LPAREN expr semi_or_comma expr RPAREN 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new String(parser.getHelper().toString(s1) + parser.getHelper().toString(s2)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expr ::= REPEAT LPAREN expr semi_or_comma expr RPAREN 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = parser.getHelper().repeat(parser.getHelper().toString(s), parser.getHelper().toInteger(n)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expr ::= RIGHT LPAREN expr semi_or_comma expr RPAREN 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = parser.getHelper().right(parser.getHelper().toString(s), parser.getHelper().toInteger(n)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expr ::= MID LPAREN expr semi_or_comma expr semi_or_comma expr RPAREN 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = parser.getHelper().mid(parser.getHelper().toString(s), parser.getHelper().toInteger(f) - 1, parser.getHelper().toInteger(n)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expr ::= LEFT LPAREN expr semi_or_comma expr RPAREN 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = parser.getHelper().left(parser.getHelper().toString(s), parser.getHelper().toInteger(n)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expr ::= SUBSTR LPAREN expr semi_or_comma expr semi_or_comma expr RPAREN 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = parser.getHelper().toString(s).substring(parser.getHelper().toDouble(start).intValue() - 1, parser.getHelper().toDouble(end).intValue() - 1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expr ::= SUBSTR LPAREN expr semi_or_comma expr RPAREN 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = parser.getHelper().toString(s).substring(parser.getHelper().toDouble(start).intValue() - 1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expr ::= WEEKNUM LPAREN expr RPAREN 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = parser.getHelper().getDateFieldFromString(s, Calendar.WEEK_OF_YEAR); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expr ::= WEEKDAY LPAREN expr RPAREN 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = parser.getHelper().getDateFieldFromString(s, Calendar.DAY_OF_WEEK); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expr ::= SECOND LPAREN expr RPAREN 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = parser.getHelper().getDateFieldFromString(s, Calendar.SECOND); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expr ::= MINUTE LPAREN expr RPAREN 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = parser.getHelper().getDateFieldFromString(s, Calendar.MINUTE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expr ::= HOUR LPAREN expr RPAREN 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = parser.getHelper().getDateFieldFromString(s, Calendar.HOUR); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expr ::= DAY LPAREN expr RPAREN 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = parser.getHelper().getDateFieldFromString(s, Calendar.DAY_OF_MONTH); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr ::= MONTH LPAREN expr RPAREN 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Double(parser.getHelper().getDateFieldFromString(s, Calendar.MONTH) + 1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expr ::= YEAR LPAREN expr RPAREN 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = parser.getHelper().getDateFieldFromString(s, Calendar.YEAR); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr ::= PROCEDURE LPAREN expr semi_or_comma expr semi_or_comma expr semi_or_comma expr semi_or_comma expr semi_or_comma expr semi_or_comma expr semi_or_comma expr semi_or_comma expr semi_or_comma expr RPAREN 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-21)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-21)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-21)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-19)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-19)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-19)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-17)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-17)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-17)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-15)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object e6 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int e7left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int e7right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object e7 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int e8left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e8right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object e8 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e9left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e9right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e9 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e10left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e10right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e10 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 parser.getHelper().callProcedure(p, new Object[]{e1, e2, e3, e4, e5, e6, e7, e8, e9, e10}); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-21)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr ::= PROCEDURE LPAREN expr semi_or_comma expr semi_or_comma expr semi_or_comma expr semi_or_comma expr semi_or_comma expr semi_or_comma expr semi_or_comma expr semi_or_comma expr RPAREN 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-19)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-19)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-19)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-17)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-17)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-17)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-15)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object e6 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int e7left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e7right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object e7 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e8left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e8right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e8 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e9left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e9right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e9 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 parser.getHelper().callProcedure(p, new Object[]{e1, e2, e3, e4, e5, e6, e7, e8, e9}); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-19)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr ::= PROCEDURE LPAREN expr semi_or_comma expr semi_or_comma expr semi_or_comma expr semi_or_comma expr semi_or_comma expr semi_or_comma expr semi_or_comma expr RPAREN 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-17)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-17)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-17)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-15)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object e6 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e7left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e7right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e7 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e8left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e8right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e8 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 parser.getHelper().callProcedure(p, new Object[]{e1, e2, e3, e4, e5, e6, e7, e8}); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-17)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr ::= PROCEDURE LPAREN expr semi_or_comma expr semi_or_comma expr semi_or_comma expr semi_or_comma expr semi_or_comma expr semi_or_comma expr RPAREN 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-15)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e6 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e7left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e7right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e7 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 parser.getHelper().callProcedure(p, new Object[]{e1, e2, e3, e4, e5, e6, e7}); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr ::= PROCEDURE LPAREN expr semi_or_comma expr semi_or_comma expr semi_or_comma expr semi_or_comma expr semi_or_comma expr RPAREN 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e6 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 parser.getHelper().callProcedure(p, new Object[]{e1, e2, e3, e4, e5, e6}); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr ::= PROCEDURE LPAREN expr semi_or_comma expr semi_or_comma expr semi_or_comma expr semi_or_comma expr RPAREN 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 parser.getHelper().callProcedure(p, new Object[]{e1, e2, e3, e4, e5}); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr ::= PROCEDURE LPAREN expr semi_or_comma expr semi_or_comma expr semi_or_comma expr RPAREN 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 parser.getHelper().callProcedure(p, new Object[]{e1, e2, e3, e4}); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr ::= PROCEDURE LPAREN expr semi_or_comma expr semi_or_comma expr RPAREN 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 parser.getHelper().callProcedure(p, new Object[]{e1, e2, e3}); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr ::= PROCEDURE LPAREN expr semi_or_comma expr RPAREN 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 parser.getHelper().callProcedure(p, new Object[]{e1, e2}); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr ::= PROCEDURE LPAREN expr RPAREN 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 parser.getHelper().callProcedure(p, new Object[]{e1}); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr ::= PROCEDURE LPAREN RPAREN 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 parser.getHelper().callProcedure(p, new Object[]{}); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= FUNCTION LPAREN expr semi_or_comma expr semi_or_comma expr semi_or_comma expr semi_or_comma expr semi_or_comma expr semi_or_comma expr semi_or_comma expr semi_or_comma expr semi_or_comma expr RPAREN 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-21)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-21)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-21)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-19)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-19)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-19)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-17)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-17)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-17)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-15)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object e6 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int e7left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int e7right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object e7 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int e8left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e8right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object e8 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e9left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e9right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e9 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e10left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e10right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e10 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = parser.getHelper().callFunction(f, new Object[]{e1, e2, e3, e4, e5, e6, e7, e8, e9, e10}); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-21)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= FUNCTION LPAREN expr semi_or_comma expr semi_or_comma expr semi_or_comma expr semi_or_comma expr semi_or_comma expr semi_or_comma expr semi_or_comma expr semi_or_comma expr RPAREN 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-19)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-19)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-19)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-17)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-17)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-17)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-15)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object e6 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int e7left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e7right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object e7 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e8left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e8right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e8 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e9left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e9right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e9 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = parser.getHelper().callFunction(f, new Object[]{e1, e2, e3, e4, e5, e6, e7, e8, e9}); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-19)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= FUNCTION LPAREN expr semi_or_comma expr semi_or_comma expr semi_or_comma expr semi_or_comma expr semi_or_comma expr semi_or_comma expr semi_or_comma expr RPAREN 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-17)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-17)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-17)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-15)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object e6 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e7left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e7right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e7 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e8left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e8right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e8 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = parser.getHelper().callFunction(f, new Object[]{e1, e2, e3, e4, e5, e6, e7, e8}); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-17)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= FUNCTION LPAREN expr semi_or_comma expr semi_or_comma expr semi_or_comma expr semi_or_comma expr semi_or_comma expr semi_or_comma expr RPAREN 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-15)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e6 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e7left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e7right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e7 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = parser.getHelper().callFunction(f, new Object[]{e1, e2, e3, e4, e5, e6, e7}); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr ::= FUNCTION LPAREN expr semi_or_comma expr semi_or_comma expr semi_or_comma expr semi_or_comma expr semi_or_comma expr RPAREN 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e6 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = parser.getHelper().callFunction(f, new Object[]{e1, e2, e3, e4, e5, e6}); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= FUNCTION LPAREN expr semi_or_comma expr semi_or_comma expr semi_or_comma expr semi_or_comma expr RPAREN 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = parser.getHelper().callFunction(f, new Object[]{e1, e2, e3, e4, e5}); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= FUNCTION LPAREN expr semi_or_comma expr semi_or_comma expr semi_or_comma expr RPAREN 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = parser.getHelper().callFunction(f, new Object[]{e1, e2, e3, e4}); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= FUNCTION LPAREN expr semi_or_comma expr semi_or_comma expr RPAREN 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = parser.getHelper().callFunction(f, new Object[]{e1, e2, e3}); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= FUNCTION LPAREN expr semi_or_comma expr RPAREN 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = parser.getHelper().callFunction(f, new Object[]{e1, e2}); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= FUNCTION LPAREN expr RPAREN 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = parser.getHelper().callFunction(f, new Object[]{e1}); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= FUNCTION LPAREN RPAREN 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = parser.getHelper().callFunction(f, new Object[]{}); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= LENGTH LPAREN expr RPAREN 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Double(parser.getHelper().toString(s).length()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= ISNAN LPAREN expr RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = parser.getHelper().toDouble(e).isNaN(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= IFMISSING LPAREN VARIABLE semi_or_comma expr RPAREN 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int missingleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int missingright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object missing = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 if (!parser.getSymbols().containsKey(v))
                     RESULT = missing;
                   else
                     RESULT = parser.getSymbols().get(v);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= IFELSE LPAREN expr semi_or_comma expr semi_or_comma expr RPAREN 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e_trueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e_trueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e_true = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e_falseleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e_falseright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e_false = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 if (parser.getHelper().toBoolean(b))
                     RESULT = e_true;
                   else
                     RESULT = e_false;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= CEIL LPAREN expr RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Double(Math.ceil(parser.getHelper().toDouble(e))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= POW LPAREN expr semi_or_comma expr RPAREN 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Double(Math.pow(parser.getHelper().toDouble(b), parser.getHelper().toDouble(e))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= FLOOR LPAREN expr RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Double(Math.floor(parser.getHelper().toDouble(e))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= RINT LPAREN expr RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Double(Math.rint(parser.getHelper().toDouble(e))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= TAN LPAREN expr RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Double(Math.tan(parser.getHelper().toDouble(e))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= COS LPAREN expr RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Double(Math.cos(parser.getHelper().toDouble(e))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= SIN LPAREN expr RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Double(Math.sin(parser.getHelper().toDouble(e))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= EXP LPAREN expr RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Double(Math.exp(parser.getHelper().toDouble(e))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= LOG LPAREN expr RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Double(Math.log(parser.getHelper().toDouble(e))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= SQRT LPAREN expr RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Double(Math.sqrt(parser.getHelper().toDouble(e))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= ABS LPAREN expr RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Double(Math.abs(parser.getHelper().toDouble(e))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= expr EXPONENT expr 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Double(Math.pow(parser.getHelper().toDouble(b), parser.getHelper().toDouble(e))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= expr MODULO expr 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Double(parser.getHelper().toDouble(l) % parser.getHelper().toDouble(r)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= expr DIVISION expr 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Double(parser.getHelper().toDouble(l) / parser.getHelper().toDouble(r)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= expr TIMES expr 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Double(parser.getHelper().toDouble(l) * parser.getHelper().toDouble(r)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= expr MINUS expr 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Double(parser.getHelper().toDouble(l) - parser.getHelper().toDouble(r)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= expr PLUS expr 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Double(parser.getHelper().toDouble(l) + parser.getHelper().toDouble(r)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= expr OR expr 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = parser.getHelper().toBoolean(l) || parser.getHelper().toBoolean(r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= expr AND expr 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = parser.getHelper().toBoolean(l) && parser.getHelper().toBoolean(r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= NOT expr 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = !parser.getHelper().toBoolean(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= expr NOT_EQ expr 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Boolean(parser.getHelper().compare(l, r) != 0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= expr EQ expr 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Boolean(parser.getHelper().compare(l, r) == 0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= expr GE expr 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Boolean(parser.getHelper().compare(l, r) >= 0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= expr GT expr 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Boolean(parser.getHelper().compare(l, r) > 0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= expr LE expr 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Boolean(parser.getHelper().compare(l, r) <= 0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= expr LT expr 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Boolean(parser.getHelper().compare(l, r) < 0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= MINUS expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = -parser.getHelper().toDouble(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= TODAY LPAREN RPAREN 
            {
              Object RESULT =null;
		 RESULT = DateUtils.today(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= NOW LPAREN RPAREN 
            {
              Object RESULT =null;
		 RESULT = DateUtils.now(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= E 
            {
              Object RESULT =null;
		 RESULT = new Double(Math.E); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= PI 
            {
              Object RESULT =null;
		 RESULT = new Double(Math.PI); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= FALSE 
            {
              Object RESULT =null;
		 RESULT = new Boolean(false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= TRUE 
            {
              Object RESULT =null;
		 RESULT = new Boolean(true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= VARIABLE 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (parser.getSymbols().containsKey(v))
                     RESULT = parser.getSymbols().get(v);
                   else
                     throw new IllegalStateException("Unknown symbol '" + v + "'!");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= DATE 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Date d = (Date)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= BOOLEAN 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= NUMBER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr ::= LPAREN expr RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr_part ::= expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.setResult(parser.getHelper().toDouble(e)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_part",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr_list ::= expr_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= expr_list EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // expr_list ::= expr_list expr_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

