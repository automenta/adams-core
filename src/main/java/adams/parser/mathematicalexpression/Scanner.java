/* The following code was generated by JFlex 1.4.2 on 3/04/14 8:52 AM */

/*
 *   This program is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */


/*
 * Scanner.java
 * Copyright (C) 2008-2014 University of Waikato, Hamilton, New Zealand
 */

package adams.parser.mathematicalexpression;

import java_cup.runtime.SymbolFactory;
import java.io.*;

/**
 * A scanner for mathematical expressions.
 *
 * @author FracPete (fracpete at waikato dot ac dot nz)
 * @version $Revision: 8909 $
 */

public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\55\1\54\1\0\1\55\1\64\22\0\1\55\1\12\1\62"+
    "\1\53\1\0\1\6\1\16\1\0\1\60\1\61\1\3\1\2\1\56"+
    "\1\1\1\47\1\4\1\46\11\50\1\0\1\57\1\7\1\10\1\11"+
    "\2\0\1\17\1\30\1\36\1\20\1\24\1\25\1\32\1\41\1\35"+
    "\1\45\1\43\1\26\1\40\1\13\1\14\1\34\1\31\1\22\1\27"+
    "\1\15\1\23\1\45\1\37\1\33\1\42\1\45\1\51\1\63\1\52"+
    "\1\5\1\44\1\0\1\17\1\30\1\36\1\20\1\24\1\25\1\32"+
    "\1\41\1\35\1\45\1\43\1\26\1\40\1\13\1\14\1\34\1\31"+
    "\1\22\1\27\1\15\1\23\1\45\1\37\1\33\1\42\1\45\1\0"+
    "\1\21\uff83\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\3\14\1\15\2\14\1\16"+
    "\2\14\1\17\13\14\1\20\2\1\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\0"+
    "\1\33\1\34\1\35\2\14\1\16\15\14\1\0\7\14"+
    "\1\36\1\0\1\14\1\37\11\14\2\0\1\20\1\0"+
    "\1\40\1\41\1\42\1\43\1\0\1\13\1\44\1\45"+
    "\1\14\1\46\2\14\1\15\1\47\1\50\4\14\1\51"+
    "\3\14\1\52\1\53\1\14\1\54\4\14\1\55\1\56"+
    "\1\57\5\14\1\60\5\14\1\61\2\14\1\0\1\20"+
    "\1\62\1\0\1\14\1\63\1\64\1\65\1\14\1\66"+
    "\4\14\1\67\2\14\1\70\2\14\1\71\6\14\1\72"+
    "\4\14\1\73\1\74\1\0\1\75\1\14\1\76\1\77"+
    "\1\100\1\101\1\102\3\14\1\56\3\14\1\103\3\14"+
    "\1\104\2\14\1\0\3\14\1\54\1\105\1\14\1\106"+
    "\1\14\1\37\5\14\1\107\1\0\1\110\6\14\1\111"+
    "\1\112\1\113\1\0\3\14\1\114\2\14\1\115\1\77"+
    "\1\102\1\14\1\116\1\14\1\117\1\14\1\120";

  private static int [] zzUnpackAction() {
    int [] result = new int[239];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\152\0\152\0\152\0\152"+
    "\0\152\0\324\0\152\0\u0109\0\u013e\0\u0173\0\u01a8\0\u01dd"+
    "\0\152\0\u0212\0\u0247\0\152\0\u027c\0\u02b1\0\u02e6\0\u031b"+
    "\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459\0\u048e\0\u04c3"+
    "\0\u04f8\0\u052d\0\u0562\0\u0597\0\u05cc\0\u0601\0\152\0\152"+
    "\0\152\0\152\0\152\0\152\0\u0636\0\152\0\u066b\0\u06a0"+
    "\0\152\0\152\0\152\0\u06d5\0\u070a\0\u03ba\0\u073f\0\u0774"+
    "\0\u07a9\0\u07de\0\u0813\0\u0848\0\u087d\0\u08b2\0\u08e7\0\u091c"+
    "\0\u0951\0\u0986\0\u09bb\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4"+
    "\0\u0af9\0\u0b2e\0\u0b63\0\u03ba\0\u0b98\0\u0bcd\0\u0c02\0\u0c37"+
    "\0\u0c6c\0\u0ca1\0\u0cd6\0\u0d0b\0\u0d40\0\u0d75\0\u0daa\0\u0ddf"+
    "\0\u0e14\0\u0597\0\u0e49\0\u0e7e\0\152\0\152\0\152\0\152"+
    "\0\u0eb3\0\u03ba\0\u03ba\0\u03ba\0\u0ee8\0\u03ba\0\u0f1d\0\u0f52"+
    "\0\u03ba\0\u03ba\0\u03ba\0\u0f87\0\u0fbc\0\u0ff1\0\u1026\0\u03ba"+
    "\0\u105b\0\u1090\0\u10c5\0\u09f0\0\u03ba\0\u10fa\0\u112f\0\u1164"+
    "\0\u1199\0\u11ce\0\u1203\0\u03ba\0\u1238\0\u0b98\0\u126d\0\u12a2"+
    "\0\u12d7\0\u130c\0\u1341\0\u03ba\0\u1376\0\u13ab\0\u13e0\0\u1415"+
    "\0\u144a\0\u03ba\0\u147f\0\u14b4\0\u14e9\0\u151e\0\152\0\u1553"+
    "\0\u1588\0\u03ba\0\u03ba\0\u03ba\0\u15bd\0\u03ba\0\u15f2\0\u1627"+
    "\0\u165c\0\u1691\0\u03ba\0\u16c6\0\u16fb\0\u03ba\0\u1730\0\u1765"+
    "\0\u03ba\0\u179a\0\u17cf\0\u1804\0\u1839\0\u186e\0\u18a3\0\u03ba"+
    "\0\u18d8\0\u190d\0\u1942\0\u1977\0\u03ba\0\u03ba\0\u19ac\0\u03ba"+
    "\0\u19e1\0\u03ba\0\u1a16\0\u03ba\0\u03ba\0\u1a4b\0\u1a80\0\u1ab5"+
    "\0\u1aea\0\u03ba\0\u1b1f\0\u1b54\0\u1b89\0\u03ba\0\u1bbe\0\u1bf3"+
    "\0\u1c28\0\u03ba\0\u1c5d\0\u1c92\0\u1cc7\0\u1cfc\0\u1d31\0\u1d66"+
    "\0\u03ba\0\u03ba\0\u1d9b\0\u03ba\0\u1dd0\0\u03ba\0\u1e05\0\u1e3a"+
    "\0\u1e6f\0\u1ea4\0\u1ed9\0\u03ba\0\u1f0e\0\u03ba\0\u1f43\0\u1f78"+
    "\0\u1fad\0\u1fe2\0\u2017\0\u204c\0\u03ba\0\u03ba\0\u03ba\0\u2081"+
    "\0\u20b6\0\u20eb\0\u2120\0\u03ba\0\u2155\0\u218a\0\152\0\u03ba"+
    "\0\u03ba\0\u21bf\0\u03ba\0\u21f4\0\u03ba\0\u2229\0\u03ba";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[239];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\4\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\33\1\3\1\33\1\43\1\44\1\43\1\45\1\3"+
    "\1\46\2\47\1\50\1\51\1\52\1\53\1\54\1\3"+
    "\1\47\54\55\1\0\5\55\1\56\1\57\1\3\122\0"+
    "\1\60\37\0\1\61\1\62\63\0\1\63\64\0\1\62"+
    "\67\0\1\33\1\64\1\33\1\0\1\65\1\33\1\0"+
    "\22\33\1\0\1\33\32\0\3\33\1\0\2\33\1\0"+
    "\1\66\21\33\1\0\1\33\32\0\1\33\1\67\1\33"+
    "\1\0\1\70\1\33\1\0\1\71\21\33\1\0\1\33"+
    "\32\0\1\72\2\33\1\0\2\33\1\0\6\33\1\73"+
    "\13\33\1\0\1\33\32\0\3\33\1\0\1\74\1\33"+
    "\1\0\22\33\1\0\1\33\32\0\3\33\1\0\2\33"+
    "\1\0\2\33\1\75\10\33\1\76\6\33\1\0\1\33"+
    "\32\0\3\33\1\0\2\33\1\0\12\33\1\77\7\33"+
    "\1\0\1\33\32\0\3\33\1\0\2\33\1\0\11\33"+
    "\1\100\10\33\1\0\1\33\32\0\3\33\1\0\1\101"+
    "\1\33\1\0\4\33\1\102\6\33\1\103\6\33\1\104"+
    "\1\33\32\0\1\33\1\105\1\33\1\0\2\33\1\0"+
    "\2\33\1\106\17\33\1\0\1\33\32\0\3\33\1\0"+
    "\2\33\1\0\1\33\1\107\1\110\4\33\1\111\3\33"+
    "\1\112\6\33\1\0\1\33\32\0\3\33\1\0\2\33"+
    "\1\0\22\33\1\0\1\33\32\0\1\33\1\113\1\33"+
    "\1\0\2\33\1\0\13\33\1\114\6\33\1\115\1\33"+
    "\32\0\1\116\2\33\1\0\2\33\1\0\3\33\1\117"+
    "\1\33\1\120\14\33\1\0\1\33\32\0\1\33\1\121"+
    "\1\33\1\0\2\33\1\0\2\33\1\122\17\33\1\0"+
    "\1\33\32\0\3\33\1\0\2\33\1\0\2\33\1\123"+
    "\17\33\1\0\1\33\32\0\1\33\1\124\1\33\1\0"+
    "\1\125\1\33\1\0\13\33\1\126\6\33\1\0\1\33"+
    "\32\0\1\33\1\127\1\33\1\0\2\33\1\0\22\33"+
    "\1\0\1\33\32\0\3\33\1\0\2\33\1\0\2\33"+
    "\1\130\17\33\1\0\1\33\43\0\1\131\21\0\1\43"+
    "\1\132\1\43\62\0\1\133\1\0\1\133\14\0\52\134"+
    "\1\0\12\134\54\46\1\0\10\46\54\55\1\0\5\55"+
    "\16\0\1\135\1\0\1\136\4\0\1\137\37\0\1\140"+
    "\15\0\1\141\64\0\2\33\1\142\1\0\2\33\1\0"+
    "\15\33\1\143\4\33\1\0\1\33\32\0\1\144\2\33"+
    "\1\0\2\33\1\0\22\33\1\0\1\33\32\0\3\33"+
    "\1\0\1\33\1\145\1\0\22\33\1\0\1\33\32\0"+
    "\1\146\2\33\1\0\2\33\1\0\22\33\1\0\1\33"+
    "\32\0\3\33\1\0\2\33\1\0\1\33\1\147\11\33"+
    "\1\150\6\33\1\0\1\33\32\0\3\33\1\0\1\33"+
    "\1\151\1\0\22\33\1\0\1\33\32\0\3\33\1\0"+
    "\2\33\1\0\5\33\1\152\14\33\1\0\1\33\32\0"+
    "\3\33\1\0\2\33\1\0\20\33\1\153\1\33\1\0"+
    "\1\33\32\0\3\33\1\0\2\33\1\0\12\33\1\154"+
    "\7\33\1\0\1\33\32\0\1\155\2\33\1\0\2\33"+
    "\1\0\10\33\1\156\11\33\1\0\1\33\32\0\3\33"+
    "\1\0\2\33\1\0\12\33\1\157\7\33\1\0\1\33"+
    "\32\0\3\33\1\0\2\33\1\0\12\33\1\160\7\33"+
    "\1\0\1\33\32\0\3\33\1\0\2\33\1\0\4\33"+
    "\1\161\15\33\1\0\1\33\32\0\1\33\1\162\1\33"+
    "\1\0\2\33\1\0\22\33\1\0\1\33\32\0\1\163"+
    "\2\33\1\0\2\33\1\0\22\33\1\0\1\33\32\0"+
    "\3\164\1\0\2\164\1\0\25\164\1\0\1\164\27\0"+
    "\3\33\1\0\2\33\1\0\10\33\1\165\4\33\1\166"+
    "\4\33\1\0\1\33\32\0\1\167\2\33\1\0\2\33"+
    "\1\0\3\33\1\170\16\33\1\0\1\33\32\0\3\33"+
    "\1\0\2\33\1\0\6\33\1\171\13\33\1\0\1\33"+
    "\32\0\3\33\1\0\2\33\1\0\14\33\1\172\5\33"+
    "\1\0\1\33\32\0\3\33\1\0\2\33\1\0\1\173"+
    "\21\33\1\0\1\33\32\0\1\174\2\33\1\0\2\33"+
    "\1\0\22\33\1\0\1\33\32\0\3\33\1\0\2\33"+
    "\1\0\15\33\1\175\4\33\1\0\1\33\32\0\3\176"+
    "\1\0\2\176\1\0\25\176\1\0\1\176\27\0\3\33"+
    "\1\0\2\33\1\0\3\33\1\177\16\33\1\0\1\33"+
    "\32\0\3\33\1\0\2\33\1\0\2\33\1\200\13\33"+
    "\1\201\3\33\1\0\1\33\32\0\1\202\2\33\1\0"+
    "\2\33\1\0\22\33\1\0\1\33\32\0\1\203\2\33"+
    "\1\0\2\33\1\0\5\33\1\204\14\33\1\0\1\33"+
    "\32\0\3\33\1\0\2\33\1\0\13\33\1\205\6\33"+
    "\1\0\1\33\32\0\3\33\1\0\2\33\1\0\2\33"+
    "\1\206\17\33\1\0\1\33\32\0\1\207\2\33\1\0"+
    "\2\33\1\0\22\33\1\0\1\33\32\0\2\33\1\210"+
    "\1\0\2\33\1\0\22\33\1\0\1\33\32\0\1\211"+
    "\2\33\1\0\1\33\1\212\1\0\22\33\1\0\1\33"+
    "\32\0\3\33\1\0\2\33\1\0\1\33\1\213\20\33"+
    "\1\0\1\33\32\0\3\33\1\0\1\214\1\33\1\0"+
    "\22\33\1\0\1\33\20\0\1\215\46\0\1\216\40\0"+
    "\1\131\21\0\1\133\1\0\1\133\14\0\52\134\1\217"+
    "\12\134\25\0\1\220\52\0\3\33\1\0\1\221\1\33"+
    "\1\0\22\33\1\0\1\33\32\0\3\33\1\0\2\33"+
    "\1\0\2\33\1\222\17\33\1\0\1\33\32\0\3\33"+
    "\1\0\2\33\1\0\16\33\1\223\3\33\1\0\1\33"+
    "\32\0\2\33\1\224\1\0\2\33\1\0\4\33\1\225"+
    "\15\33\1\0\1\33\32\0\2\33\1\226\1\0\2\33"+
    "\1\0\22\33\1\0\1\33\32\0\3\33\1\0\2\33"+
    "\1\0\17\33\1\227\2\33\1\0\1\33\32\0\3\33"+
    "\1\0\2\33\1\0\2\33\1\230\17\33\1\0\1\33"+
    "\32\0\3\33\1\0\2\33\1\0\5\33\1\231\14\33"+
    "\1\0\1\33\32\0\1\33\1\232\1\33\1\0\2\33"+
    "\1\0\22\33\1\0\1\33\32\0\3\33\1\0\1\33"+
    "\1\233\1\0\22\33\1\0\1\33\32\0\3\33\1\0"+
    "\2\33\1\0\2\33\1\234\17\33\1\0\1\33\32\0"+
    "\3\33\1\0\2\33\1\0\10\33\1\235\11\33\1\0"+
    "\1\33\32\0\2\33\1\236\1\0\2\33\1\0\22\33"+
    "\1\0\1\33\32\0\3\33\1\0\2\33\1\0\5\33"+
    "\1\237\14\33\1\0\1\33\32\0\1\33\1\240\1\33"+
    "\1\0\2\33\1\0\22\33\1\0\1\33\32\0\2\33"+
    "\1\241\1\0\2\33\1\0\22\33\1\0\1\33\32\0"+
    "\3\33\1\0\2\33\1\0\2\33\1\242\17\33\1\0"+
    "\1\33\32\0\3\33\1\0\2\33\1\0\13\33\1\243"+
    "\6\33\1\0\1\33\32\0\3\33\1\0\2\33\1\0"+
    "\4\33\1\244\15\33\1\0\1\33\32\0\3\33\1\0"+
    "\2\33\1\0\13\33\1\245\6\33\1\0\1\33\32\0"+
    "\3\33\1\0\1\246\1\33\1\0\22\33\1\0\1\33"+
    "\32\0\3\33\1\0\2\33\1\0\14\33\1\247\5\33"+
    "\1\0\1\33\32\0\3\33\1\0\2\33\1\0\4\33"+
    "\1\250\15\33\1\0\1\33\32\0\3\33\1\0\2\33"+
    "\1\0\21\33\1\251\1\0\1\33\32\0\2\33\1\252"+
    "\1\0\2\33\1\0\22\33\1\0\1\33\32\0\3\33"+
    "\1\0\2\33\1\0\14\33\1\253\5\33\1\0\1\33"+
    "\32\0\3\33\1\0\2\33\1\0\1\33\1\254\20\33"+
    "\1\0\1\33\32\0\3\33\1\0\2\33\1\0\1\255"+
    "\21\33\1\0\1\33\32\0\3\33\1\0\2\33\1\0"+
    "\1\256\21\33\1\0\1\33\67\0\1\216\62\0\1\216"+
    "\1\0\1\216\51\0\1\257\42\0\3\33\1\0\2\33"+
    "\1\0\20\33\1\260\1\33\1\0\1\33\32\0\3\33"+
    "\1\0\1\261\1\33\1\0\22\33\1\0\1\33\32\0"+
    "\2\33\1\262\1\0\2\33\1\0\22\33\1\0\1\33"+
    "\32\0\3\33\1\0\2\33\1\0\1\263\21\33\1\0"+
    "\1\33\32\0\3\33\1\0\2\33\1\0\2\33\1\264"+
    "\17\33\1\0\1\33\32\0\3\33\1\0\2\33\1\0"+
    "\1\265\21\33\1\0\1\33\32\0\3\33\1\0\2\33"+
    "\1\0\1\266\21\33\1\0\1\33\32\0\2\33\1\267"+
    "\1\0\2\33\1\0\22\33\1\0\1\33\32\0\2\33"+
    "\1\270\1\0\2\33\1\0\22\33\1\0\1\33\32\0"+
    "\1\271\2\33\1\0\2\33\1\0\22\33\1\0\1\33"+
    "\32\0\3\33\1\0\2\33\1\0\1\272\21\33\1\0"+
    "\1\33\32\0\1\273\2\33\1\0\2\33\1\0\22\33"+
    "\1\0\1\33\32\0\3\33\1\0\2\33\1\0\5\33"+
    "\1\274\14\33\1\0\1\33\32\0\3\33\1\0\2\33"+
    "\1\0\5\33\1\275\14\33\1\0\1\33\32\0\1\276"+
    "\2\33\1\0\2\33\1\0\22\33\1\0\1\33\32\0"+
    "\3\33\1\0\1\277\1\33\1\0\22\33\1\0\1\33"+
    "\32\0\1\300\2\33\1\0\1\33\1\301\1\0\22\33"+
    "\1\0\1\33\32\0\3\33\1\0\2\33\1\0\17\33"+
    "\1\302\2\33\1\0\1\33\32\0\3\33\1\0\2\33"+
    "\1\0\17\33\1\303\2\33\1\0\1\33\32\0\2\33"+
    "\1\304\1\0\2\33\1\0\22\33\1\0\1\33\32\0"+
    "\1\305\64\0\3\33\1\0\2\33\1\0\14\33\1\306"+
    "\5\33\1\0\1\33\32\0\3\33\1\0\2\33\1\0"+
    "\14\33\1\307\5\33\1\0\1\33\32\0\3\33\1\0"+
    "\2\33\1\0\14\33\1\310\5\33\1\0\1\33\32\0"+
    "\3\33\1\0\2\33\1\0\17\33\1\311\2\33\1\0"+
    "\1\33\32\0\3\33\1\0\2\33\1\0\1\312\12\33"+
    "\1\313\6\33\1\0\1\33\32\0\3\33\1\0\1\33"+
    "\1\314\1\0\22\33\1\0\1\33\32\0\3\33\1\0"+
    "\2\33\1\0\13\33\1\315\6\33\1\0\1\33\32\0"+
    "\3\33\1\0\2\33\1\0\2\33\1\316\17\33\1\0"+
    "\1\33\32\0\3\33\1\0\2\33\1\0\5\33\1\317"+
    "\14\33\1\0\1\33\32\0\2\33\1\320\1\0\2\33"+
    "\1\0\22\33\1\0\1\33\32\0\3\33\1\0\2\33"+
    "\1\0\1\33\1\321\20\33\1\0\1\33\32\0\3\33"+
    "\1\0\1\322\1\33\1\0\22\33\1\0\1\33\32\0"+
    "\3\33\1\0\2\33\1\0\2\33\1\323\17\33\1\0"+
    "\1\33\32\0\3\33\1\0\2\33\1\0\2\33\1\324"+
    "\17\33\1\0\1\33\54\0\1\325\42\0\3\33\1\0"+
    "\2\33\1\0\2\33\1\326\17\33\1\0\1\33\32\0"+
    "\3\33\1\0\1\327\1\33\1\0\22\33\1\0\1\33"+
    "\32\0\3\33\1\0\1\330\1\33\1\0\22\33\1\0"+
    "\1\33\32\0\2\33\1\331\1\0\2\33\1\0\22\33"+
    "\1\0\1\33\32\0\2\33\1\332\1\0\2\33\1\0"+
    "\22\33\1\0\1\33\32\0\3\33\1\0\2\33\1\0"+
    "\13\33\1\333\6\33\1\0\1\33\32\0\3\33\1\0"+
    "\2\33\1\0\2\33\1\334\17\33\1\0\1\33\32\0"+
    "\3\33\1\0\2\33\1\0\16\33\1\335\3\33\1\0"+
    "\1\33\32\0\3\33\1\0\2\33\1\0\20\33\1\336"+
    "\1\33\1\0\1\33\32\0\3\33\1\0\2\33\1\0"+
    "\5\33\1\337\14\33\1\0\1\33\34\0\1\340\62\0"+
    "\3\33\1\0\2\33\1\0\5\33\1\341\14\33\1\0"+
    "\1\33\32\0\3\33\1\0\2\33\1\0\5\33\1\342"+
    "\14\33\1\0\1\33\32\0\3\33\1\0\2\33\1\0"+
    "\1\33\1\343\20\33\1\0\1\33\32\0\3\33\1\0"+
    "\2\33\1\0\20\33\1\344\1\33\1\0\1\33\32\0"+
    "\1\345\2\33\1\0\2\33\1\0\22\33\1\0\1\33"+
    "\32\0\1\346\2\33\1\0\2\33\1\0\22\33\1\0"+
    "\1\33\61\0\1\347\35\0\3\33\1\0\2\33\1\0"+
    "\2\33\1\350\17\33\1\0\1\33\32\0\3\33\1\0"+
    "\2\33\1\0\2\33\1\351\17\33\1\0\1\33\32\0"+
    "\2\33\1\352\1\0\2\33\1\0\22\33\1\0\1\33"+
    "\32\0\3\33\1\0\2\33\1\0\10\33\1\353\11\33"+
    "\1\0\1\33\32\0\3\33\1\0\1\354\1\33\1\0"+
    "\22\33\1\0\1\33\32\0\3\33\1\0\2\33\1\0"+
    "\2\33\1\355\17\33\1\0\1\33\32\0\2\33\1\356"+
    "\1\0\2\33\1\0\22\33\1\0\1\33\32\0\3\33"+
    "\1\0\2\33\1\0\2\33\1\357\17\33\1\0\1\33"+
    "\17\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8798];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\5\11\1\1\1\11\5\1\1\11"+
    "\2\1\1\11\22\1\6\11\1\1\1\11\1\1\1\0"+
    "\3\11\20\1\1\0\10\1\1\0\13\1\2\0\1\1"+
    "\1\0\4\11\1\0\53\1\1\0\1\1\1\11\1\0"+
    "\36\1\1\0\25\1\1\0\17\1\1\0\12\1\1\0"+
    "\6\1\1\11\10\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[239];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  // Author: FracPete (fracpete at waikato dot ac dot nz)
  // Version: $Revision: 8909 $
  protected SymbolFactory sf;

  public Scanner(InputStream r, SymbolFactory sf){
    this(r);
    this.sf = sf;
  }
  StringBuilder string = new StringBuilder();


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 184) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 57: 
          { return sf.newSymbol("Sqrt", sym.SQRT);
          }
        case 81: break;
        case 17: 
          { /* ignore line comments. */
          }
        case 82: break;
        case 37: 
          { return sf.newSymbol("Number", sym.NUMBER, new Double(Double.NaN));
          }
        case 83: break;
        case 12: 
          { return sf.newSymbol("Variable", sym.VARIABLE, new String(yytext()));
          }
        case 84: break;
        case 74: 
          { return sf.newSymbol("WeekDay", sym.WEEKDAY);
          }
        case 85: break;
        case 68: 
          { return sf.newSymbol("Month", sym.MONTH);
          }
        case 86: break;
        case 27: 
          { return sf.newSymbol("Less or equal than", sym.LE);
          }
        case 87: break;
        case 71: 
          { return sf.newSymbol("Minute", sym.MINUTE);
          }
        case 88: break;
        case 29: 
          { return sf.newSymbol("Greater or equal than", sym.GE);
          }
        case 89: break;
        case 10: 
          { return sf.newSymbol("Greater than", sym.GT);
          }
        case 90: break;
        case 36: 
          { return sf.newSymbol("Now", sym.NOW);
          }
        case 91: break;
        case 41: 
          { return sf.newSymbol("Exp", sym.EXP);
          }
        case 92: break;
        case 7: 
          { return sf.newSymbol("Modulo", sym.MODULO);
          }
        case 93: break;
        case 53: 
          { return sf.newSymbol("repeat", sym.REPEAT);
          }
        case 94: break;
        case 58: 
          { return sf.newSymbol("Ceil", sym.CEIL);
          }
        case 95: break;
        case 70: 
          { return sf.newSymbol("Second", sym.SECOND);
          }
        case 96: break;
        case 64: 
          { return sf.newSymbol("False", sym.FALSE);
          }
        case 97: break;
        case 45: 
          { return sf.newSymbol("Sin", sym.SIN);
          }
        case 98: break;
        case 32: 
          { string.append('\n');
          }
        case 99: break;
        case 35: 
          { string.append('\"');
          }
        case 100: break;
        case 18: 
          { /* ignore white space. */
          }
        case 101: break;
        case 6: 
          { return sf.newSymbol("Power", sym.EXPONENT);
          }
        case 102: break;
        case 52: 
          { return sf.newSymbol("Trim", sym.TRIM);
          }
        case 103: break;
        case 67: 
          { return sf.newSymbol("IsNaN", sym.ISNAN);
          }
        case 104: break;
        case 39: 
          { return sf.newSymbol("Abs", sym.ABS);
          }
        case 105: break;
        case 61: 
          { return sf.newSymbol("Today", sym.TODAY);
          }
        case 106: break;
        case 25: 
          { yybegin(YYINITIAL);
                  return sf.newSymbol("String", sym.STRING, string.toString());
          }
        case 107: break;
        case 50: 
          { return sf.newSymbol("Variable", sym.VARIABLE, new String(yytext().replace("[", "").replace("]", "")));
          }
        case 108: break;
        case 34: 
          { string.append('\r');
          }
        case 109: break;
        case 43: 
          { return sf.newSymbol("Log", sym.LOG);
          }
        case 110: break;
        case 23: 
          { string.setLength(0); yybegin(STRING);
          }
        case 111: break;
        case 75: 
          { return sf.newSymbol("Matches", sym.MATCHES);
          }
        case 112: break;
        case 49: 
          { return sf.newSymbol("Mid", sym.MID);
          }
        case 113: break;
        case 65: 
          { return sf.newSymbol("Floor", sym.FLOOR);
          }
        case 114: break;
        case 2: 
          { return sf.newSymbol("Minus", sym.MINUS);
          }
        case 115: break;
        case 33: 
          { string.append('\t');
          }
        case 116: break;
        case 19: 
          { return sf.newSymbol("Comma", sym.COMMA);
          }
        case 117: break;
        case 5: 
          { return sf.newSymbol("Division", sym.DIVISION);
          }
        case 118: break;
        case 51: 
          { return sf.newSymbol("True", sym.TRUE);
          }
        case 119: break;
        case 73: 
          { return sf.newSymbol("WeekNum", sym.WEEKNUM);
          }
        case 120: break;
        case 60: 
          { return sf.newSymbol("Year", sym.YEAR);
          }
        case 121: break;
        case 77: 
          { return sf.newSymbol("Number", sym.NUMBER, new Double(Double.NEGATIVE_INFINITY));
          }
        case 122: break;
        case 76: 
          { return sf.newSymbol("Number", sym.NUMBER, new Double(Double.POSITIVE_INFINITY));
          }
        case 123: break;
        case 28: 
          { return sf.newSymbol("Not qquals", sym.NOT_EQ);
          }
        case 124: break;
        case 20: 
          { return sf.newSymbol("Semicolor", sym.SEMICOLON);
          }
        case 125: break;
        case 30: 
          { return sf.newSymbol("pi", sym.PI);
          }
        case 126: break;
        case 24: 
          { string.append(yytext());
          }
        case 127: break;
        case 80: 
          { return sf.newSymbol("Concantenate", sym.CONCATENATE);
          }
        case 128: break;
        case 47: 
          { return sf.newSymbol("Procedure", sym.PROCEDURE, new String(yytext().substring(2)));
          }
        case 129: break;
        case 1: 
          { System.err.println("Illegal character: "+yytext());
          }
        case 130: break;
        case 44: 
          { return sf.newSymbol("Length", sym.LENGTH);
          }
        case 131: break;
        case 3: 
          { return sf.newSymbol("Plus", sym.PLUS);
          }
        case 132: break;
        case 8: 
          { return sf.newSymbol("Less than", sym.LT);
          }
        case 133: break;
        case 79: 
          { return sf.newSymbol("Substitute", sym.SUBSTITUTE);
          }
        case 134: break;
        case 16: 
          { return sf.newSymbol("Number", sym.NUMBER, new Double(yytext()));
          }
        case 135: break;
        case 21: 
          { return sf.newSymbol("Left Bracket", sym.LPAREN);
          }
        case 136: break;
        case 31: 
          { return sf.newSymbol("IfElse", sym.IFELSE);
          }
        case 137: break;
        case 69: 
          { return sf.newSymbol("Substr", sym.SUBSTR);
          }
        case 138: break;
        case 54: 
          { return sf.newSymbol("Rint", sym.RINT);
          }
        case 139: break;
        case 38: 
          { return sf.newSymbol("Tan", sym.TAN);
          }
        case 140: break;
        case 46: 
          { return sf.newSymbol("Pow", sym.POW);
          }
        case 141: break;
        case 14: 
          { return sf.newSymbol("Or", sym.OR);
          }
        case 142: break;
        case 26: 
          { string.append('\\');
          }
        case 143: break;
        case 40: 
          { return sf.newSymbol("Day", sym.DAY);
          }
        case 144: break;
        case 59: 
          { return sf.newSymbol("Hour", sym.HOUR);
          }
        case 145: break;
        case 72: 
          { return sf.newSymbol("Replace", sym.REPLACE);
          }
        case 146: break;
        case 13: 
          { return sf.newSymbol("And", sym.AND);
          }
        case 147: break;
        case 15: 
          { return sf.newSymbol("e", sym.E);
          }
        case 148: break;
        case 56: 
          { return sf.newSymbol("Left", sym.LEFT);
          }
        case 149: break;
        case 62: 
          { return sf.newSymbol("Right", sym.RIGHT);
          }
        case 150: break;
        case 63: 
          { return sf.newSymbol("UpperCase", sym.UPPERCASE);
          }
        case 151: break;
        case 78: 
          { return sf.newSymbol("IfMissing", sym.IFMISSING);
          }
        case 152: break;
        case 11: 
          { return sf.newSymbol("Not", sym.NOT);
          }
        case 153: break;
        case 42: 
          { return sf.newSymbol("Function", sym.FUNCTION, new String(yytext().substring(2)));
          }
        case 154: break;
        case 22: 
          { return sf.newSymbol("Right Bracket", sym.RPAREN);
          }
        case 155: break;
        case 4: 
          { return sf.newSymbol("Times", sym.TIMES);
          }
        case 156: break;
        case 55: 
          { return sf.newSymbol("Find", sym.FIND);
          }
        case 157: break;
        case 66: 
          { return sf.newSymbol("LowerCase", sym.LOWERCASE);
          }
        case 158: break;
        case 48: 
          { return sf.newSymbol("Cos", sym.COS);
          }
        case 159: break;
        case 9: 
          { return sf.newSymbol("Equals", sym.EQ);
          }
        case 160: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {     return sf.newSymbol("EOF",sym.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
